{
  "version": "1",
  "pip_version": "24.0",
  "install": [
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/be/4f/a747b2537fea6302ff3a307b1f9701853e65e215afc1a62fa931d031c57a/azure_core-1.30.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=3dae7962aad109610e68c9a7abb31d79720e1d982ddf61363038d175a5025e89",
          "hashes": {
            "sha256": "3dae7962aad109610e68c9a7abb31d79720e1d982ddf61363038d175a5025e89"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "azure-core",
        "version": "1.30.0",
        "summary": "Microsoft Azure Core Library for Python",
        "description": "\n# Azure Core shared client library for Python\n\nAzure core provides shared exceptions and modules for Python SDK client libraries.\nThese libraries follow the [Azure SDK Design Guidelines for Python](https://azure.github.io/azure-sdk/python/guidelines/index.html) .\n\nIf you are a client library developer, please reference [client library developer reference](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md) for more information.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/) \n| [Package (Pypi)][package]\n| [Package (Conda)](https://anaconda.org/microsoft/azure-core/)\n| [API reference documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/)\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to <https://github.com/Azure/azure-sdk-for-python/issues/20691>_\n\n## Getting started\n\nTypically, you will not need to install azure core;\nit will be installed when you install one of the client libraries using it.\nIn case you want to install it explicitly (to implement your own client library, for example),\nyou can find it [here](https://pypi.org/project/azure-core/).\n\n## Key concepts\n\n### Azure Core Library Exceptions\n\n#### AzureError\n\nAzureError is the base exception for all errors.\n\n```python\nclass AzureError(Exception):\n    def __init__(self, message, *args, **kwargs):\n        self.inner_exception = kwargs.get(\"error\")\n        self.exc_type, self.exc_value, self.exc_traceback = sys.exc_info()\n        self.exc_type = self.exc_type.__name__ if self.exc_type else type(self.inner_exception)\n        self.exc_msg = \"{}, {}: {}\".format(message, self.exc_type, self.exc_value)  # type: ignore\n        self.message = str(message)\n        self.continuation_token = kwargs.get(\"continuation_token\")\n        super(AzureError, self).__init__(self.message, *args)\n```\n\n*message* is any message (str) to be associated with the exception.\n\n*args* are any additional args to be included with exception.\n\n*kwargs* are keyword arguments to include with the exception. Use the keyword *error* to pass in an internal exception and *continuation_token* for a token reference to continue an incomplete operation.\n\n**The following exceptions inherit from AzureError:**\n\n#### ServiceRequestError\n\nAn error occurred while attempt to make a request to the service. No request was sent.\n\n#### ServiceResponseError\n\nThe request was sent, but the client failed to understand the response.\nThe connection may have timed out. These errors can be retried for idempotent or safe operations.\n\n#### HttpResponseError\n\nA request was made, and a non-success status code was received from the service.\n\n```python\nclass HttpResponseError(AzureError):\n    def __init__(self, message=None, response=None, **kwargs):\n        self.reason = None\n        self.response = response\n        if response:\n            self.reason = response.reason\n            self.status_code = response.status_code\n        self.error = self._parse_odata_body(ODataV4Format, response)  # type: Optional[ODataV4Format]\n        if self.error:\n            message = str(self.error)\n        else:\n            message = message or \"Operation returned an invalid status '{}'\".format(\n                self.reason\n            )\n\n        super(HttpResponseError, self).__init__(message=message, **kwargs)\n```\n\n*message* is the HTTP response error message (optional)\n\n*response* is the HTTP response (optional).\n\n*kwargs* are keyword arguments to include with the exception.\n\n**The following exceptions inherit from HttpResponseError:**\n\n#### DecodeError\n\nAn error raised during response de-serialization.\n\n#### IncompleteReadError\n\nAn error raised if peer closes the connection before we have received the complete message body.\n\n#### ResourceExistsError\n\nAn error response with status code 4xx. This will not be raised directly by the Azure core pipeline.\n\n#### ResourceNotFoundError\n\nAn error response, typically triggered by a 412 response (for update) or 404 (for get/post).\n\n#### ResourceModifiedError\n\nAn error response with status code 4xx, typically 412 Conflict. This will not be raised directly by the Azure core pipeline.\n\n#### ResourceNotModifiedError\n\nAn error response with status code 304. This will not be raised directly by the Azure core pipeline.\n\n#### ClientAuthenticationError\n\nAn error response with status code 4xx. This will not be raised directly by the Azure core pipeline.\n\n#### TooManyRedirectsError\n\nAn error raised when the maximum number of redirect attempts is reached. The maximum amount of redirects can be configured in the RedirectPolicy.\n\n```python\nclass TooManyRedirectsError(HttpResponseError):\n    def __init__(self, history, *args, **kwargs):\n        self.history = history\n        message = \"Reached maximum redirect attempts.\"\n        super(TooManyRedirectsError, self).__init__(message, *args, **kwargs)\n```\n\n*history* is used to document the requests/responses that resulted in redirected requests.\n\n*args* are any additional args to be included with exception.\n\n*kwargs* are keyword arguments to include with the exception.\n\n#### StreamConsumedError\n\nAn error thrown if you try to access the stream of `azure.core.rest.HttpResponse` or `azure.core.rest.AsyncHttpResponse` once\nthe response stream has been consumed.\n\n#### StreamClosedError\n\nAn error thrown if you try to access the stream of the `azure.core.rest.HttpResponse` or `azure.core.rest.AsyncHttpResponse` once\nthe response stream has been closed.\n\n#### ResponseNotReadError\n\nAn error thrown if you try to access the `content` of `azure.core.rest.HttpResponse` or `azure.core.rest.AsyncHttpResponse` before\nreading in the response's bytes first.\n\n### Configurations\n\nWhen calling the methods, some properties can be configured by passing in as kwargs arguments.\n\n| Parameters | Description |\n| --- | --- |\n| headers | The HTTP Request headers. |\n| request_id | The request id to be added into header. |\n| user_agent | If specified, this will be added in front of the user agent string. |\n| logging_enable| Use to enable per operation. Defaults to `False`. |\n| logger | If specified, it will be used to log information. |\n| response_encoding | The encoding to use if known for this service (will disable auto-detection). |\n| raw_request_hook | Callback function. Will be invoked on request. |\n| raw_response_hook | Callback function. Will be invoked on response. |\n| network_span_namer | A callable to customize the span name. |\n| tracing_attributes | Attributes to set on all created spans. |\n| permit_redirects | Whether the client allows redirects. Defaults to `True`. |\n| redirect_max | The maximum allowed redirects. Defaults to `30`. |\n| retry_total | Total number of retries to allow. Takes precedence over other counts. Default value is `10`. |\n| retry_connect | How many connection-related errors to retry on. These are errors raised before the request is sent to the remote server, which we assume has not triggered the server to process the request. Default value is `3`. |\n| retry_read | How many times to retry on read errors. These errors are raised after the request was sent to the server, so the request may have side-effects. Default value is `3`. |\n| retry_status | How many times to retry on bad status codes. Default value is `3`. |\n| retry_backoff_factor | A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). Retry policy will sleep for: `{backoff factor} * (2 ** ({number of total retries} - 1))` seconds. If the backoff_factor is 0.1, then the retry will sleep for [0.0s, 0.2s, 0.4s, ...] between retries. The default value is `0.8`. |\n| retry_backoff_max | The maximum back off time. Default value is `120` seconds (2 minutes). |\n| retry_mode | Fixed or exponential delay between attempts, default is `Exponential`. |\n| timeout | Timeout setting for the operation in seconds, default is `604800`s (7 days). |\n| connection_timeout | A single float in seconds for the connection timeout. Defaults to `300` seconds. |\n| read_timeout | A single float in seconds for the read timeout. Defaults to `300` seconds. |\n| connection_verify | SSL certificate verification. Enabled by default. Set to False to disable, alternatively can be set to the path to a CA_BUNDLE file or directory with certificates of trusted CAs. |\n| connection_cert | Client-side certificates. You can specify a local cert to use as client side certificate, as a single file (containing the private key and the certificate) or as a tuple of both files' paths. |\n| proxies | Dictionary mapping protocol or protocol and hostname to the URL of the proxy. |\n| cookies | Dict or CookieJar object to send with the `Request`. |\n| connection_data_block_size | The block size of data sent over the connection. Defaults to `4096` bytes. |\n\n### Async transport\n\nThe async transport is designed to be opt-in. [AioHttp](https://pypi.org/project/aiohttp/) is one of the supported implementations of async transport. It is not installed by default. You need to install it separately.\n\n### Shared modules\n\n#### MatchConditions\n\nMatchConditions is an enum to describe match conditions.\n\n```python\nclass MatchConditions(Enum):\n    Unconditionally = 1  # Matches any condition\n    IfNotModified = 2  # If the target object is not modified. Usually it maps to etag=<specific etag>\n    IfModified = 3  # Only if the target object is modified. Usually it maps to etag!=<specific etag>\n    IfPresent = 4   # If the target object exists. Usually it maps to etag='*'\n    IfMissing = 5   # If the target object does not exist. Usually it maps to etag!='*'\n```\n\n#### CaseInsensitiveEnumMeta\n\nA metaclass to support case-insensitive enums.\n\n```python\nfrom enum import Enum\n\nfrom azure.core import CaseInsensitiveEnumMeta\n\nclass MyCustomEnum(str, Enum, metaclass=CaseInsensitiveEnumMeta):\n    FOO = 'foo'\n    BAR = 'bar'\n```\n\n#### Null Sentinel Value\n\nA falsy sentinel object which is supposed to be used to specify attributes\nwith no data. This gets serialized to `null` on the wire.\n\n```python\nfrom azure.core.serialization import NULL\n\nassert bool(NULL) is False\n\nfoo = Foo(\n    attr=NULL\n)\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information, see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any\nadditional questions or comments.\n\n<!-- LINKS -->\n[package]: https://pypi.org/project/azure-core/\n\n\n# Release History\n\n## 1.30.0 (2024-02-01)\n\n### Features Added\n\n- Support tuple input for file values  to `azure.core.rest.HttpRequest`  #33948\n- Support tuple input to `files` with duplicate field names  `azure.core.rest.HttpRequest`  #34021\n\n## 1.29.7 (2024-01-18)\n\n### Other Changes\n\n- Removed dependency on `anyio`.  #33282\n\n## 1.29.6 (2023-12-14)\n\n### Bugs Fixed\n\n- Adjusted `AsyncBearerTokenCredentialPolicy` to work properly with `trio` concurrency mechanisms.   ([#33307](https://github.com/Azure/azure-sdk-for-python/pull/33307))\n\n### Other Changes\n\n- Added dependency on `anyio` >=3.0,<5.0\n- Bumped minimum dependency on `requests` to 2.21.0.\n\n## 1.29.5 (2023-10-19)\n\n### Bugs Fixed\n\n- Fixed an issue with `multipart/form-data` in the async transport where `data` was not getting encoded into the request body. #32473\n\n### Other Changes\n\n- Use ssl context from aiohttp by default.\n\n## 1.29.4 (2023-09-07)\n\n### Bugs Fixed\n\n- Fixed the issue that some urls trigger an infinite loop. #31346\n- Fixed issue where IndexError was raised if multipart responses did not match the number of requests. #31471\n- Fixed issue unbound variable exception if dict is invalid in CloudEvent.from_dict. #31835\n- Fixed issue asyncBearerTokenCredentialPolicy is not backward compatible with SansIOHTTPPolicy. #31836\n- Fixed issue mypy complains with new version of azure-core. #31564\n\n## 1.29.3 (2023-08-22)\n\n### Bugs Fixed\n\n- Typing fix: `message` cannot be `None` in `AzureError`. #31564\n\n## 1.29.2 (2023-08-14)\n\n### Bugs Fixed\n\n- Added a default implementation for `AsyncTokenCredential.__aexit__()` #31573\n\n### Other Changes\n\n- Bumped `typing-extensions` version to 4.6.0.\n\n## 1.29.1 (2023-08-09)\n\n### Bugs Fixed\n\n- Not pass `enabled_cae` unless it is explicitly enabled.\n\n## 1.29.0 (2023-08-03)\n\n### Features Added\n\n- A keyword argument `enable_cae` was added to the `get_token` method of the `TokenCredential` protocol.  #31012\n- `BearerTokenCredentialPolicy` and `AsyncBearerTokenCredentialPolicy` now accept `enable_cae` keyword arguments in their constructors. This is used in determining if [Continuous Access Evaluation (CAE)](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) should be enabled for each `get_token` request.  #31012\n\n## 1.28.0 (2023-07-06)\n\n### Features Added\n\n- Added header name parameter to `RequestIdPolicy`. #30772\n- Added `SensitiveHeaderCleanupPolicy` that cleans up sensitive headers if a redirect happens and the new destination is in another domain. #28349\n\n### Other Changes\n\n- Catch aiohttp errors and translate them into azure-core errors.\n\n## 1.27.1 (2023-06-13)\n\n### Bugs Fixed\n\n- Fix url building for some complex query parameters scenarios  #30707\n\n## 1.27.0 (2023-06-01)\n\n### Features Added\n\n- Added support to use sync credentials in `AsyncBearerTokenCredentialPolicy`. #30381\n- Added \"prefix\" parameter to AzureKeyCredentialPolicy #29901\n\n### Bugs Fixed\n\n- Improve error message when providing the wrong credential type for AzureKeyCredential  #30380\n\n## 1.26.4 (2023-04-06)\n\n### Features Added\n\n- Updated settings to include OpenTelemetry as a tracer provider.  #29095\n\n### Other Changes\n\n- Improved typing\n\n## 1.26.3 (2023-02-02)\n\n### Bugs Fixed\n\n- Fixed deflate decompression for aiohttp   #28483\n\n## 1.26.2 (2023-01-05)\n\n### Bugs Fixed\n\n- Fix 'ClientSession' object has no attribute 'auto_decompress'  (thanks to @mghextreme for the contribution)\n\n### Other Changes\n\n- Add \"x-ms-error-code\" as secure header to log\n- Rename \"DEFAULT_HEADERS_WHITELIST\" to \"DEFAULT_HEADERS_ALLOWLIST\". Added a backward compatible alias.\n\n## 1.26.1 (2022-11-03)\n\n### Other Changes\n\n- Added example of RequestsTransport with custom session.  (thanks to @inirudebwoy for the contribution)   #26768\n- Added Python 3.11 support.\n\n## 1.26.0 (2022-10-06)\n\n### Other Changes\n\n- LRO polling will not wait anymore before doing the first status check  #26376\n- Added extra dependency for [aio]. pip install azure-core[aio] installs aiohttp too.\n\n## 1.25.1 (2022-09-01)\n\n### Bugs Fixed\n\n- Added @runtime_checkable to `TokenCredential` protocol definitions  #25187\n\n## 1.25.0 (2022-08-04)\n\nAzure-core is supported on Python 3.7 or later. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n\n### Features Added\n\n- Added `CaseInsensitiveDict` implementation in `azure.core.utils` removing dependency on `requests` and `aiohttp`\n\n## 1.24.2 (2022-06-30)\n\n### Bugs Fixed\n\n- Fixed the bug that azure-core could not be imported under Python 3.11.0b3  #24928\n- `ContentDecodePolicy` can now correctly deserialize more JSON bodies with different mime types #22410\n\n## 1.24.1 (2022-06-01)\n\n### Bugs Fixed\n\n- Declare method level span as INTERNAL by default  #24492\n- Fixed type hints for `azure.core.paging.ItemPaged` #24548\n\n## 1.24.0 (2022-05-06)\n\n### Features Added\n\n- Add `SerializationError` and `DeserializationError` in `azure.core.exceptions` for errors raised during serialization / deserialization  #24312\n\n## 1.23.1 (2022-03-31)\n\n### Bugs Fixed\n\n- Allow stream inputs to the `content` kwarg of `azure.core.rest.HttpRequest` from objects with a `read` method  #23578\n\n## 1.23.0 (2022-03-03)\n\n### Features Added\n\n- Improve intellisense type hinting for service client methods. #22891\n\n- Add a case insensitive dict `case_insensitive_dict` in `azure.core.utils`.  #23206\n\n### Bugs Fixed\n\n- Use \"\\n\" rather than \"/n\" for new line in log.     #23261\n\n### Other Changes\n\n- Log \"WWW-Authenticate\" header in `HttpLoggingPolicy`  #22990\n- Added dependency on `typing-extensions` >= 4.0.1\n\n## 1.22.1 (2022-02-09)\n\n### Bugs Fixed\n\n- Limiting `final-state-via` scope to POST until consuming SDKs has been fixed to use this option properly on PUT.  #22989\n\n## 1.22.0 (2022-02-03)\n_[**This version is deprecated.**]_\n\n### Features Added\n\n- Add support for `final-state-via` LRO option in core.  #22713\n\n### Bugs Fixed\n\n- Add response body to string representation of `HttpResponseError` if we're not able to parse out information #22302\n- Raise `AttributeError` when calling azure.core.pipeline.transport.\\_\\_bases__    #22469\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 1.21.1 (2021-12-06)\n\n### Other Changes\n\n- Revert change in str method  #22023\n\n## 1.21.0 (2021-12-02)\n\n### Breaking Changes\n\n- Sync stream downloading now raises `azure.core.exceptions.DecodeError` rather than `requests.exceptions.ContentDecodingError`\n\n### Bugs Fixed\n\n- Add response body to string representation of `HttpResponseError` if we're not able to parse out information #21800\n\n## 1.20.1 (2021-11-08)\n\n### Bugs Fixed\n\n- Correctly set response's content to decompressed body when users are using aiohttp transport with decompression headers #21620\n\n## 1.20.0 (2021-11-04)\n\n### Features Added\n\n- GA `send_request` onto the `azure.core.PipelineClient` and `azure.core.AsyncPipelineClient`. This method takes in\nrequests and sends them through our pipelines.\n- GA `azure.core.rest`. `azure.core.rest` is our new public simple HTTP library in `azure.core` that users will use to create requests, and consume responses.\n- GA errors `StreamConsumedError`, `StreamClosedError`, and `ResponseNotReadError` to `azure.core.exceptions`. These errors\nare thrown if you mishandle streamed responses from the `azure.core.rest` module\n- add kwargs to the methods for `iter_raw` and `iter_bytes`  #21529\n- no longer raise JSON errors if users pass in file descriptors of JSON to the `json` kwarg in `HttpRequest`  #21504\n- Added new error type `IncompleteReadError` which is raised if peer closes the connection before we have received the complete message body.\n\n### Breaking Changes\n\n- SansIOHTTPPolicy.on_exception returns None instead of bool.\n\n### Bugs Fixed\n\n- The `Content-Length` header in a http response is strictly checked against the actual number of bytes in the body,\n  rather than silently truncating data in case the underlying tcp connection is closed prematurely.\n  (thanks to @jochen-ott-by for the contribution)   #20412\n- UnboundLocalError when SansIOHTTPPolicy handles an exception    #15222\n- Add default content type header of `text/plain` and content length header for users who pass unicode strings to the `content` kwarg of `HttpRequest` in 2.7  #21550\n\n## 1.19.1 (2021-11-01)\n\n### Bugs Fixed\n\n- respect text encoding specified in argument (thanks to @ryohji for the contribution)  #20796\n- Fix \"coroutine x.read() was never awaited\" warning from `ContentDecodePolicy`  #21318\n- fix type check for `data` input to `azure.core.rest` for python 2.7 users  #21341\n- use `charset_normalizer` if `chardet` is not installed to migrate aiohttp 3.8.0 changes.\n\n### Other Changes\n\n- Refactor AzureJSONEncoder (thanks to @Codejune for the contribution)  #21028\n\n## 1.19.0 (2021-09-30)\n\n### Breaking Changes in the Provisional `azure.core.rest` package\n\n- `azure.core.rest.HttpResponse` and `azure.core.rest.AsyncHttpResponse` are now abstract base classes. They should not be initialized directly, instead\nyour transport responses should inherit from them and implement them.\n- The properties of the `azure.core.rest` responses are now all read-only\n\n- HttpLoggingPolicy integrates logs into one record #19925\n\n## 1.18.0 (2021-09-02)\n\n### Features Added\n\n- `azure.core.serialization.AzureJSONEncoder` (introduced in 1.17.0) serializes `datetime.datetime` objects in ISO 8601 format, conforming to RFC 3339's specification.    #20190\n- We now use `azure.core.serialization.AzureJSONEncoder` to serialize `json` input to `azure.core.rest.HttpRequest`.\n\n### Breaking Changes in the Provisional `azure.core.rest` package\n\n- The `text` property on `azure.core.rest.HttpResponse` and `azure.core.rest.AsyncHttpResponse` has changed to a method, which also takes\nan `encoding` parameter.\n- Removed `iter_text` and `iter_lines` from `azure.core.rest.HttpResponse` and `azure.core.rest.AsyncHttpResponse`\n\n### Bugs Fixed\n\n- The behaviour of the headers returned in `azure.core.rest` responses now aligns across sync and async. Items can now be checked case-insensitively and without raising an error for format.\n\n## 1.17.0 (2021-08-05)\n\n### Features Added\n\n- Cut hard dependency on requests library\n- Added a `from_json` method which now accepts storage QueueMessage, eventhub's EventData or ServiceBusMessage or simply json bytes to return a `CloudEvent`\n\n### Fixed\n\n- Not override \"x-ms-client-request-id\" if it already exists in the header.    #17757\n\n### Breaking Changes in the Provisional `azure.core.rest` package\n\n- `azure.core.rest` will not try to guess the `charset` anymore if it was impossible to extract it from `HttpResponse` analysis. This removes our dependency on `charset`.\n\n## 1.16.0 (2021-07-01)\n\n### Features Added\n\n- Add new ***provisional*** methods `send_request` onto the `azure.core.PipelineClient` and `azure.core.AsyncPipelineClient`. This method takes in\nrequests and sends them through our pipelines.\n- Add new ***provisional*** module `azure.core.rest`. `azure.core.rest` is our new public simple HTTP library in `azure.core` that users will use to create requests, and consume responses.\n- Add new ***provisional*** errors `StreamConsumedError`, `StreamClosedError`, and `ResponseNotReadError` to `azure.core.exceptions`. These errors\nare thrown if you mishandle streamed responses from the provisional `azure.core.rest` module\n\n### Fixed\n\n- Improved error message in the `from_dict` method of `CloudEvent` when a wrong schema is sent.\n\n## 1.15.0 (2021-06-04)\n\n### New Features\n\n- Added `BearerTokenCredentialPolicy.on_challenge` and `.authorize_request` to allow subclasses to optionally handle authentication challenges\n\n### Bug Fixes\n\n- Retry policies don't sleep after operations time out\n- The `from_dict` methhod in the `CloudEvent` can now convert a datetime string to datetime object when microsecond exceeds the python limitation\n\n## 1.14.0 (2021-05-13)\n\n### New Features\n\n- Added `azure.core.credentials.AzureNamedKeyCredential` credential #17548.\n- Added `decompress` parameter for `stream_download` method. If it is set to `False`, will not do decompression upon the stream.    #17920\n\n## 1.13.0 (2021-04-02)\n\nAzure core requires Python 2.7 or Python 3.6+ since this release.\n\n### New Features\n\n- Added `azure.core.utils.parse_connection_string` function to parse connection strings across SDKs, with common validation and support for case insensitive keys.\n- Supported adding custom policies  #16519\n- Added `~azure.core.tracing.Link` that should be used while passing `Links` to  `AbstractSpan`.\n- `AbstractSpan` constructor can now take in additional keyword only args.\n\n### Bug fixes\n\n- Make NetworkTraceLoggingPolicy show the auth token in plain text. #14191\n- Fixed RetryPolicy overriding default connection timeout with an extreme value #17481\n\n## 1.12.0 (2021-03-08)\n\nThis version will be the last version to officially support Python 3.5, future versions will require Python 2.7 or Python 3.6+.\n\n### Features\n\n- Added `azure.core.messaging.CloudEvent` model that follows the cloud event spec.\n- Added `azure.core.serialization.NULL` sentinel value\n- Improve `repr`s for `HttpRequest` and `HttpResponse`s  #16972\n\n### Bug Fixes\n\n- Disable retry in stream downloading. (thanks to @jochen-ott-by @hoffmann for the contribution)  #16723\n\n## 1.11.0 (2021-02-08)\n\n### Features\n\n- Added `CaseInsensitiveEnumMeta` class for case-insensitive enums.  #16316\n- Add `raise_for_status` method onto `HttpResponse`. Calling `response.raise_for_status()` on a response with an error code\nwill raise an `HttpResponseError`. Calling it on a good response will do nothing  #16399\n\n### Bug Fixes\n\n- Update conn.conn_kw rather than overriding it when setting block size. (thanks for @jiasli for the contribution)  #16587\n\n## 1.10.0 (2021-01-11)\n\n### Features\n\n- Added `AzureSasCredential` and its respective policy. #15946\n\n## 1.9.0 (2020-11-09)\n\n### Features\n\n- Add a `continuation_token` attribute to the base `AzureError` exception, and set this value for errors raised\n  during paged or long-running operations.\n\n### Bug Fixes\n\n- Set retry_interval to 1 second instead of 1000 seconds (thanks **vbarbaresi** for contributing)  #14357\n\n\n## 1.8.2 (2020-10-05)\n\n### Bug Fixes\n\n- Fixed bug to allow polling in the case of parameterized endpoints with relative polling urls  #14097\n\n\n## 1.8.1 (2020-09-08)\n\n### Bug fixes\n\n- SAS credential replicated \"/\" fix #13159\n\n## 1.8.0 (2020-08-10)\n\n### Features\n\n- Support params as list for exploding parameters  #12410\n\n\n## 1.7.0 (2020-07-06)\n\n### Bug fixes\n\n- `AzureKeyCredentialPolicy` will now accept (and ignore) passed in kwargs  #11963\n- Better error messages if passed endpoint is incorrect  #12106\n- Do not JSON encore a string if content type is \"text\"  #12137\n\n### Features\n\n- Added `http_logging_policy` property on the `Configuration` object, allowing users to individually\nset the http logging policy of the config  #12218\n\n## 1.6.0 (2020-06-03)\n\n### Bug fixes\n\n- Fixed deadlocks in AsyncBearerTokenCredentialPolicy #11543\n- Fix AttributeException in StreamDownloadGenerator #11462\n\n### Features\n\n- Added support for changesets as part of multipart message support #10485\n- Add AsyncLROPoller in azure.core.polling #10801\n- Add get_continuation_token/from_continuation_token/polling_method methods in pollers (sync and async) #10801\n- HttpResponse and PipelineContext objects are now pickable #10801\n\n## 1.5.0 (2020-05-04)\n\n### Features\n\n- Support \"x-ms-retry-after-ms\" in response header   #10743\n- `link` and `link_from_headers` now accepts attributes   #10765\n\n### Bug fixes\n\n- Not retry if the status code is less than 400 #10778\n- \"x-ms-request-id\" is not considered safe header for logging #10967\n\n## 1.4.0 (2020-04-06)\n\n### Features\n\n- Support a default error type in map_error #9773\n- Added `AzureKeyCredential` and its respective policy. #10509\n- Added `azure.core.polling.base_polling` module with a \"Microsoft One API\" polling implementation #10090\n  Also contains the async version in `azure.core.polling.async_base_polling`\n- Support kwarg `enforce_https` to disable HTTPS check on authentication #9821\n- Support additional kwargs in `HttpRequest.set_multipart_mixed` that will be passed into pipeline context.\n\n## 1.3.0 (2020-03-09)\n\n### Bug fixes\n\n- Appended RequestIdPolicy to the default pipeline  #9841\n- Rewind the body position in async_retry   #10117\n\n### Features\n\n- Add raw_request_hook support in custom_hook_policy   #9958\n- Add timeout support in retry_policy   #10011\n- Add OdataV4 error format auto-parsing in all exceptions ('error' attribute)  #9738\n\n## 1.2.2 (2020-02-10)\n\n### Bug fixes\n\n- Fixed a bug that sends None as request_id #9545\n- Enable mypy for customers #9572\n- Handle TypeError in deep copy #9620\n- Fix text/plain content-type in decoder #9589\n\n## 1.2.1 (2020-01-14)\n\n### Bug fixes\n\n- Fixed a regression in 1.2.0 that was incompatible with azure-keyvault-* 4.0.0\n[#9462](https://github.com/Azure/azure-sdk-for-python/issues/9462)\n\n\n## 1.2.0 (2020-01-14)\n\n### Features\n\n- Add user_agent & sdk_moniker kwargs in UserAgentPolicy init   #9355\n- Support OPTIONS HTTP verb     #9322\n- Add tracing_attributes to tracing decorator   #9297\n- Support auto_request_id in RequestIdPolicy   #9163\n- Support fixed retry   #6419\n- Support \"retry-after-ms\" in response header   #9240\n\n### Bug fixes\n\n- Removed `__enter__` and `__exit__` from async context managers    #9313\n\n## 1.1.1 (2019-12-03)\n\n### Bug fixes\n\n- Bearer token authorization requires HTTPS\n- Rewind the body position in retry #8307\n\n## 1.1.0 (2019-11-25)\n\n### Features\n\n- New RequestIdPolicy   #8437\n- Enable logging policy in default pipeline #8053\n- Normalize transport timeout.   #8000\n  Now we have:\n  * 'connection_timeout' - a single float in seconds for the connection timeout. Default 5min\n  * 'read_timeout' - a single float in seconds for the read timeout. Default 5min\n\n### Bug fixes\n\n- RequestHistory: deepcopy fails if request contains a stream  #7732\n- Retry: retry raises error if response does not have http_response #8629\n- Client kwargs are now passed to DistributedTracingPolicy correctly    #8051\n- NetworkLoggingPolicy now logs correctly all requests in case of retry #8262\n\n## 1.0.0 (2019-10-29)\n\n### Features\n\n- Tracing: DistributedTracingPolicy now accepts kwargs network_span_namer to change network span name  #7773\n- Tracing: Implementation of AbstractSpan can now use the mixin HttpSpanMixin to get HTTP span update automatically  #7773\n- Tracing: AbstractSpan contract \"change_context\" introduced  #7773\n- Introduce new policy HttpLoggingPolicy  #7988\n\n### Bug fixes\n\n- Fix AsyncioRequestsTransport if input stream is an async generator  #7743\n- Fix form-data with aiohttp transport  #7749\n\n### Breaking changes\n\n- Tracing: AbstractSpan.set_current_span is longer supported. Use change_context instead.  #7773\n- azure.core.pipeline.policies.ContentDecodePolicy.deserialize_from_text changed\n\n## 1.0.0b4 (2019-10-07)\n\n### Features\n\n- Tracing: network span context is available with the TRACING_CONTEXT in pipeline response  #7252\n- Tracing: Span contract now has `kind`, `traceparent` and is a context manager  #7252\n- SansIOHTTPPolicy methods can now be coroutines #7497\n- Add multipart/mixed support #7083:\n\n  - HttpRequest now has a \"set_multipart_mixed\" method to set the parts of this request\n  - HttpRequest now has a \"prepare_multipart_body\" method to build final body.\n  - HttpResponse now has a \"parts\" method to return an iterator of parts\n  - AsyncHttpResponse now has a \"parts\" methods to return an async iterator of parts\n  - Note that multipart/mixed is a Python 3.x only feature\n\n### Bug fixes\n\n- Tracing: policy cannot fail the pipeline, even in the worst condition  #7252\n- Tracing: policy pass correctly status message if exception  #7252\n- Tracing: incorrect span if exception raised from decorated function  #7133\n- Fixed urllib3 ConnectTimeoutError being raised by Requests during a socket timeout. Now this exception is caught and wrapped as a `ServiceRequestError`  #7542\n\n### Breaking changes\n\n- Tracing: `azure.core.tracing.context` removed\n- Tracing: `azure.core.tracing.context.tracing_context.with_current_context` renamed to `azure.core.tracing.common.with_current_context`  #7252\n- Tracing: `link` renamed `link_from_headers`  and `link` takes now a string\n- Tracing: opencensus implementation has been moved to the package `azure-core-tracing-opencensus`\n- Some modules and classes that were importables from several different places have been removed:\n\n   - `azure.core.HttpResponseError` is now only `azure.core.exceptions.HttpResponseError`\n   - `azure.core.Configuration` is now only `azure.core.configuration.Configuration`\n   - `azure.core.HttpRequest` is now only `azure.core.pipeline.transport.HttpRequest`\n   - `azure.core.version` module has been removed. Use `azure.core.__version__` to get version number.\n   - `azure.core.pipeline_client` has been removed. Import from `azure.core` instead.\n   - `azure.core.pipeline_client_async` has been removed. Import from `azure.core` instead.\n   - `azure.core.pipeline.base` has been removed. Import from `azure.core.pipeline` instead.\n   - `azure.core.pipeline.base_async` has been removed. Import from `azure.core.pipeline` instead.\n   - `azure.core.pipeline.policies.base` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.base_async` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.authentication` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.authentication_async` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.custom_hook` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.redirect` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.redirect_async` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.retry` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.retry_async` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.distributed_tracing` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.pipeline.policies.universal` has been removed. Import from `azure.core.pipeline.policies` instead.\n   - `azure.core.tracing.abstract_span` has been removed. Import from `azure.core.tracing` instead.\n   - `azure.core.pipeline.transport.base` has been removed. Import from `azure.core.pipeline.transport` instead.\n   - `azure.core.pipeline.transport.base_async` has been removed. Import from `azure.core.pipeline.transport` instead.\n   - `azure.core.pipeline.transport.requests_basic` has been removed. Import from `azure.core.pipeline.transport` instead.\n   - `azure.core.pipeline.transport.requests_asyncio` has been removed. Import from `azure.core.pipeline.transport` instead.\n   - `azure.core.pipeline.transport.requests_trio` has been removed. Import from `azure.core.pipeline.transport` instead.\n   - `azure.core.pipeline.transport.aiohttp` has been removed. Import from `azure.core.pipeline.transport` instead.\n   - `azure.core.polling.poller` has been removed. Import from `azure.core.polling` instead.\n   - `azure.core.polling.async_poller` has been removed. Import from `azure.core.polling` instead.\n\n## 1.0.0b3 (2019-09-09)\n\n### Bug fixes\n\n-  Fix aiohttp auto-headers #6992\n-  Add tracing to policies module init  #6951\n\n## 1.0.0b2 (2019-08-05)\n\n### Breaking changes\n\n- Transport classes don't take `config` parameter anymore (use kwargs instead)  #6372\n- `azure.core.paging` has been completely refactored  #6420\n- HttpResponse.content_type attribute is now a string (was a list)  #6490\n- For `StreamDownloadGenerator` subclasses, `response` is now an `HttpResponse`, and not a transport response like `aiohttp.ClientResponse` or `requests.Response`. The transport response is available in `internal_response` attribute  #6490\n\n### Bug fixes\n\n- aiohttp is not required to import async pipelines classes #6496\n- `AsyncioRequestsTransport.sleep` is now a coroutine as expected #6490\n- `RequestsTransport` is not tight to `ProxyPolicy` implementation details anymore #6372\n- `AiohttpTransport` does not raise on unexpected kwargs  #6355\n\n### Features\n\n- New paging base classes that support `continuation_token` and `by_page()`  #6420\n- Proxy support for `AiohttpTransport`  #6372\n\n## 1.0.0b1 (2019-06-26)\n\n- Preview 1 release\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "azure",
          "azure sdk"
        ],
        "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core",
        "author": "Microsoft Corporation",
        "author_email": "azpysdkhelp@microsoft.com",
        "license": "MIT License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "License :: OSI Approved :: MIT License"
        ],
        "requires_dist": [
          "requests >=2.21.0",
          "six >=1.11.0",
          "typing-extensions >=4.6.0",
          "aiohttp >=3.0 ; extra == 'aio'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "aio"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/9a/30/067b9aba3cb146f4334afb737eb86c4f66e2b645fbca770377253550a9b3/azure_devops-7.1.0b4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f827e9fbc7c77bc6f2aaee46e5717514e9fe7d676c87624eccd0ca640b54f122",
          "hashes": {
            "sha256": "f827e9fbc7c77bc6f2aaee46e5717514e9fe7d676c87624eccd0ca640b54f122"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "azure-devops",
        "version": "7.1.0b4",
        "summary": "Python wrapper around the Azure DevOps 7.x APIs",
        "description": "Azure DevOps Python clients\r\n",
        "keywords": [
          "Microsoft",
          "VSTS",
          "Team Services",
          "SDK",
          "AzureTfs",
          "AzureDevOps",
          "DevOps"
        ],
        "home_page": "https://github.com/microsoft/azure-devops-python-api",
        "author": "Microsoft Corporation",
        "license": "MIT",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "License :: OSI Approved :: MIT License"
        ],
        "requires_dist": [
          "msrest <0.8.0,>=0.7.1"
        ],
        "requires_python": ">=3.7"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/57/13/39f82fcf5f98f5b0e2e586e72e83394bf166ccc187a2b60a0c54c7c3554a/azure_identity-1.16.0b1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=d9d5af5b1c78755c771c4dbe17af0dccc7db7521a8da641e667ce3845f38e83d",
          "hashes": {
            "sha256": "d9d5af5b1c78755c771c4dbe17af0dccc7db7521a8da641e667ce3845f38e83d"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "azure-identity",
        "version": "1.16.0b1",
        "summary": "Microsoft Azure Identity Library for Python",
        "description": "# Azure Identity client library for Python\n\nThe Azure Identity library provides [Microsoft Entra ID](https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis) ([formerly Azure Active Directory](https://learn.microsoft.com/azure/active-directory/fundamentals/new-name)) token authentication support across the Azure SDK. It provides a set of [`TokenCredential`](https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python) implementations, which can be used to construct Azure SDK clients that support Microsoft Entra token authentication.\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity)\n| [Package (PyPI)](https://pypi.org/project/azure-identity/)\n| [Package (Conda)](https://anaconda.org/microsoft/azure-identity/)\n| [API reference documentation][ref_docs]\n| [Microsoft Entra ID documentation](https://learn.microsoft.com/entra/identity/)\n\n## Getting started\n\n### Install the package\n\nInstall Azure Identity with pip:\n\n```sh\npip install azure-identity\n```\n\n### Prerequisites\n\n- An [Azure subscription](https://azure.microsoft.com/free/python)\n- Python 3.8 or a recent version of Python 3 (this library doesn't support end-of-life versions)\n\n### Authenticate during local development\n\nWhen debugging and executing code locally, it's typical for developers to use their own accounts for authenticating calls to Azure services. The Azure Identity library supports authenticating through developer tools to simplify local development.\n\n#### Authenticate via Visual Studio Code\n\nDevelopers using Visual Studio Code can use the [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) to authenticate via the editor. Apps using `DefaultAzureCredential` or `VisualStudioCodeCredential` can then use this account to authenticate calls in their app when running locally.\n\nTo authenticate in Visual Studio Code, ensure the Azure Account extension is installed. Once installed, open the **Command Palette** and run the **Azure: Sign In** command.\n\nIt's a [known issue](https://github.com/Azure/azure-sdk-for-python/issues/23249) that `VisualStudioCodeCredential` doesn't work with [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account) versions newer than **0.9.11**. A long-term fix to this problem is in progress. In the meantime, consider [authenticating via the Azure CLI](#authenticate-via-the-azure-cli).\n\n#### Authenticate via the Azure CLI\n\n`DefaultAzureCredential` and `AzureCliCredential` can authenticate as the user signed in to the [Azure CLI][azure_cli]. To sign in to the Azure CLI, run `az login`. On a system with a default web browser, the Azure CLI will launch the browser to authenticate a user.\n\nWhen no default browser is available, `az login` will use the device code authentication flow. This flow can also be selected manually by running `az login --use-device-code`.\n\n#### Authenticate via the Azure Developer CLI\n\nDevelopers coding outside of an IDE can also use the [Azure Developer CLI][azure_developer_cli] to authenticate. Applications using the `DefaultAzureCredential` or the `AzureDeveloperCliCredential` can then use this account to authenticate calls in their application when running locally.\n\nTo authenticate with the [Azure Developer CLI][azure_developer_cli], users can run the command `azd auth login`. For users running on a system with a default web browser, the Azure Developer CLI will launch the browser to authenticate the user.\n\nFor systems without a default web browser, the `azd auth login --use-device-code` command will use the device code authentication flow.\n\n## Key concepts\n\n### Credentials\n\nA credential is a class that contains or can obtain the data needed for a service client to authenticate requests. Service clients across the Azure SDK accept a credential instance when they're constructed, and use that credential to authenticate requests.\n\nThe Azure Identity library focuses on OAuth authentication with Microsoft Entra ID. It offers various credential classes capable of acquiring a Microsoft Entra access token. See the [Credential classes](#credential-classes \"Credential classes\") section below for a list of this library's credential classes.\n\n### DefaultAzureCredential\n\n`DefaultAzureCredential` is appropriate for most applications that will run in Azure because it combines common production credentials with development credentials. `DefaultAzureCredential` attempts to authenticate via the following mechanisms, in this order, stopping when one succeeds:\n\n>Note: `DefaultAzureCredential` is intended to simplify getting started with the library by handling common\n>scenarios with reasonable default behaviors. Developers who want more control or whose scenario\n>isn't served by the default settings should use other credential types.\n\n![DefaultAzureCredential authentication flow](https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/identity/azure-identity/images/mermaidjs/DefaultAzureCredentialAuthFlow.svg)\n\n1. **Environment** - `DefaultAzureCredential` will read account information specified via [environment variables](#environment-variables \"environment variables\") and use it to authenticate.\n1. **Workload Identity** - If the application is deployed to Azure Kubernetes Service with Managed Identity enabled, `DefaultAzureCredential` will authenticate with it.\n1. **Managed Identity** - If the application is deployed to an Azure host with Managed Identity enabled, `DefaultAzureCredential` will authenticate with it.\n1. **Azure CLI** - If a user has signed in via the Azure CLI `az login` command, `DefaultAzureCredential` will authenticate as that user.\n1. **Azure PowerShell** - If a user has signed in via Azure PowerShell's `Connect-AzAccount` command, `DefaultAzureCredential` will authenticate as that user.\n1. **Azure Developer CLI** - If the developer has authenticated via the Azure Developer CLI `azd auth login` command, the `DefaultAzureCredential` will authenticate with that account.\n1. **Interactive browser** - If enabled, `DefaultAzureCredential` will interactively authenticate a user via the default browser. This credential type is disabled by default.\n\n#### Continuation policy\n\nAs of version 1.14.0, `DefaultAzureCredential` will attempt to authenticate with all developer credentials until one succeeds, regardless of any errors previous developer credentials experienced. For example, a developer credential may attempt to get a token and fail, so `DefaultAzureCredential` will continue to the next credential in the flow. Deployed service credentials will stop the flow with a thrown exception if they're able to attempt token retrieval, but don't receive one. Prior to version 1.14.0, developer credentials would similarly stop the authentication flow if token retrieval failed, but this is no longer the case.\n\nThis allows for trying all of the developer credentials on your machine while having predictable deployed behavior.\n\n#### Note about `VisualStudioCodeCredential`\n\nDue to a [known issue](https://github.com/Azure/azure-sdk-for-python/issues/23249), `VisualStudioCodeCredential` has been removed from the `DefaultAzureCredential` token chain. When the issue is resolved in a future release, this change will be reverted.\n\n## Examples\n\nThe following examples are provided below:\n\n- [Authenticate with DefaultAzureCredential](#authenticate-with-defaultazurecredential \"Authenticate with DefaultAzureCredential\")\n- [Define a custom authentication flow with ChainedTokenCredential](#define-a-custom-authentication-flow-with-chainedtokencredential \"Define a custom authentication flow with ChainedTokenCredential\")\n- [Async credentials](#async-credentials \"Async credentials\")\n\n### Authenticate with `DefaultAzureCredential`\n\nMore details on configuring your environment to use the `DefaultAzureCredential` can be found in the class's [reference documentation][default_cred_ref].\n\nThis example demonstrates authenticating the `BlobServiceClient` from the [azure-storage-blob][azure_storage_blob] library using `DefaultAzureCredential`.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.storage.blob import BlobServiceClient\n\ndefault_credential = DefaultAzureCredential()\n\nclient = BlobServiceClient(account_url, credential=default_credential)\n```\n\n#### Enable interactive authentication with `DefaultAzureCredential`\n\nInteractive authentication is disabled in the `DefaultAzureCredential` by default and can be enabled with a keyword argument:\n\n```python\nDefaultAzureCredential(exclude_interactive_browser_credential=False)\n```\n\nWhen enabled, `DefaultAzureCredential` falls back to interactively authenticating via the system's default web browser when no other credential is available.\n\n#### Specify a user-assigned managed identity for `DefaultAzureCredential`\n\nMany Azure hosts allow the assignment of a user-assigned managed identity. To configure `DefaultAzureCredential` to authenticate a user-assigned identity, use the `managed_identity_client_id` keyword argument:\n\n```python\nDefaultAzureCredential(managed_identity_client_id=client_id)\n```\n\nAlternatively, set the environment variable `AZURE_CLIENT_ID` to the identity's client ID.\n\n### Define a custom authentication flow with `ChainedTokenCredential`\n\n`DefaultAzureCredential` is generally the quickest way to get started developing applications for Azure. For more advanced scenarios, [ChainedTokenCredential][chain_cred_ref] links multiple credential instances to be tried sequentially when authenticating. It will try each chained credential in turn until one provides a token or fails to authenticate due to an error.\n\nThe following example demonstrates creating a credential that will first attempt to authenticate using managed identity. The credential will fall back to authenticating via the Azure CLI when a managed identity is unavailable. This example uses the `EventHubProducerClient` from the [azure-eventhub][azure_eventhub] client library.\n\n```python\nfrom azure.eventhub import EventHubProducerClient\nfrom azure.identity import AzureCliCredential, ChainedTokenCredential, ManagedIdentityCredential\n\nmanaged_identity = ManagedIdentityCredential()\nazure_cli = AzureCliCredential()\ncredential_chain = ChainedTokenCredential(managed_identity, azure_cli)\n\nclient = EventHubProducerClient(namespace, eventhub_name, credential_chain)\n```\n\n### Async credentials\n\nThis library includes a set of async APIs. To use the async credentials in [azure.identity.aio][ref_docs_aio], you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/). For more information, see [azure-core documentation][azure_core_transport_doc].\n\nAsync credentials should be closed when they're no longer needed. Each async credential is an async context manager and defines an async `close` method. For example:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\n\n# call close when the credential is no longer needed\ncredential = DefaultAzureCredential()\n...\nawait credential.close()\n\n# alternatively, use the credential as an async context manager\ncredential = DefaultAzureCredential()\nasync with credential:\n  ...\n```\n\nThis example demonstrates authenticating the asynchronous `SecretClient` from [azure-keyvault-secrets][azure_keyvault_secrets] with an asynchronous\ncredential.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.secrets.aio import SecretClient\n\ndefault_credential = DefaultAzureCredential()\nclient = SecretClient(\"https://my-vault.vault.azure.net\", default_credential)\n```\n\n## Managed identity support\n\n[Managed identity authentication](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview) is supported via either the `DefaultAzureCredential` or the `ManagedIdentityCredential` directly for the following Azure services:\n\n- [Azure App Service and Azure Functions](https://learn.microsoft.com/azure/app-service/overview-managed-identity?tabs=python)\n- [Azure Arc](https://learn.microsoft.com/azure/azure-arc/servers/managed-identity-authentication)\n- [Azure Cloud Shell](https://learn.microsoft.com/azure/cloud-shell/msi-authorization)\n- [Azure Kubernetes Service](https://learn.microsoft.com/azure/aks/use-managed-identity)\n- [Azure Service Fabric](https://learn.microsoft.com/azure/service-fabric/concepts-managed-identity)\n- [Azure Virtual Machines](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token)\n- [Azure Virtual Machines Scale Sets](https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/qs-configure-powershell-windows-vmss)\n\n### Examples\n\n#### Authenticate with a user-assigned managed identity\n\n```python\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential(client_id=managed_identity_client_id)\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n#### Authenticate with a system-assigned managed identity\n\n```python\nfrom azure.identity import ManagedIdentityCredential\nfrom azure.keyvault.secrets import SecretClient\n\ncredential = ManagedIdentityCredential()\nclient = SecretClient(\"https://my-vault.vault.azure.net\", credential)\n```\n\n## Cloud configuration\n\nCredentials default to authenticating to the Microsoft Entra endpoint for Azure Public Cloud. To access resources in other clouds, such as Azure Government or a private cloud, configure credentials with the `authority` argument. [AzureAuthorityHosts](https://aka.ms/azsdk/python/identity/docs#azure.identity.AzureAuthorityHosts) defines authorities for well-known clouds:\n\n```python\nfrom azure.identity import AzureAuthorityHosts\n\nDefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_GOVERNMENT)\n```\n\nIf the authority for your cloud isn't listed in `AzureAuthorityHosts`, you can explicitly specify its URL:\n\n```python\nDefaultAzureCredential(authority=\"https://login.partner.microsoftonline.cn\")\n```\n\nAs an alternative to specifying the `authority` argument, you can also set the `AZURE_AUTHORITY_HOST` environment variable to the URL of your cloud's authority. This approach is useful when configuring multiple credentials to authenticate to the same cloud:\n\n```sh\nAZURE_AUTHORITY_HOST=https://login.partner.microsoftonline.cn\n```\n\nNot all credentials require this configuration. Credentials that authenticate through a development tool, such as `AzureCliCredential`, use that tool's configuration. Similarly, `VisualStudioCodeCredential` accepts an `authority` argument but defaults to the authority matching VS Code's \"Azure: Cloud\" setting.\n\n## Credential classes\n\n### Authenticate Azure-hosted applications\n\n|Credential|Usage\n|-|-\n|[`DefaultAzureCredential`][default_cred_ref]| Provides a simplified authentication experience to quickly start developing applications run in Azure.\n|[`ChainedTokenCredential`][chain_cred_ref]| Allows users to define custom authentication flows composing multiple credentials.\n|[`EnvironmentCredential`][environment_cred_ref]| Authenticates a service principal or user via credential information specified in environment variables.\n|[`ManagedIdentityCredential`][managed_id_cred_ref]| Authenticates the managed identity of an Azure resource.\n|[`WorkloadIdentityCredential`][workload_id_cred_ref]| Supports [Microsoft Entra Workload ID](https://learn.microsoft.com/azure/aks/workload-identity-overview) on Kubernetes.\n\n### Authenticate service principals\n\n|Credential|Usage|Reference\n|-|-|-\n|[`CertificateCredential`][cert_cred_ref]| Authenticates a service principal using a certificate. | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n|[`ClientAssertionCredential`][client_assertion_cred_ref]| Authenticates a service principal using a signed client assertion. |\n|[`ClientSecretCredential`][client_secret_cred_ref]| Authenticates a service principal using a secret. | [Service principal authentication](https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals)\n\n### Authenticate users\n\n|Credential|Usage| Reference | Notes\n|-|-|-|-\n|[`AuthorizationCodeCredential`][auth_code_cred_ref]| Authenticates a user with a previously obtained authorization code. | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)|\n|[`DeviceCodeCredential`][device_code_cred_ref]| Interactively authenticates a user on devices with limited UI. | [Device code authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-device-code)|\n|[`InteractiveBrowserCredential`][interactive_cred_ref]| Interactively authenticates a user with the default system browser. | [OAuth2 authentication code](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)| `InteractiveBrowserCredential` doesn't support GitHub Codespaces. As a workaround, use [`DeviceCodeCredential`][device_code_cred_ref].\n|[`OnBehalfOfCredential`][obo_cred_ref]| Propagates the delegated user identity and permissions through the request chain. | [On-behalf-of authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)|\n|[`UsernamePasswordCredential`][userpass_cred_ref]| Authenticates a user with a username and password (doesn't support multi-factor authentication). | [Username + password authentication](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth-ropc)|\n\n### Authenticate via development tools\n\n|Credential|Usage|Reference\n|-|-|-\n|[`AzureCliCredential`][cli_cred_ref]| Authenticates in a development environment with the Azure CLI. | [Azure CLI authentication](https://learn.microsoft.com/cli/azure/authenticate-azure-cli)\n|[`AzureDeveloperCliCredential`][azd_cli_cred_ref]| Authenticates in a development environment with the Azure Developer CLI. | [Azure Developer CLI Reference](https://learn.microsoft.com/azure/developer/azure-developer-cli/reference)\n|[`AzurePowerShellCredential`][powershell_cred_ref]| Authenticates in a development environment with the Azure PowerShell. | [Azure PowerShell authentication](https://learn.microsoft.com/powershell/azure/authenticate-azureps)\n|[`VisualStudioCodeCredential`][vscode_cred_ref]| Authenticates as the user signed in to the Visual Studio Code Azure Account extension. | [VS Code Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account)\n\n## Environment variables\n\n[DefaultAzureCredential][default_cred_ref] and [EnvironmentCredential][environment_cred_ref] can be configured with environment variables. Each type of authentication requires values for specific\nvariables:\n\n### Service principal with secret\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of a Microsoft Entra application\n|`AZURE_TENANT_ID`|ID of the application's Microsoft Entra tenant\n|`AZURE_CLIENT_SECRET`|one of the application's client secrets\n\n### Service principal with certificate\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of a Microsoft Entra application\n|`AZURE_TENANT_ID`|ID of the application's Microsoft Entra tenant\n|`AZURE_CLIENT_CERTIFICATE_PATH`|path to a PEM or PKCS12 certificate file including private key\n|`AZURE_CLIENT_CERTIFICATE_PASSWORD`|password of the certificate file, if any\n\n### Username and password\n\n|Variable name|Value\n|-|-\n|`AZURE_CLIENT_ID`|ID of a Microsoft Entra application\n|`AZURE_USERNAME`|a username (usually an email address)\n|`AZURE_PASSWORD`|that user's password\n\nConfiguration is attempted in the above order. For example, if values for a client secret and certificate are both present, the client secret will be used.\n\n## Continuous Access Evaluation\n\nAs of version 1.14.0, accessing resources protected by [Continuous Access Evaluation (CAE)][cae] is possible on a per-request basis. This behavior can be enabled by setting the `enable_cae` keyword argument to `True` in the credential's `get_token` method. CAE isn't supported for developer and managed identity credentials.\n\n## Token caching\n\nToken caching is a feature provided by the Azure Identity library that allows apps to:\n- Cache tokens in memory (default) or on disk (opt-in).\n- Improve resilience and performance.\n- Reduce the number of requests made to Microsoft Entra ID to obtain access tokens.\n\nThe Azure Identity library offers both in-memory and persistent disk caching. For more details, see the [token caching documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TOKEN_CACHING.md).\n\n## Brokered authentication\n\nAn authentication broker is an application that runs on a user’s machine and manages the authentication handshakes and token maintenance for connected accounts. Currently, only the Windows Web Account Manager (WAM) is supported. To enable support, use the [`azure-identity-broker`][azure_identity_broker] package. For details on authenticating using WAM, see the [broker plugin documentation][azure_identity_broker_readme].\n\n## Troubleshooting\n\nSee the [troubleshooting guide][troubleshooting_guide] for details on how to diagnose various failure scenarios.\n\n### Error handling\n\nCredentials raise `CredentialUnavailableError` when they're unable to attempt authentication because they lack required data or state. For example,\n[EnvironmentCredential][environment_cred_ref] will raise this exception when [its configuration](#environment-variables \"its configuration\") is incomplete.\n\nCredentials raise `azure.core.exceptions.ClientAuthenticationError` when they fail to authenticate. `ClientAuthenticationError` has a `message` attribute, which describes why authentication failed. When raised by `DefaultAzureCredential` or `ChainedTokenCredential`, the message collects error messages from each credential in the chain.\n\nFor more information on handling specific Microsoft Entra ID errors, see the Microsoft Entra ID [error code documentation](https://learn.microsoft.com/azure/active-directory/develop/reference-error-codes).\n\n### Logging\n\nThis library uses the standard [logging](https://docs.python.org/3/library/logging.html) library for logging. Credentials log basic information, including HTTP sessions (URLs, headers, etc.) at INFO level. These log entries don't contain authentication secrets.\n\nDetailed DEBUG level logging, including request/response bodies and header values, isn't enabled by default. It can be enabled with the `logging_enable` argument. For example:\n\n```python\ncredential = DefaultAzureCredential(logging_enable=True)\n```\n\n> CAUTION: DEBUG level logs from credentials contain sensitive information.\n> These logs must be protected to avoid compromising account security.\n\n## Next steps\n\n### Client library support\n\nClient and management libraries listed on the [Azure SDK release page](https://azure.github.io/azure-sdk/releases/latest/python.html) that support Microsoft Entra authentication accept credentials from this library. You can learn more about using these libraries in their documentation, which is linked from the release page.\n\n### Known issues\n\nThis library doesn't support [Azure AD B2C][b2c].\n\nFor other open issues, refer to the library's [GitHub repository](https://github.com/Azure/azure-sdk-for-python/issues?q=is%3Aopen+is%3Aissue+label%3AAzure.Identity).\n\n### Provide feedback\n\nIf you encounter bugs or have suggestions, [open an issue](https://github.com/Azure/azure-sdk-for-python/issues).\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [https://cla.microsoft.com](https://cla.microsoft.com).\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You'll only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information, see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n[auth_code_cred_ref]: https://aka.ms/azsdk/python/identity/authorizationcodecredential\n[azd_cli_cred_ref]: https://aka.ms/azsdk/python/identity/azuredeveloperclicredential\n[azure_cli]: https://learn.microsoft.com/cli/azure\n[azure_developer_cli]:https://aka.ms/azure-dev\n[azure_core_transport_doc]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport\n[azure_identity_broker]: https://pypi.org/project/azure-identity-broker\n[azure_identity_broker_readme]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity-broker\n[azure_eventhub]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/eventhub/azure-eventhub\n[azure_keyvault_secrets]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/keyvault/azure-keyvault-secrets\n[azure_storage_blob]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/storage/azure-storage-blob\n[b2c]: https://learn.microsoft.com/azure/active-directory-b2c/overview\n[cae]: https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation\n[cert_cred_ref]: https://aka.ms/azsdk/python/identity/certificatecredential\n[chain_cred_ref]: https://aka.ms/azsdk/python/identity/chainedtokencredential\n[cli_cred_ref]: https://aka.ms/azsdk/python/identity/azclicredential\n[client_assertion_cred_ref]: https://aka.ms/azsdk/python/identity/clientassertioncredential\n[client_secret_cred_ref]: https://aka.ms/azsdk/python/identity/clientsecretcredential\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/defaultazurecredential\n[device_code_cred_ref]: https://aka.ms/azsdk/python/identity/devicecodecredential\n[environment_cred_ref]: https://aka.ms/azsdk/python/identity/environmentcredential\n[interactive_cred_ref]: https://aka.ms/azsdk/python/identity/interactivebrowsercredential\n[managed_id_cred_ref]: https://aka.ms/azsdk/python/identity/managedidentitycredential\n[obo_cred_ref]: https://aka.ms/azsdk/python/identity/onbehalfofcredential\n[powershell_cred_ref]: https://aka.ms/azsdk/python/identity/powershellcredential\n[ref_docs]: https://aka.ms/azsdk/python/identity/docs\n[ref_docs_aio]: https://aka.ms/azsdk/python/identity/aio/docs\n[troubleshooting_guide]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/TROUBLESHOOTING.md\n[userpass_cred_ref]: https://aka.ms/azsdk/python/identity/usernamepasswordcredential\n[vscode_cred_ref]: https://aka.ms/azsdk/python/identity/vscodecredential\n[workload_id_cred_ref]: https://aka.ms/azsdk/python/identity/workloadidentitycredential\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fidentity%2Fazure-identity%2FREADME.png)\n\n\n# Release History\n\n## 1.16.0b1 (2024-02-06)\n\n### Bugs Fixed\n\n- Fixed the bug that `ClientAssertionCredential` constructor fails if kwargs are provided. ([#33673](https://github.com/Azure/azure-sdk-for-python/issues/33673))\n- `ManagedIdentityCredential` is more lenient with the error message it matches when falling through to the next credential in the chain in the case that Docker Desktop returns a 403 response when attempting to access the IMDS endpoint. ([#33928](https://github.com/Azure/azure-sdk-for-python/pull/33928))\n\n### Other Changes\n\n- `AzureCliCredential` utilizes the new `expires_on` property returned by `az` CLI versions >= 2.54.0 to determine token expiration. ([#33947](https://github.com/Azure/azure-sdk-for-python/issues/33947))\n- Azure-identity is supported on Python 3.8 or later.\n\n## 1.15.0 (2023-10-26)\n\n### Features Added\n\n- Added bearer token provider.  ([#32655](https://github.com/Azure/azure-sdk-for-python/pull/32655))\n\n### Bugs Fixed\n\n- Fixed issue InteractiveBrowserCredential does not hand over to next credential in chain if no browser is supported.([#32276](https://github.com/Azure/azure-sdk-for-python/pull/32276))\n\n## 1.15.0b2 (2023-10-12)\n\n### Features Added\n\n- Added `enable_support_logging` as a keyword argument to credentials using MSAL's `PublicClientApplication`. This allows additional support logging which may contain PII. ([#32135](https://github.com/Azure/azure-sdk-for-python/pull/32135))\n\n### Breaking Changes\n\n> These changes do not impact the API of stable versions such as 1.14.0.\n> Only code written against a beta version such as 1.15.0b1 may be affected.\n- Windows Web Account Manager (WAM) Brokered Authentication is moved into another package.\n\n### Bugs Fixed\n\n- `ManagedIdentityCredential` will now correctly retry when the instance metadata endpoint returns a 410 response.  ([#32200](https://github.com/Azure/azure-sdk-for-python/pull/32200))\n\n## 1.14.1 (2023-10-09)\n\n### Bugs Fixed\n\n- Bug fixes for developer credentials\n\n## 1.15.0b1 (2023-09-12)\n\n### Features Added\n\n- Added Windows Web Account Manager (WAM) Brokered Authentication support.\n- Added `enable_msa_passthrough` suppport for `InteractiveBrowserCredential`. By default `InteractiveBrowserCredential` only lists Microsoft Entra accounts. If you set `enable_msa_passthrough` to `True`, it lists both Microsoft Entra accounts and MSA outlook.com accounts that are logged in to Windows.\n\n### Bugs Fixed\n\n- Ensure `AzurePowershellCredential` calls PowerShell with the `-NoProfile` flag to avoid loading user profiles for more consistent behavior.  ([#31682](https://github.com/Azure/azure-sdk-for-python/pull/31682))\n- Fixed an issue with subprocess-based developer credentials (such as AzureCliCredential) where the process would sometimes hang waiting for user input.  ([#31534](https://github.com/Azure/azure-sdk-for-python/pull/31534))\n- Fixed an issue with `ClientAssertionCredential` not properly checking if CAE should be enabled.  ([#31544](https://github.com/Azure/azure-sdk-for-python/pull/31544))\n- `ManagedIdentityCredential` will fall through to the next credential in the chain in the case that Docker Desktop returns a 403 response when attempting to access the IMDS endpoint.  ([#31824](https://github.com/Azure/azure-sdk-for-python/pull/31824))\n\n### Other Changes\n\n- Update typing of async credentials to match the `AsyncTokenCredential` protocol.\n- If within `DefaultAzureCredential`, `EnvironmentCredential` will now use log level INFO instead of WARNING to inform users of an incomplete environment configuration.  ([#31814](https://github.com/Azure/azure-sdk-for-python/pull/31814))\n- Strengthened `AzureCliCredential` and `AzureDeveloperCliCredential` error checking when determining if a user is logged in or not. Now, if an `AADSTS` error exists in the error, the full error message is propagated instead of a canned error message. ([#30047](https://github.com/Azure/azure-sdk-for-python/pull/30047))\n- `ManagedIdentityCredential` instances using IMDS will now be allowed to continue sending requests to the IMDS endpoint even after previous attempts failed. This is to prevent credential instances from potentially being permanently disabled after a temporary network failure.\n- IMDS endpoint probes in `ManagedIdentityCredential` will now only occur when inside a credential chain such as `DefaultAzureCredential`. This probe request timeout has been increased to 1 second from 0.3 seconds to reduce the likelihood of false negatives.\n\n## 1.14.0 (2023-08-08)\n\n### Features Added\n\n- Continuous Access Evaluation (CAE) is now configurable per-request by setting the `enable_cae` keyword argument to `True` in `get_token`. This applies to user credentials and service principal credentials.  ([#30777](https://github.com/Azure/azure-sdk-for-python/pull/30777))\n\n### Breaking Changes\n\n- CP1 client capabilities for CAE is no longer always-on by default for user credentials. This capability will now be configured as-needed in each `get_token` request by each SDK.  ([#30777](https://github.com/Azure/azure-sdk-for-python/pull/30777))\n  - Suffixes are now appended to persistent cache names to indicate whether CAE or non-CAE tokens are stored in the cache. This is to prevent CAE and non-CAE tokens from being mixed/overwritten in the same cache. This could potentially cause issues if you are trying to share the same cache between applications that are using different versions of the Azure Identity library as each application would be reading from a different cache file.\n  - Since CAE is no longer always enabled for user-credentials, the `AZURE_IDENTITY_DISABLE_CP1` environment variable is no longer supported.\n\n### Bugs Fixed\n\n- Credential types correctly implement `azure-core`'s `TokenCredential` protocol.  ([#25175](https://github.com/Azure/azure-sdk-for-python/issues/25175))\n\n## 1.14.0b2 (2023-07-11)\n\n### Features Added\n\n- Added `workload_identity_tenant_id` support in `DefaultAzureCredential`.\n\n## 1.14.0b1 (2023-06-06)\n\n### Features Added\n\n- Continue attempt next credential when finding an expired token from cached token credential in DefaultAzureCredential. ([#30441](https://github.com/Azure/azure-sdk-for-python/pull/30441))\n\n### Other Changes\n\n- VisualStudioCodeCredential prints an informative error message when used (as it is currently broken) ([#30385](https://github.com/Azure/azure-sdk-for-python/pull/30385))\n- Removed dependency on `six`. ([#30613](https://github.com/Azure/azure-sdk-for-python/pull/30613))\n\n## 1.13.0 (2023-05-11)\n\n### Breaking Changes\n\n> These changes do not impact the API of stable versions such as 1.12.0.\n> Only code written against a beta version such as 1.13.0b4 may be affected.\n- Windows Web Account Manager (WAM) Brokered Authentication is still in preview and not available in this release. It will be available in the next beta release.\n- Additional Continuous Access Evaluation (CAE) support for service principal credentials is still in preview and not available in this release. It will be available in the next beta release.\n- Renamed keyword argument `developer_credential_timeout` to `process_timeout` in `DefaultAzureCredential` to remain consistent with the other credentials that launch a subprocess to acquire tokens.\n\n## 1.13.0b4 (2023-04-11)\n\n### Features Added\n\n- Credentials that are implemented via launching a subprocess to acquire tokens now have configurable timeouts using the `process_timeout` keyword argument. This addresses scenarios where these proceses can take longer than the current default timeout values. The affected credentials are `AzureCliCredential`, `AzureDeveloperCliCredential`, and `AzurePowerShellCredential`. (Note: For `DefaultAzureCredential`, the `developer_credential_timeout` keyword argument allows users to propagate this option to `AzureCliCredential`, `AzureDeveloperCliCredential`, and `AzurePowerShellCredential` in the authentication chain.) ([#28290](https://github.com/Azure/azure-sdk-for-python/pull/28290))\n\n## 1.13.0b3 (2023-03-07)\n\n### Features Added\n\n- Changed parameter from `instance_discovery` to `disable_instance_discovery` to make it more explicit.\n- Service principal credentials now enable support for [Continuous Access Evaluation (CAE)](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation-workload). This indicates to Microsoft Entra ID that your application can handle CAE claims challenges.\n\n## 1.13.0b2 (2023-02-07)\n\n### Features Added\n\n- Added `AzureDeveloperCredential` for Azure Developer CLI. ([#27916](https://github.com/Azure/azure-sdk-for-python/pull/27916))\n- Added `WorkloadIdentityCredential` for Workload Identity Federation on Kubernetes ([#28536](https://github.com/Azure/azure-sdk-for-python/pull/28536))\n- Added support to use \"TryAutoDetect\" as the value for `AZURE_REGIONAL_AUTHORITY_NAME` to enable auto detecting the appropriate authority ([#526](https://github.com/AzureAD/microsoft-authentication-library-for-python/issues/526))\n\n## 1.13.0b1 (2023-01-10)\n\n### Features Added\n\n- Added Windows Web Account Manager (WAM) Brokered Authentication support. ([#23687](https://github.com/Azure/azure-sdk-for-python/issues/23687))\n\n### Breaking Changes\n\n> These changes do not impact the API of stable versions such as 1.12.0.\n> Only code written against a beta version such as 1.12.0b1 may be affected.\n- Replaced `validate_authority` with `instance_discovery`. Now instead of setting validate_authority=False to disable authority validation and instance discovery, you need to use instance_discovery=False.\n\n### Bugs Fixed\n\n- Fixed an issue where `AzureCliCredential` would return the wrong error message when the Azure CLI was not installed on non-English consoles. ([#27965](https://github.com/Azure/azure-sdk-for-python/issues/27965))\n\n## 1.12.0 (2022-11-08)\n\n### Bugs Fixed\n\n- `AzureCliCredential` now works even when `az` prints warnings to stderr. ([#26857](https://github.com/Azure/azure-sdk-for-python/issues/26857)) (thanks to @micromaomao for the contribution)\n- Fixed issue where user-supplied `TokenCachePersistenceOptions` weren't propagated when using `SharedTokenCacheCredential` ([#26982](https://github.com/Azure/azure-sdk-for-python/issues/26982))\n\n### Breaking Changes\n\n- Excluded `VisualStudioCodeCredential` from `DefaultAzureCredential` token chain by default as SDK\n  authentication via Visual Studio Code is broken due to\n  issue [#23249](https://github.com/Azure/azure-sdk-for-python/issues/23249). The `VisualStudioCodeCredential` will be\n  re-enabled in the `DefaultAzureCredential` flow once a fix is in place.\n  Issue [#25713](https://github.com/Azure/azure-sdk-for-python/issues/25713) tracks this. In the meantime\n  Visual Studio Code users can authenticate their development environment using the [Azure CLI](https://learn.microsoft.com/cli/azure/).\n\n### Other Changes\n\n- Added Python 3.11 support and stopped supporting Python 3.6.\n\n## 1.12.0b2 (2022-10-11)\n\n1.12.0 release candidate\n\n## 1.12.0b1 (2022-09-22)\n\n### Features Added\n\n- Added ability to specify `tenant_id` for `AzureCliCredential` & `AzurePowerShellCredential` (thanks @tikicoder)    ([#25207](https://github.com/Azure/azure-sdk-for-python/pull/25207))\n- Removed `VisualStudioCodeCredential` from `DefaultAzureCredential` token chain. ([#23249](https://github.com/Azure/azure-sdk-for-python/issues/23249))\n- `EnvironmentCredential` added `AZURE_CLIENT_CERTIFICATE_PASSWORD` support for the cert password    ([#24652](https://github.com/Azure/azure-sdk-for-python/issues/24652))\n- Added `validate_authority` support for msal client  ([#22625](https://github.com/Azure/azure-sdk-for-python/issues/22625))\n\n## 1.11.0 (2022-09-19)\n\n### Features Added\n\n- Added `additionally_allowed_tenants` to the following credential options to force explicit opt-in behavior for multi-tenant authentication:\n  - `AuthorizationCodeCredential`\n  - `AzureCliCredential`\n  - `AzurePowerShellCredential`\n  - `CertificateCredential`\n  - `ClientAssertionCredential`\n  - `ClientSecretCredential`\n  - `DefaultAzureCredential`\n  - `OnBehalfOfCredential`\n  - `UsernamePasswordCredential`\n  - `VisualStudioCodeCredential`\n\n### Breaking Changes\n\n- Credential types supporting multi-tenant authentication will now throw `ClientAuthenticationError` if the requested tenant ID doesn't match the credential's tenant ID, and is not included in `additionally_allowed_tenants`. Applications must now explicitly add additional tenants to the `additionally_allowed_tenants` list, or add '*' to list, to enable acquiring tokens from tenants other than the originally specified tenant ID.\n\nMore information on this change and the consideration behind it can be found [here](https://aka.ms/azsdk/blog/multi-tenant-guidance).\n\n- These beta features in 1.11.0b3 have been removed from this release and will be added back in 1.12.0b1\n  - `tenant_id` for `AzureCliCredential`\n  - removed `VisualStudioCodeCredential` from `DefaultAzureCredential` token chain\n  - `AZURE_CLIENT_CERTIFICATE_PASSWORD` support for `EnvironmentCredential`\n  - `validate_authority` support\n\n## 1.11.0b3 (2022-08-09)\n\nAzure-identity is supported on Python 3.7 or later. For more details, please read our page on [Azure SDK for Python version support policy](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-Python-version-support-policy).\n\n### Features Added\n\n- Added ability to specify `tenant_id` for `AzureCliCredential` (thanks @tikicoder)    ([#25207](https://github.com/Azure/azure-sdk-for-python/pull/25207))\n\n### Breaking Changes\n\n- Removed `VisualStudioCodeCredential` from `DefaultAzureCredential` token chain. ([#23249](https://github.com/Azure/azure-sdk-for-python/issues/23249))\n\n## 1.11.0b2 (2022-07-05)\n\n### Features Added\n\n- `EnvironmentCredential` added `AZURE_CLIENT_CERTIFICATE_PASSWORD` support for the cert password    ([#24652](https://github.com/Azure/azure-sdk-for-python/issues/24652))\n\n### Bugs Fixed\n\n- Fixed the issue that failed to parse PEM certificate if it does not start with \"-----\"    ([#24643](https://github.com/Azure/azure-sdk-for-python/issues/24643))\n\n## 1.11.0b1 (2022-05-10)\n\n### Features Added\n\n- Added `validate_authority` support for msal client  ([#22625](https://github.com/Azure/azure-sdk-for-python/issues/22625))\n\n## 1.10.0 (2022-04-28)\n\n### Breaking Changes\n\n> These changes do not impact the API of stable versions such as 1.9.0.\n> Only code written against a beta version such as 1.10.0b1 may be affected.\n- `validate_authority` support is not available in 1.10.0.\n\n### Other Changes\n\n- Supported msal-extensions version 1.0.0    ([#23927](https://github.com/Azure/azure-sdk-for-python/issues/23927))\n\n## 1.10.0b1 (2022-04-07)\n\n### Features Added\n\n- Added `validate_authority` support for msal client  ([#22625](https://github.com/Azure/azure-sdk-for-python/issues/22625))\n\n## 1.9.0 (2022-04-05)\n\n### Features Added\n\n- Added PII logging if logging.DEBUG is enabled.    ([#23203](https://github.com/Azure/azure-sdk-for-python/issues/23203))\n\n### Breaking Changes\n\n> These changes do not impact the API of stable versions such as 1.8.0.\n> Only code written against a beta version such as 1.9.0b1 may be affected.\n- `validate_authority` support is not available in 1.9.0.\n\n### Bugs Fixed\n\n- Added check on `content` from msal response.    ([#23483](https://github.com/Azure/azure-sdk-for-python/issues/23483))\n- Fixed the issue that async OBO credential does not refresh correctly.    ([#21981](https://github.com/Azure/azure-sdk-for-python/issues/21981))\n\n### Other Changes\n\n- Removed `resource_id`, please use `identity_config` instead.\n- Renamed argument name `get_assertion` to `func` for `ClientAssertionCredential`.\n\n## 1.9.0b1 (2022-03-08)\n\n### Features Added\n\n- Added `validate_authority` support for msal client  ([#22625](https://github.com/Azure/azure-sdk-for-python/issues/22625))\n- Added `resource_id` support for user-assigned managed identity  ([#22329](https://github.com/Azure/azure-sdk-for-python/issues/22329))\n- Added `ClientAssertionCredential` support  ([#22328](https://github.com/Azure/azure-sdk-for-python/issues/22328))\n- Updated App service API version to \"2019-08-01\" ([#23034](https://github.com/Azure/azure-sdk-for-python/issues/23034))\n\n## 1.8.0 (2022-03-01)\n\n### Bugs Fixed\n\n- Handle injected \"tenant_id\" and \"claims\" ([#23138](https://github.com/Azure/azure-sdk-for-python/issues/23138))\n\n  \"tenant_id\" argument in get_token() method is only supported by:\n\n  - `AuthorizationCodeCredential`\n  - `AzureCliCredential`\n  - `AzurePowerShellCredential`\n  - `InteractiveBrowserCredential`\n  - `DeviceCodeCredential`\n  - `EnvironmentCredential`\n  - `UsernamePasswordCredential`\n\n   it is ignored by other types of credentials.\n\n### Other Changes\n\n- Python 2.7 is no longer supported. Please use Python version 3.6 or later.\n\n## 1.7.1 (2021-11-09)\n\n### Bugs Fixed\n\n- Fix multi-tenant auth using async AadClient ([#21289](https://github.com/Azure/azure-sdk-for-python/issues/21289))\n\n## 1.7.0 (2021-10-14)\n\n### Breaking Changes\n> These changes do not impact the API of stable versions such as 1.6.0.\n> Only code written against a beta version such as 1.7.0b1 may be affected.\n\n- The `allow_multitenant_authentication` argument has been removed and the default behavior is now as if it were true.\n  The multitenant authentication feature can be totally disabled by setting the environment variable\n  `AZURE_IDENTITY_DISABLE_MULTITENANTAUTH` to `True`.\n- `azure.identity.RegionalAuthority` is removed.\n- `regional_authority` argument is removed for `CertificateCredential` and `ClientSecretCredential`.\n- `AzureApplicationCredential` is removed.\n- `client_credential` in the ctor of `OnBehalfOfCredential` is removed. Please use `client_secret` or `client_certificate` instead.\n- Make `user_assertion` in the ctor of `OnBehalfOfCredential` a keyword only argument.\n\n## 1.7.0b4 (2021-09-09)\n\n### Features Added\n- `CertificateCredential` accepts certificates in PKCS12 format\n  ([#13540](https://github.com/Azure/azure-sdk-for-python/issues/13540))\n- `OnBehalfOfCredential` supports the on-behalf-of authentication flow for\n  accessing resources on behalf of users\n  ([#19308](https://github.com/Azure/azure-sdk-for-python/issues/19308))\n- `DefaultAzureCredential` allows specifying the client ID of interactive browser via keyword argument `interactive_browser_client_id`\n  ([#20487](https://github.com/Azure/azure-sdk-for-python/issues/20487))\n\n### Other Changes\n- Added context manager methods and `close()` to credentials in the\n  `azure.identity` namespace. At the end of a `with` block, or when `close()`\n  is called, these credentials close their underlying transport sessions.\n  ([#18798](https://github.com/Azure/azure-sdk-for-python/issues/18798))\n\n\n## 1.6.1 (2021-08-19)\n\n### Other Changes\n- Persistent cache implementations are now loaded on demand, enabling\n  workarounds when importing transitive dependencies such as pywin32\n  fails\n  ([#19989](https://github.com/Azure/azure-sdk-for-python/issues/19989))\n\n\n## 1.7.0b3 (2021-08-10)\n\n### Breaking Changes\n> These changes do not impact the API of stable versions such as 1.6.0.\n> Only code written against a beta version such as 1.7.0b1 may be affected.\n- Renamed `AZURE_POD_IDENTITY_TOKEN_URL` to `AZURE_POD_IDENTITY_AUTHORITY_HOST`.\n  The value should now be a host, for example \"http://169.254.169.254\" (the\n  default).\n\n### Bugs Fixed\n- Fixed import of `azure.identity.aio.AzureApplicationCredential`\n  ([#19943](https://github.com/Azure/azure-sdk-for-python/issues/19943))\n\n### Other Changes\n- Added `CustomHookPolicy` to credential HTTP pipelines. This allows applications\n  to initialize credentials with `raw_request_hook` and `raw_response_hook`\n  keyword arguments. The value of these arguments should be a callback taking a\n  `PipelineRequest` and `PipelineResponse`, respectively. For example:\n  `ManagedIdentityCredential(raw_request_hook=lambda request: print(request.http_request.url))`\n- Reduced redundant `ChainedTokenCredential` and `DefaultAzureCredential`\n  logging. On Python 3.7+, credentials invoked by these classes now log debug\n  rather than info messages.\n  ([#18972](https://github.com/Azure/azure-sdk-for-python/issues/18972))\n- Persistent cache implementations are now loaded on demand, enabling\n  workarounds when importing transitive dependencies such as pywin32\n  fails\n  ([#19989](https://github.com/Azure/azure-sdk-for-python/issues/19989))\n\n\n## 1.7.0b2 (2021-07-08)\n### Features Added\n- `InteractiveBrowserCredential` keyword argument `login_hint` enables\n  pre-filling the username/email address field on the login page\n  ([#19225](https://github.com/Azure/azure-sdk-for-python/issues/19225))\n- `AzureApplicationCredential`, a default credential chain for applications\n  deployed to Azure\n  ([#19309](https://github.com/Azure/azure-sdk-for-python/issues/19309))\n\n### Bugs Fixed\n- `azure.identity.aio.ManagedIdentityCredential` is an async context manager\n  that closes its underlying transport session at the end of a `with` block\n\n### Other Changes\n- Most credentials can use tenant ID values returned from authentication\n  challenges, enabling them to request tokens from the correct tenant. This\n  behavior is optional and controlled by a new keyword argument,\n  `allow_multitenant_authentication`.\n  ([#19300](https://github.com/Azure/azure-sdk-for-python/issues/19300))\n  - When `allow_multitenant_authentication` is False, which is the default, a\n    credential will raise `ClientAuthenticationError` when its configured tenant\n    doesn't match the tenant specified for a token request. This may be a\n    different exception than was raised by prior versions of the credential. To\n    maintain the prior behavior, set environment variable\n    AZURE_IDENTITY_ENABLE_LEGACY_TENANT_SELECTION to \"True\".\n- `CertificateCredential` and `ClientSecretCredential` support regional STS\n  on Azure VMs by either keyword argument `regional_authority` or environment\n  variable `AZURE_REGIONAL_AUTHORITY_NAME`. See `azure.identity.RegionalAuthority`\n  for possible values.\n  ([#19301](https://github.com/Azure/azure-sdk-for-python/issues/19301))\n- Upgraded minimum `azure-core` version to 1.11.0 and minimum `msal` version to\n  1.12.0\n- After IMDS authentication fails, `ManagedIdentityCredential` raises consistent\n  error messages and uses `raise from` to propagate inner exceptions\n  ([#19423](https://github.com/Azure/azure-sdk-for-python/pull/19423))\n\n## 1.7.0b1 (2021-06-08)\nBeginning with this release, this library requires Python 2.7 or 3.6+.\n\n### Added\n- `VisualStudioCodeCredential` gets its default tenant and authority\n  configuration from VS Code user settings\n  ([#14808](https://github.com/Azure/azure-sdk-for-python/issues/14808))\n\n## 1.6.0 (2021-05-13)\nThis is the last version to support Python 3.5. The next version will require\nPython 2.7 or 3.6+.\n\n### Added\n- `AzurePowerShellCredential` authenticates as the identity logged in to Azure\n  PowerShell. This credential is part of `DefaultAzureCredential` by default\n  but can be disabled by a keyword argument:\n  `DefaultAzureCredential(exclude_powershell_credential=True)`\n  ([#17341](https://github.com/Azure/azure-sdk-for-python/issues/17341))\n\n### Fixed\n- `AzureCliCredential` raises `CredentialUnavailableError` when the CLI times out,\n  and kills timed out subprocesses\n- Reduced retry delay for `ManagedIdentityCredential` on Azure VMs\n\n## 1.6.0b3 (2021-04-06)\n### Breaking Changes\n> These changes do not impact the API of stable versions such as 1.5.0.\n> Only code written against a beta version such as 1.6.0b1 may be affected.\n- Removed property `AuthenticationRequiredError.error_details`\n\n### Fixed\n- Credentials consistently retry token requests after connection failures, or\n  when instructed to by a Retry-After header\n- ManagedIdentityCredential caches tokens correctly\n\n### Added\n- `InteractiveBrowserCredential` functions in more WSL environments\n  ([#17615](https://github.com/Azure/azure-sdk-for-python/issues/17615))\n\n## 1.6.0b2 (2021-03-09)\n### Breaking Changes\n> These changes do not impact the API of stable versions such as 1.5.0.\n> Only code written against a beta version such as 1.6.0b1 may be affected.\n- Renamed `CertificateCredential` keyword argument `certificate_bytes` to\n  `certificate_data`\n- Credentials accepting keyword arguments `allow_unencrypted_cache` and\n  `enable_persistent_cache` to configure persistent caching accept a\n  `cache_persistence_options` argument instead whose value should be an\n  instance of `TokenCachePersistenceOptions`. For example:\n  ```\n  # before (e.g. in 1.6.0b1):\n  DeviceCodeCredential(enable_persistent_cache=True, allow_unencrypted_cache=True)\n\n  # after:\n  cache_options = TokenCachePersistenceOptions(allow_unencrypted_storage=True)\n  DeviceCodeCredential(cache_persistence_options=cache_options)\n  ```\n\n  See the documentation and samples for more details.\n\n### Added\n- New class `TokenCachePersistenceOptions` configures persistent caching\n- The `AuthenticationRequiredError.claims` property provides any additional\n  claims required by a user credential's `authenticate()` method\n\n## 1.6.0b1 (2021-02-09)\n### Changed\n- Raised minimum msal version to 1.7.0\n- Raised minimum six version to 1.12.0\n\n### Added\n- `InteractiveBrowserCredential` uses PKCE internally to protect authorization\n  codes\n- `CertificateCredential` can load a certificate from bytes instead of a file\n  path. To provide a certificate as bytes, use the keyword argument\n  `certificate_bytes` instead of `certificate_path`, for example:\n  `CertificateCredential(tenant_id, client_id, certificate_bytes=cert_bytes)`\n  ([#14055](https://github.com/Azure/azure-sdk-for-python/issues/14055))\n- User credentials support Continuous Access Evaluation (CAE)\n- Application authentication APIs from 1.5.0b2\n\n### Fixed\n- `ManagedIdentityCredential` correctly parses responses from the current\n  (preview) version of Azure ML managed identity\n  ([#15361](https://github.com/Azure/azure-sdk-for-python/issues/15361))\n\n## 1.5.0 (2020-11-11)\n### Breaking Changes\n- Renamed optional `CertificateCredential` keyword argument `send_certificate`\n  (added in 1.5.0b1) to `send_certificate_chain`\n- Removed user authentication APIs added in prior betas. These will be\n  reintroduced in 1.6.0b1. Passing the keyword arguments below\n  generally won't cause a runtime error, but the arguments have no effect.\n  ([#14601](https://github.com/Azure/azure-sdk-for-python/issues/14601))\n  - Removed `authenticate` method from `DeviceCodeCredential`,\n    `InteractiveBrowserCredential`, and `UsernamePasswordCredential`\n  - Removed `allow_unencrypted_cache` and `enable_persistent_cache` keyword\n    arguments from `CertificateCredential`, `ClientSecretCredential`,\n    `DeviceCodeCredential`, `InteractiveBrowserCredential`, and\n    `UsernamePasswordCredential`\n  - Removed `disable_automatic_authentication` keyword argument from\n    `DeviceCodeCredential` and `InteractiveBrowserCredential`\n  - Removed `allow_unencrypted_cache` keyword argument from\n    `SharedTokenCacheCredential`\n  - Removed classes `AuthenticationRecord` and `AuthenticationRequiredError`\n- Removed `identity_config` keyword argument from `ManagedIdentityCredential`\n  (was added in 1.5.0b1)\n\n### Changed\n- `DeviceCodeCredential` parameter `client_id` is now optional. When not\n   provided, the credential will authenticate users to an Azure development\n   application.\n   ([#14354](https://github.com/Azure/azure-sdk-for-python/issues/14354))\n- Credentials raise `ValueError` when constructed with tenant IDs containing\n  invalid characters\n  ([#14821](https://github.com/Azure/azure-sdk-for-python/issues/14821))\n- Raised minimum msal version to 1.6.0\n\n### Added\n- `ManagedIdentityCredential` supports Service Fabric\n  ([#12705](https://github.com/Azure/azure-sdk-for-python/issues/12705))\n  and Azure Arc\n  ([#12702](https://github.com/Azure/azure-sdk-for-python/issues/12702))\n\n### Fixed\n- Prevent `VisualStudioCodeCredential` using invalid authentication data when\n  no user is signed in to Visual Studio Code\n  ([#14438](https://github.com/Azure/azure-sdk-for-python/issues/14438))\n- `ManagedIdentityCredential` uses the API version supported by Azure Functions\n  on Linux consumption hosting plans\n  ([#14670](https://github.com/Azure/azure-sdk-for-python/issues/14670))\n- `InteractiveBrowserCredential.get_token()` raises a clearer error message when\n  it times out waiting for a user to authenticate on Python 2.7\n  ([#14773](https://github.com/Azure/azure-sdk-for-python/pull/14773))\n\n## 1.5.0b2 (2020-10-07)\n### Fixed\n- `AzureCliCredential.get_token` correctly sets token expiration time,\n  preventing clients from using expired tokens\n  ([#14345](https://github.com/Azure/azure-sdk-for-python/issues/14345))\n\n### Changed\n- Adopted msal-extensions 0.3.0\n([#13107](https://github.com/Azure/azure-sdk-for-python/issues/13107))\n\n## 1.4.1 (2020-10-07)\n### Fixed\n- `AzureCliCredential.get_token` correctly sets token expiration time,\n  preventing clients from using expired tokens\n  ([#14345](https://github.com/Azure/azure-sdk-for-python/issues/14345))\n\n## 1.5.0b1 (2020-09-08)\n### Added\n- Application authentication APIs from 1.4.0b7\n- `ManagedIdentityCredential` supports the latest version of App Service\n  ([#11346](https://github.com/Azure/azure-sdk-for-python/issues/11346))\n- `DefaultAzureCredential` allows specifying the client ID of a user-assigned\n  managed identity via keyword argument `managed_identity_client_id`\n  ([#12991](https://github.com/Azure/azure-sdk-for-python/issues/12991))\n- `CertificateCredential` supports Subject Name/Issuer authentication when\n  created with `send_certificate=True`. The async `CertificateCredential`\n  (`azure.identity.aio.CertificateCredential`) will support this in a\n  future version.\n  ([#10816](https://github.com/Azure/azure-sdk-for-python/issues/10816))\n- Credentials in `azure.identity` support ADFS authorities, excepting\n  `VisualStudioCodeCredential`. To configure a credential for this, configure\n  the credential with `authority` and `tenant_id=\"adfs\"` keyword arguments, for\n  example\n  `ClientSecretCredential(authority=\"<your ADFS URI>\", tenant_id=\"adfs\")`.\n  Async credentials (those in `azure.identity.aio`) will support ADFS in a\n  future release.\n  ([#12696](https://github.com/Azure/azure-sdk-for-python/issues/12696))\n- `InteractiveBrowserCredential` keyword argument `redirect_uri` enables\n  authentication with a user-specified application having a custom redirect URI\n  ([#13344](https://github.com/Azure/azure-sdk-for-python/issues/13344))\n\n### Breaking changes\n- Removed `authentication_record` keyword argument from the async\n  `SharedTokenCacheCredential`, i.e. `azure.identity.aio.SharedTokenCacheCredential`\n\n## 1.4.0 (2020-08-10)\n### Added\n- `DefaultAzureCredential` uses the value of environment variable\n`AZURE_CLIENT_ID` to configure a user-assigned managed identity.\n([#10931](https://github.com/Azure/azure-sdk-for-python/issues/10931))\n\n### Breaking Changes\n- Renamed `VSCodeCredential` to `VisualStudioCodeCredential`\n- Removed application authentication APIs added in 1.4.0 beta versions. These\n  will be reintroduced in 1.5.0b1. Passing the keyword arguments below\n  generally won't cause a runtime error, but the arguments have no effect.\n  - Removed `authenticate` method from `DeviceCodeCredential`,\n    `InteractiveBrowserCredential`, and `UsernamePasswordCredential`\n  - Removed `allow_unencrypted_cache` and `enable_persistent_cache` keyword\n    arguments from `CertificateCredential`, `ClientSecretCredential`,\n    `DeviceCodeCredential`, `InteractiveBrowserCredential`, and\n    `UsernamePasswordCredential`\n  - Removed `disable_automatic_authentication` keyword argument from\n    `DeviceCodeCredential` and `InteractiveBrowserCredential`\n  - Removed `allow_unencrypted_cache` keyword argument from\n    `SharedTokenCacheCredential`\n  - Removed classes `AuthenticationRecord` and `AuthenticationRequiredError`\n  - Removed `identity_config` keyword argument from `ManagedIdentityCredential`\n\n## 1.4.0b7 (2020-07-22)\n- `DefaultAzureCredential` has a new optional keyword argument,\n`visual_studio_code_tenant_id`, which sets the tenant the credential should\nauthenticate in when authenticating as the Azure user signed in to Visual\nStudio Code.\n- Renamed `AuthenticationRecord.deserialize` positional parameter `json_string`\nto `data`.\n\n\n## 1.4.0b6 (2020-07-07)\n- `AzureCliCredential` no longer raises an exception due to unexpected output\n  from the CLI when run by PyCharm (thanks @NVolcz)\n  ([#11362](https://github.com/Azure/azure-sdk-for-python/pull/11362))\n- Upgraded minimum `msal` version to 1.3.0\n- The async `AzureCliCredential` correctly invokes `/bin/sh`\n  ([#12048](https://github.com/Azure/azure-sdk-for-python/issues/12048))\n\n## 1.4.0b5 (2020-06-12)\n- Prevent an error on importing `AzureCliCredential` on Windows caused by a bug\n  in old versions of Python 3.6 (this bug was fixed in Python 3.6.5).\n  ([#12014](https://github.com/Azure/azure-sdk-for-python/issues/12014))\n- `SharedTokenCacheCredential.get_token` raises `ValueError` instead of\n  `ClientAuthenticationError` when called with no scopes.\n  ([#11553](https://github.com/Azure/azure-sdk-for-python/issues/11553))\n\n## 1.4.0b4 (2020-06-09)\n- `ManagedIdentityCredential` can configure a user-assigned identity using any\n  identifier supported by the current hosting environment. To specify an\n  identity by its client ID, continue using the `client_id` argument. To\n  specify an identity by any other ID, use the `identity_config` argument,\n  for example: `ManagedIdentityCredential(identity_config={\"object_id\": \"..\"})`\n  ([#10989](https://github.com/Azure/azure-sdk-for-python/issues/10989))\n- `CertificateCredential` and `ClientSecretCredential` can optionally store\n  access tokens they acquire in a persistent cache. To enable this, construct\n  the credential with `enable_persistent_cache=True`. On Linux, the persistent\n  cache requires libsecret and `pygobject`. If these are unavailable or\n  unusable (e.g. in an SSH session), loading the persistent cache will raise an\n  error. You may optionally configure the credential to fall back to an\n  unencrypted cache by constructing it with keyword argument\n  `allow_unencrypted_cache=True`.\n  ([#11347](https://github.com/Azure/azure-sdk-for-python/issues/11347))\n- `AzureCliCredential` raises `CredentialUnavailableError` when no user is\n  logged in to the Azure CLI.\n  ([#11819](https://github.com/Azure/azure-sdk-for-python/issues/11819))\n- `AzureCliCredential` and `VSCodeCredential`, which enable authenticating as\n  the identity signed in to the Azure CLI and Visual Studio Code, respectively,\n  can be imported from `azure.identity` and `azure.identity.aio`.\n- `azure.identity.aio.AuthorizationCodeCredential.get_token()` no longer accepts\n  optional keyword arguments `executor` or `loop`. Prior versions of the method\n  didn't use these correctly, provoking exceptions, and internal changes in this\n  version have made them obsolete.\n- `InteractiveBrowserCredential` raises `CredentialUnavailableError` when it\n  can't start an HTTP server on `localhost`.\n  ([#11665](https://github.com/Azure/azure-sdk-for-python/pull/11665))\n- When constructing `DefaultAzureCredential`, you can now configure a tenant ID\n  for `InteractiveBrowserCredential`. When none is specified, the credential\n  authenticates users in their home tenants. To specify a different tenant, use\n  the keyword argument `interactive_browser_tenant_id`, or set the environment\n  variable `AZURE_TENANT_ID`.\n  ([#11548](https://github.com/Azure/azure-sdk-for-python/issues/11548))\n- `SharedTokenCacheCredential` can be initialized with an `AuthenticationRecord`\n  provided by a user credential.\n  ([#11448](https://github.com/Azure/azure-sdk-for-python/issues/11448))\n- The user authentication API added to `DeviceCodeCredential` and\n  `InteractiveBrowserCredential` in 1.4.0b3 is available on\n  `UsernamePasswordCredential` as well.\n  ([#11449](https://github.com/Azure/azure-sdk-for-python/issues/11449))\n- The optional persistent cache for `DeviceCodeCredential` and\n  `InteractiveBrowserCredential` added in 1.4.0b3 is now available on Linux and\n  macOS as well as Windows.\n  ([#11134](https://github.com/Azure/azure-sdk-for-python/issues/11134))\n  - On Linux, the persistent cache requires libsecret and `pygobject`. If these\n    are unavailable, or libsecret is unusable (e.g. in an SSH session), loading\n    the persistent cache will raise an error. You may optionally configure the\n    credential to fall back to an unencrypted cache by constructing it with\n    keyword argument `allow_unencrypted_cache=True`.\n\n## 1.4.0b3 (2020-05-04)\n- `EnvironmentCredential` correctly initializes `UsernamePasswordCredential`\nwith the value of `AZURE_TENANT_ID`\n([#11127](https://github.com/Azure/azure-sdk-for-python/pull/11127))\n- Values for the constructor keyword argument `authority` and\n`AZURE_AUTHORITY_HOST` may optionally specify an \"https\" scheme. For example,\n\"https://login.microsoftonline.us\" and \"login.microsoftonline.us\" are both valid.\n([#10819](https://github.com/Azure/azure-sdk-for-python/issues/10819))\n- First preview of new API for authenticating users with `DeviceCodeCredential`\n  and `InteractiveBrowserCredential`\n  ([#10612](https://github.com/Azure/azure-sdk-for-python/pull/10612))\n  - new method `authenticate` interactively authenticates a user, returns a\n    serializable `AuthenticationRecord`\n  - new constructor keyword arguments\n    - `authentication_record` enables initializing a credential with an\n      `AuthenticationRecord` from a prior authentication\n    - `disable_automatic_authentication=True` configures the credential to raise\n    `AuthenticationRequiredError` when interactive authentication is necessary\n    to acquire a token rather than immediately begin that authentication\n    - `enable_persistent_cache=True` configures these credentials to use a\n    persistent cache on supported platforms (in this release, Windows only).\n    By default they cache in memory only.\n- Now `DefaultAzureCredential` can authenticate with the identity signed in to\nVisual Studio Code's Azure extension.\n([#10472](https://github.com/Azure/azure-sdk-for-python/issues/10472))\n\n## 1.4.0b2 (2020-04-06)\n- After an instance of `DefaultAzureCredential` successfully authenticates, it\nuses the same authentication method for every subsequent token request. This\nmakes subsequent requests more efficient, and prevents unexpected changes of\nauthentication method.\n([#10349](https://github.com/Azure/azure-sdk-for-python/pull/10349))\n- All `get_token` methods consistently require at least one scope argument,\nraising an error when none is passed. Although `get_token()` may sometimes\nhave succeeded in prior versions, it couldn't do so consistently because its\nbehavior was undefined, and dependened on the credential's type and internal\nstate. ([#10243](https://github.com/Azure/azure-sdk-for-python/issues/10243))\n- `SharedTokenCacheCredential` raises `CredentialUnavailableError` when the\ncache is available but contains ambiguous or insufficient information. This\ncauses `ChainedTokenCredential` to correctly try the next credential in the\nchain. ([#10631](https://github.com/Azure/azure-sdk-for-python/issues/10631))\n- The host of the Active Directory endpoint credentials should use can be set\nin the environment variable `AZURE_AUTHORITY_HOST`. See\n`azure.identity.KnownAuthorities` for a list of common values.\n([#8094](https://github.com/Azure/azure-sdk-for-python/issues/8094))\n\n\n## 1.3.1 (2020-03-30)\n\n- `ManagedIdentityCredential` raises `CredentialUnavailableError` when no\nidentity is configured for an IMDS endpoint. This causes\n`ChainedTokenCredential` to correctly try the next credential in the chain.\n([#10488](https://github.com/Azure/azure-sdk-for-python/issues/10488))\n\n\n## 1.4.0b1 (2020-03-10)\n- `DefaultAzureCredential` can now authenticate using the identity logged in to\nthe Azure CLI, unless explicitly disabled with a keyword argument:\n`DefaultAzureCredential(exclude_cli_credential=True)`\n([#10092](https://github.com/Azure/azure-sdk-for-python/pull/10092))\n\n\n## 1.3.0 (2020-02-11)\n\n- Correctly parse token expiration time on Windows App Service\n([#9393](https://github.com/Azure/azure-sdk-for-python/issues/9393))\n- Credentials raise `CredentialUnavailableError` when they can't attempt to\nauthenticate due to missing data or state\n([#9372](https://github.com/Azure/azure-sdk-for-python/pull/9372))\n- `CertificateCredential` supports password-protected private keys\n([#9434](https://github.com/Azure/azure-sdk-for-python/pull/9434))\n\n\n## 1.2.0 (2020-01-14)\n\n- All credential pipelines include `ProxyPolicy`\n([#8945](https://github.com/Azure/azure-sdk-for-python/pull/8945))\n- Async credentials are async context managers and have an async `close` method\n([#9090](https://github.com/Azure/azure-sdk-for-python/pull/9090))\n\n\n## 1.1.0 (2019-11-27)\n\n- Constructing `DefaultAzureCredential` no longer raises `ImportError` on Python\n3.8 on Windows ([8294](https://github.com/Azure/azure-sdk-for-python/pull/8294))\n- `InteractiveBrowserCredential` raises when unable to open a web browser\n([8465](https://github.com/Azure/azure-sdk-for-python/pull/8465))\n- `InteractiveBrowserCredential` prompts for account selection\n([8470](https://github.com/Azure/azure-sdk-for-python/pull/8470))\n- The credentials composing `DefaultAzureCredential` are configurable by keyword\narguments ([8514](https://github.com/Azure/azure-sdk-for-python/pull/8514))\n- `SharedTokenCacheCredential` accepts an optional `tenant_id` keyword argument\n([8689](https://github.com/Azure/azure-sdk-for-python/pull/8689))\n\n\n## 1.0.1 (2019-11-05)\n\n- `ClientCertificateCredential` uses application and tenant IDs correctly\n([8315](https://github.com/Azure/azure-sdk-for-python/pull/8315))\n- `InteractiveBrowserCredential` properly caches tokens\n([8352](https://github.com/Azure/azure-sdk-for-python/pull/8352))\n- Adopted msal 1.0.0 and msal-extensions 0.1.3\n([8359](https://github.com/Azure/azure-sdk-for-python/pull/8359))\n\n\n## 1.0.0 (2019-10-29)\n### Breaking changes:\n- Async credentials now default to [`aiohttp`](https://pypi.org/project/aiohttp/)\nfor transport but the library does not require it as a dependency because the\nasync API is optional. To use async credentials, please install\n[`aiohttp`](https://pypi.org/project/aiohttp/) or see\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md#transport)\nfor information about customizing the transport.\n- Renamed `ClientSecretCredential` parameter \"`secret`\" to \"`client_secret`\"\n- All credentials with `tenant_id` and `client_id` positional parameters now accept them in that order\n- Changes to `InteractiveBrowserCredential` parameters\n  - positional parameter `client_id` is now an optional keyword argument. If no value is provided,\nthe Azure CLI's client ID will be used.\n  - Optional keyword argument `tenant` renamed `tenant_id`\n- Changes to `DeviceCodeCredential`\n  - optional positional parameter `prompt_callback` is now a keyword argument\n  - `prompt_callback`'s third argument is now a `datetime` representing the\n  expiration time of the device code\n  - optional keyword argument `tenant` renamed `tenant_id`\n- Changes to `ManagedIdentityCredential`\n  - now accepts no positional arguments, and only one keyword argument:\n  `client_id`\n  - transport configuration is now done through keyword arguments as\n  described in\n  [`azure-core` documentation](https://github.com/Azure/azure-sdk-for-python/blob/azure-identity_1.0.0/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport)\n\n### Fixes and improvements:\n- Authenticating with a single sign-on shared with other Microsoft applications\nonly requires a username when multiple users have signed in\n([#8095](https://github.com/Azure/azure-sdk-for-python/pull/8095))\n- `DefaultAzureCredential` accepts an `authority` keyword argument, enabling\nits use in national clouds\n([#8154](https://github.com/Azure/azure-sdk-for-python/pull/8154))\n\n### Dependency changes\n- Adopted [`msal_extensions`](https://pypi.org/project/msal-extensions/) 0.1.2\n- Constrained [`msal`](https://pypi.org/project/msal/) requirement to >=0.4.1,\n<1.0.0\n\n\n## 1.0.0b4 (2019-10-07)\n### New features:\n- `AuthorizationCodeCredential` authenticates with a previously obtained\nauthorization code. See Microsoft Entra's\n[authorization code documentation](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow)\nfor more information about this authentication flow.\n- Multi-cloud support: client credentials accept the authority of an Azure Active\nDirectory authentication endpoint as an `authority` keyword argument. Known\nauthorities are defined in `azure.identity.KnownAuthorities`. The default\nauthority is for Azure Public Cloud, `login.microsoftonline.com`\n(`KnownAuthorities.AZURE_PUBLIC_CLOUD`). An application running in Azure\nGovernment would use `KnownAuthorities.AZURE_GOVERNMENT` instead:\n>```\n>from azure.identity import DefaultAzureCredential, KnownAuthorities\n>credential = DefaultAzureCredential(authority=KnownAuthorities.AZURE_GOVERNMENT)\n>```\n\n### Breaking changes:\n- Removed `client_secret` parameter from `InteractiveBrowserCredential`\n\n### Fixes and improvements:\n- `UsernamePasswordCredential` correctly handles environment configuration with\nno tenant information ([#7260](https://github.com/Azure/azure-sdk-for-python/pull/7260))\n- user realm discovery requests are sent through credential pipelines\n([#7260](https://github.com/Azure/azure-sdk-for-python/pull/7260))\n\n\n## 1.0.0b3 (2019-09-10)\n### New features:\n- `SharedTokenCacheCredential` authenticates with tokens stored in a local\ncache shared by Microsoft applications. This enables Azure SDK clients to\nauthenticate silently after you've signed in to Visual Studio 2019, for\nexample. `DefaultAzureCredential` includes `SharedTokenCacheCredential` when\nthe shared cache is available, and environment variable `AZURE_USERNAME`\nis set. See the\n[README](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md#single-sign-on)\nfor more information.\n\n### Dependency changes:\n- New dependency: [`msal-extensions`](https://pypi.org/project/msal-extensions/)\n0.1.1\n\n## 1.0.0b2 (2019-08-05)\n### Breaking changes:\n- Removed `azure.core.Configuration` from the public API in preparation for a\nrevamped configuration API. Static `create_config` methods have been renamed\n`_create_config`, and will be removed in a future release.\n\n### Dependency changes:\n- Adopted [azure-core](https://pypi.org/project/azure-core/) 1.0.0b2\n  - If you later want to revert to a version requiring azure-core 1.0.0b1,\n  of this or another Azure SDK library, you must explicitly install azure-core\n  1.0.0b1 as well. For example:\n  `pip install azure-core==1.0.0b1 azure-identity==1.0.0b1`\n- Adopted [MSAL](https://pypi.org/project/msal/) 0.4.1\n- New dependency for Python 2.7: [mock](https://pypi.org/project/mock/)\n\n### New features:\n- Added credentials for authenticating users:\n - `DeviceCodeCredential`\n - `InteractiveBrowserCredential`\n - `UsernamePasswordCredential`\n  - async versions of these credentials will be added in a future release\n\n## 1.0.0b1 (2019-06-28)\nVersion 1.0.0b1 is the first preview of our efforts to create a user-friendly\nand Pythonic authentication API for Azure SDK client libraries. For more\ninformation about preview releases of other Azure SDK libraries, please visit\nhttps://aka.ms/azure-sdk-preview1-python.\n\nThis release supports service principal and managed identity authentication.\nSee the\n[documentation](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/identity/azure-identity/README.md)\nfor more details. User authentication will be added in an upcoming preview\nrelease.\n\nThis release supports only global Microsoft Entra tenants, i.e. those\nusing the https://login.microsoftonline.com authentication endpoint.\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "azure",
          "azure sdk"
        ],
        "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/identity/azure-identity",
        "author": "Microsoft Corporation",
        "author_email": "azpysdkhelp@microsoft.com",
        "license": "MIT License",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "License :: OSI Approved :: MIT License"
        ],
        "requires_dist": [
          "azure-core <2.0.0,>=1.23.0",
          "cryptography >=2.5",
          "msal <2.0.0,>=1.24.0",
          "msal-extensions <2.0.0,>=0.3.0"
        ],
        "requires_python": ">=3.8"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ba/06/a07f096c664aeb9f01624f858c3add0a4e913d6c96257acb4fce61e7de14/certifi-2024.2.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=dc383c07b76109f368f6106eee2b593b04a011ea4d55f652c6ca24a754d1cdd1",
          "hashes": {
            "sha256": "dc383c07b76109f368f6106eee2b593b04a011ea4d55f652c6ca24a754d1cdd1"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "certifi",
        "version": "2024.2.2",
        "summary": "Python package for providing Mozilla's CA Bundle.",
        "description": "Certifi: Python SSL Certificates\n================================\n\nCertifi provides Mozilla's carefully curated collection of Root Certificates for\nvalidating the trustworthiness of SSL certificates while verifying the identity\nof TLS hosts. It has been extracted from the `Requests`_ project.\n\nInstallation\n------------\n\n``certifi`` is available on PyPI. Simply install it with ``pip``::\n\n    $ pip install certifi\n\nUsage\n-----\n\nTo reference the installed certificate authority (CA) bundle, you can use the\nbuilt-in function::\n\n    >>> import certifi\n\n    >>> certifi.where()\n    '/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'\n\nOr from the command line::\n\n    $ python -m certifi\n    /usr/local/lib/python3.7/site-packages/certifi/cacert.pem\n\nEnjoy!\n\n.. _`Requests`: https://requests.readthedocs.io/en/master/\n\nAddition/Removal of Certificates\n--------------------------------\n\nCertifi does not support any addition/removal or other modification of the\nCA trust store content. This project is intended to provide a reliable and\nhighly portable root of trust to python deployments. Look to upstream projects\nfor methods to use alternate trust.\n",
        "home_page": "https://github.com/certifi/python-certifi",
        "author": "Kenneth Reitz",
        "author_email": "me@kennethreitz.com",
        "license": "MPL-2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Source, https://github.com/certifi/python-certifi"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/e9/63/e285470a4880a4f36edabe4810057bd4b562c6ddcc165eacf9c3c7210b40/cffi-1.16.0-cp312-cp312-win_amd64.whl",
        "archive_info": {
          "hash": "sha256=68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235",
          "hashes": {
            "sha256": "68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "cffi",
        "version": "1.16.0",
        "summary": "Foreign Function Interface for Python calling C code.",
        "description": "\r\nCFFI\r\n====\r\n\r\nForeign Function Interface for Python calling C code.\r\nPlease see the `Documentation <http://cffi.readthedocs.org/>`_.\r\n\r\nContact\r\n-------\r\n\r\n`Mailing list <https://groups.google.com/forum/#!forum/python-cffi>`_\r\n",
        "home_page": "http://cffi.readthedocs.org",
        "author": "Armin Rigo, Maciej Fijalkowski",
        "author_email": "python-cffi@googlegroups.com",
        "license": "MIT",
        "classifier": [
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "License :: OSI Approved :: MIT License"
        ],
        "requires_dist": [
          "pycparser"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Documentation, http://cffi.readthedocs.org/",
          "Source Code, https://github.com/python-cffi/cffi",
          "Issue Tracker, https://github.com/python-cffi/cffi/issues",
          "Changelog, https://cffi.readthedocs.io/en/latest/whatsnew.html",
          "Downloads, https://github.com/python-cffi/cffi/releases",
          "Contact, https://groups.google.com/forum/#!forum/python-cffi"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b6/7c/8debebb4f90174074b827c63242c23851bdf00a532489fba57fef3416e40/charset_normalizer-3.3.2-cp312-cp312-win_amd64.whl",
        "archive_info": {
          "hash": "sha256=96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001",
          "hashes": {
            "sha256": "96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "charset-normalizer",
        "version": "3.3.2",
        "summary": "The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.",
        "description": "<h1 align=\"center\">Charset Detection, for Everyone 👋</h1>\r\n\r\n<p align=\"center\">\r\n  <sup>The Real First Universal Charset Detector</sup><br>\r\n  <a href=\"https://pypi.org/project/charset-normalizer\">\r\n    <img src=\"https://img.shields.io/pypi/pyversions/charset_normalizer.svg?orange=blue\" />\r\n  </a>\r\n  <a href=\"https://pepy.tech/project/charset-normalizer/\">\r\n    <img alt=\"Download Count Total\" src=\"https://static.pepy.tech/badge/charset-normalizer/month\" />\r\n  </a>\r\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/7297\">\r\n    <img src=\"https://bestpractices.coreinfrastructure.org/projects/7297/badge\">\r\n  </a>\r\n</p>\r\n<p align=\"center\">\r\n  <sup><i>Featured Packages</i></sup><br>\r\n  <a href=\"https://github.com/jawah/niquests\">\r\n   <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Niquests-HTTP_1.1%2C%202%2C_and_3_Client-cyan\">\r\n  </a>\r\n  <a href=\"https://github.com/jawah/wassima\">\r\n   <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Wassima-Certifi_Killer-cyan\">\r\n  </a>\r\n</p>\r\n<p align=\"center\">\r\n  <sup><i>In other language (unofficial port - by the community)</i></sup><br>\r\n  <a href=\"https://github.com/nickspring/charset-normalizer-rs\">\r\n   <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/Rust-red\">\r\n  </a>\r\n</p>\r\n\r\n> A library that helps you read text from an unknown charset encoding.<br /> Motivated by `chardet`,\r\n> I'm trying to resolve the issue by taking a new approach.\r\n> All IANA character set names for which the Python core library provides codecs are supported.\r\n\r\n<p align=\"center\">\r\n  >>>>> <a href=\"https://charsetnormalizerweb.ousret.now.sh\" target=\"_blank\">👉 Try Me Online Now, Then Adopt Me 👈 </a> <<<<<\r\n</p>\r\n\r\nThis project offers you an alternative to **Universal Charset Encoding Detector**, also known as **Chardet**.\r\n\r\n| Feature                                          | [Chardet](https://github.com/chardet/chardet) |                                         Charset Normalizer                                         | [cChardet](https://github.com/PyYoshi/cChardet) |\r\n|--------------------------------------------------|:---------------------------------------------:|:--------------------------------------------------------------------------------------------------:|:-----------------------------------------------:|\r\n| `Fast`                                           |                       ❌                       |                                                 ✅                                                  |                        ✅                        |\r\n| `Universal**`                                    |                       ❌                       |                                                 ✅                                                  |                        ❌                        |\r\n| `Reliable` **without** distinguishable standards |                       ❌                       |                                                 ✅                                                  |                        ✅                        |\r\n| `Reliable` **with** distinguishable standards    |                       ✅                       |                                                 ✅                                                  |                        ✅                        |\r\n| `License`                                        |           LGPL-2.1<br>_restrictive_           |                                                MIT                                                 |            MPL-1.1<br>_restrictive_             |\r\n| `Native Python`                                  |                       ✅                       |                                                 ✅                                                  |                        ❌                        |\r\n| `Detect spoken language`                         |                       ❌                       |                                                 ✅                                                  |                       N/A                       |\r\n| `UnicodeDecodeError Safety`                      |                       ❌                       |                                                 ✅                                                  |                        ❌                        |\r\n| `Whl Size (min)`                                 |                   193.6 kB                    |                                               42 kB                                                |                     ~200 kB                     |\r\n| `Supported Encoding`                             |                      33                       | 🎉 [99](https://charset-normalizer.readthedocs.io/en/latest/user/support.html#supported-encodings) |                       40                        |\r\n\r\n<p align=\"center\">\r\n<img src=\"https://i.imgflip.com/373iay.gif\" alt=\"Reading Normalized Text\" width=\"226\"/><img src=\"https://media.tenor.com/images/c0180f70732a18b4965448d33adba3d0/tenor.gif\" alt=\"Cat Reading Text\" width=\"200\"/>\r\n</p>\r\n\r\n*\\*\\* : They are clearly using specific code for a specific encoding even if covering most of used one*<br> \r\nDid you got there because of the logs? See [https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html](https://charset-normalizer.readthedocs.io/en/latest/user/miscellaneous.html)\r\n\r\n## ⚡ Performance\r\n\r\nThis package offer better performance than its counterpart Chardet. Here are some numbers.\r\n\r\n| Package                                       | Accuracy | Mean per file (ms) | File per sec (est) |\r\n|-----------------------------------------------|:--------:|:------------------:|:------------------:|\r\n| [chardet](https://github.com/chardet/chardet) |   86 %   |       200 ms       |     5 file/sec     |\r\n| charset-normalizer                            | **98 %** |     **10 ms**      |    100 file/sec    |\r\n\r\n| Package                                       | 99th percentile | 95th percentile | 50th percentile |\r\n|-----------------------------------------------|:---------------:|:---------------:|:---------------:|\r\n| [chardet](https://github.com/chardet/chardet) |     1200 ms     |     287 ms      |      23 ms      |\r\n| charset-normalizer                            |     100 ms      |      50 ms      |      5 ms       |\r\n\r\nChardet's performance on larger file (1MB+) are very poor. Expect huge difference on large payload.\r\n\r\n> Stats are generated using 400+ files using default parameters. More details on used files, see GHA workflows.\r\n> And yes, these results might change at any time. The dataset can be updated to include more files.\r\n> The actual delays heavily depends on your CPU capabilities. The factors should remain the same.\r\n> Keep in mind that the stats are generous and that Chardet accuracy vs our is measured using Chardet initial capability\r\n> (eg. Supported Encoding) Challenge-them if you want.\r\n\r\n## ✨ Installation\r\n\r\nUsing pip:\r\n\r\n```sh\r\npip install charset-normalizer -U\r\n```\r\n\r\n## 🚀 Basic Usage\r\n\r\n### CLI\r\nThis package comes with a CLI.\r\n\r\n```\r\nusage: normalizer [-h] [-v] [-a] [-n] [-m] [-r] [-f] [-t THRESHOLD]\r\n                  file [file ...]\r\n\r\nThe Real First Universal Charset Detector. Discover originating encoding used\r\non text file. Normalize text to unicode.\r\n\r\npositional arguments:\r\n  files                 File(s) to be analysed\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v, --verbose         Display complementary information about file if any.\r\n                        Stdout will contain logs about the detection process.\r\n  -a, --with-alternative\r\n                        Output complementary possibilities if any. Top-level\r\n                        JSON WILL be a list.\r\n  -n, --normalize       Permit to normalize input file. If not set, program\r\n                        does not write anything.\r\n  -m, --minimal         Only output the charset detected to STDOUT. Disabling\r\n                        JSON output.\r\n  -r, --replace         Replace file when trying to normalize it instead of\r\n                        creating a new one.\r\n  -f, --force           Replace file without asking if you are sure, use this\r\n                        flag with caution.\r\n  -t THRESHOLD, --threshold THRESHOLD\r\n                        Define a custom maximum amount of chaos allowed in\r\n                        decoded content. 0. <= chaos <= 1.\r\n  --version             Show version information and exit.\r\n```\r\n\r\n```bash\r\nnormalizer ./data/sample.1.fr.srt\r\n```\r\n\r\nor\r\n\r\n```bash\r\npython -m charset_normalizer ./data/sample.1.fr.srt\r\n```\r\n\r\n🎉 Since version 1.4.0 the CLI produce easily usable stdout result in JSON format.\r\n\r\n```json\r\n{\r\n    \"path\": \"/home/default/projects/charset_normalizer/data/sample.1.fr.srt\",\r\n    \"encoding\": \"cp1252\",\r\n    \"encoding_aliases\": [\r\n        \"1252\",\r\n        \"windows_1252\"\r\n    ],\r\n    \"alternative_encodings\": [\r\n        \"cp1254\",\r\n        \"cp1256\",\r\n        \"cp1258\",\r\n        \"iso8859_14\",\r\n        \"iso8859_15\",\r\n        \"iso8859_16\",\r\n        \"iso8859_3\",\r\n        \"iso8859_9\",\r\n        \"latin_1\",\r\n        \"mbcs\"\r\n    ],\r\n    \"language\": \"French\",\r\n    \"alphabets\": [\r\n        \"Basic Latin\",\r\n        \"Latin-1 Supplement\"\r\n    ],\r\n    \"has_sig_or_bom\": false,\r\n    \"chaos\": 0.149,\r\n    \"coherence\": 97.152,\r\n    \"unicode_path\": null,\r\n    \"is_preferred\": true\r\n}\r\n```\r\n\r\n### Python\r\n*Just print out normalized text*\r\n```python\r\nfrom charset_normalizer import from_path\r\n\r\nresults = from_path('./my_subtitle.srt')\r\n\r\nprint(str(results.best()))\r\n```\r\n\r\n*Upgrade your code without effort*\r\n```python\r\nfrom charset_normalizer import detect\r\n```\r\n\r\nThe above code will behave the same as **chardet**. We ensure that we offer the best (reasonable) BC result possible.\r\n\r\nSee the docs for advanced usage : [readthedocs.io](https://charset-normalizer.readthedocs.io/en/latest/)\r\n\r\n## 😇 Why\r\n\r\nWhen I started using Chardet, I noticed that it was not suited to my expectations, and I wanted to propose a\r\nreliable alternative using a completely different method. Also! I never back down on a good challenge!\r\n\r\nI **don't care** about the **originating charset** encoding, because **two different tables** can\r\nproduce **two identical rendered string.**\r\nWhat I want is to get readable text, the best I can. \r\n\r\nIn a way, **I'm brute forcing text decoding.** How cool is that ? 😎\r\n\r\nDon't confuse package **ftfy** with charset-normalizer or chardet. ftfy goal is to repair unicode string whereas charset-normalizer to convert raw file in unknown encoding to unicode.\r\n\r\n## 🍰 How\r\n\r\n  - Discard all charset encoding table that could not fit the binary content.\r\n  - Measure noise, or the mess once opened (by chunks) with a corresponding charset encoding.\r\n  - Extract matches with the lowest mess detected.\r\n  - Additionally, we measure coherence / probe for a language.\r\n\r\n**Wait a minute**, what is noise/mess and coherence according to **YOU ?**\r\n\r\n*Noise :* I opened hundred of text files, **written by humans**, with the wrong encoding table. **I observed**, then\r\n**I established** some ground rules about **what is obvious** when **it seems like** a mess.\r\n I know that my interpretation of what is noise is probably incomplete, feel free to contribute in order to\r\n improve or rewrite it.\r\n\r\n*Coherence :* For each language there is on earth, we have computed ranked letter appearance occurrences (the best we can). So I thought\r\nthat intel is worth something here. So I use those records against decoded text to check if I can detect intelligent design.\r\n\r\n## ⚡ Known limitations\r\n\r\n  - Language detection is unreliable when text contains two or more languages sharing identical letters. (eg. HTML (english tags) + Turkish content (Sharing Latin characters))\r\n  - Every charset detector heavily depends on sufficient content. In common cases, do not bother run detection on very tiny content.\r\n\r\n## ⚠️ About Python EOLs\r\n\r\n**If you are running:**\r\n\r\n- Python >=2.7,<3.5: Unsupported\r\n- Python 3.5: charset-normalizer < 2.1\r\n- Python 3.6: charset-normalizer < 3.1\r\n- Python 3.7: charset-normalizer < 4.0\r\n\r\nUpgrade your Python interpreter as soon as possible.\r\n\r\n## 👤 Contributing\r\n\r\nContributions, issues and feature requests are very much welcome.<br />\r\nFeel free to check [issues page](https://github.com/ousret/charset_normalizer/issues) if you want to contribute.\r\n\r\n## 📝 License\r\n\r\nCopyright © [Ahmed TAHRI @Ousret](https://github.com/Ousret).<br />\r\nThis project is [MIT](https://github.com/Ousret/charset_normalizer/blob/master/LICENSE) licensed.\r\n\r\nCharacters frequencies used in this project © 2012 [Denny Vrandečić](http://simia.net/letters/)\r\n\r\n## 💼 For Enterprise\r\n\r\nProfessional support for charset-normalizer is available as part of the [Tidelift\r\nSubscription][1]. Tidelift gives software development teams a single source for\r\npurchasing and maintaining their software, with professional grade assurances\r\nfrom the experts who know it best, while seamlessly integrating with existing\r\ntools.\r\n\r\n[1]: https://tidelift.com/subscription/pkg/pypi-charset-normalizer?utm_source=pypi-charset-normalizer&utm_medium=readme\r\n\r\n# Changelog\r\nAll notable changes to charset-normalizer will be documented in this file. This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\r\n\r\n## [3.3.2](https://github.com/Ousret/charset_normalizer/compare/3.3.1...3.3.2) (2023-10-31)\r\n\r\n### Fixed\r\n- Unintentional memory usage regression when using large payload that match several encoding (#376)\r\n- Regression on some detection case showcased in the documentation (#371)\r\n\r\n### Added\r\n- Noise (md) probe that identify malformed arabic representation due to the presence of letters in isolated form (credit to my wife)\r\n\r\n## [3.3.1](https://github.com/Ousret/charset_normalizer/compare/3.3.0...3.3.1) (2023-10-22)\r\n\r\n### Changed\r\n- Optional mypyc compilation upgraded to version 1.6.1 for Python >= 3.8\r\n- Improved the general detection reliability based on reports from the community\r\n\r\n## [3.3.0](https://github.com/Ousret/charset_normalizer/compare/3.2.0...3.3.0) (2023-09-30)\r\n\r\n### Added\r\n- Allow to execute the CLI (e.g. normalizer) through `python -m charset_normalizer.cli` or `python -m charset_normalizer`\r\n- Support for 9 forgotten encoding that are supported by Python but unlisted in `encoding.aliases` as they have no alias (#323)\r\n\r\n### Removed\r\n- (internal) Redundant utils.is_ascii function and unused function is_private_use_only\r\n- (internal) charset_normalizer.assets is moved inside charset_normalizer.constant\r\n\r\n### Changed\r\n- (internal) Unicode code blocks in constants are updated using the latest v15.0.0 definition to improve detection\r\n- Optional mypyc compilation upgraded to version 1.5.1 for Python >= 3.8\r\n\r\n### Fixed\r\n- Unable to properly sort CharsetMatch when both chaos/noise and coherence were close due to an unreachable condition in \\_\\_lt\\_\\_ (#350)\r\n\r\n## [3.2.0](https://github.com/Ousret/charset_normalizer/compare/3.1.0...3.2.0) (2023-06-07)\r\n\r\n### Changed\r\n- Typehint for function `from_path` no longer enforce `PathLike` as its first argument\r\n- Minor improvement over the global detection reliability\r\n\r\n### Added\r\n- Introduce function `is_binary` that relies on main capabilities, and optimized to detect binaries\r\n- Propagate `enable_fallback` argument throughout `from_bytes`, `from_path`, and `from_fp` that allow a deeper control over the detection (default True)\r\n- Explicit support for Python 3.12\r\n\r\n### Fixed\r\n- Edge case detection failure where a file would contain 'very-long' camel cased word (Issue #289)\r\n\r\n## [3.1.0](https://github.com/Ousret/charset_normalizer/compare/3.0.1...3.1.0) (2023-03-06)\r\n\r\n### Added\r\n- Argument `should_rename_legacy` for legacy function `detect` and disregard any new arguments without errors (PR #262)\r\n\r\n### Removed\r\n- Support for Python 3.6 (PR #260)\r\n\r\n### Changed\r\n- Optional speedup provided by mypy/c 1.0.1\r\n\r\n## [3.0.1](https://github.com/Ousret/charset_normalizer/compare/3.0.0...3.0.1) (2022-11-18)\r\n\r\n### Fixed\r\n- Multi-bytes cutter/chunk generator did not always cut correctly (PR #233)\r\n\r\n### Changed\r\n- Speedup provided by mypy/c 0.990 on Python >= 3.7\r\n\r\n## [3.0.0](https://github.com/Ousret/charset_normalizer/compare/2.1.1...3.0.0) (2022-10-20)\r\n\r\n### Added\r\n- Extend the capability of explain=True when cp_isolation contains at most two entries (min one), will log in details of the Mess-detector results\r\n- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES\r\n- Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp` to adjust the minimum expected coherence ratio\r\n- `normalizer --version` now specify if current version provide extra speedup (meaning mypyc compilation whl)\r\n\r\n### Changed\r\n- Build with static metadata using 'build' frontend\r\n- Make the language detection stricter\r\n- Optional: Module `md.py` can be compiled using Mypyc to provide an extra speedup up to 4x faster than v2.1\r\n\r\n### Fixed\r\n- CLI with opt --normalize fail when using full path for files\r\n- TooManyAccentuatedPlugin induce false positive on the mess detection when too few alpha character have been fed to it\r\n- Sphinx warnings when generating the documentation\r\n\r\n### Removed\r\n- Coherence detector no longer return 'Simple English' instead return 'English'\r\n- Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'\r\n- Breaking: Method `first()` and `best()` from CharsetMatch\r\n- UTF-7 will no longer appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict with ASCII)\r\n- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches\r\n- Breaking: Top-level function `normalize`\r\n- Breaking: Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from CharsetMatch\r\n- Support for the backport `unicodedata2`\r\n\r\n## [3.0.0rc1](https://github.com/Ousret/charset_normalizer/compare/3.0.0b2...3.0.0rc1) (2022-10-18)\r\n\r\n### Added\r\n- Extend the capability of explain=True when cp_isolation contains at most two entries (min one), will log in details of the Mess-detector results\r\n- Support for alternative language frequency set in charset_normalizer.assets.FREQUENCIES\r\n- Add parameter `language_threshold` in `from_bytes`, `from_path` and `from_fp` to adjust the minimum expected coherence ratio\r\n\r\n### Changed\r\n- Build with static metadata using 'build' frontend\r\n- Make the language detection stricter\r\n\r\n### Fixed\r\n- CLI with opt --normalize fail when using full path for files\r\n- TooManyAccentuatedPlugin induce false positive on the mess detection when too few alpha character have been fed to it\r\n\r\n### Removed\r\n- Coherence detector no longer return 'Simple English' instead return 'English'\r\n- Coherence detector no longer return 'Classical Chinese' instead return 'Chinese'\r\n\r\n## [3.0.0b2](https://github.com/Ousret/charset_normalizer/compare/3.0.0b1...3.0.0b2) (2022-08-21)\r\n\r\n### Added\r\n- `normalizer --version` now specify if current version provide extra speedup (meaning mypyc compilation whl)\r\n\r\n### Removed\r\n- Breaking: Method `first()` and `best()` from CharsetMatch\r\n- UTF-7 will no longer appear as \"detected\" without a recognized SIG/mark (is unreliable/conflict with ASCII)\r\n\r\n### Fixed\r\n- Sphinx warnings when generating the documentation\r\n\r\n## [3.0.0b1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...3.0.0b1) (2022-08-15)\r\n\r\n### Changed\r\n- Optional: Module `md.py` can be compiled using Mypyc to provide an extra speedup up to 4x faster than v2.1\r\n\r\n### Removed\r\n- Breaking: Class aliases CharsetDetector, CharsetDoctor, CharsetNormalizerMatch and CharsetNormalizerMatches\r\n- Breaking: Top-level function `normalize`\r\n- Breaking: Properties `chaos_secondary_pass`, `coherence_non_latin` and `w_counter` from CharsetMatch\r\n- Support for the backport `unicodedata2`\r\n\r\n## [2.1.1](https://github.com/Ousret/charset_normalizer/compare/2.1.0...2.1.1) (2022-08-19)\r\n\r\n### Deprecated\r\n- Function `normalize` scheduled for removal in 3.0\r\n\r\n### Changed\r\n- Removed useless call to decode in fn is_unprintable (#206)\r\n\r\n### Fixed\r\n- Third-party library (i18n xgettext) crashing not recognizing utf_8 (PEP 263) with underscore from [@aleksandernovikov](https://github.com/aleksandernovikov) (#204)\r\n\r\n## [2.1.0](https://github.com/Ousret/charset_normalizer/compare/2.0.12...2.1.0) (2022-06-19)\r\n\r\n### Added\r\n- Output the Unicode table version when running the CLI with `--version` (PR #194)\r\n\r\n### Changed\r\n- Re-use decoded buffer for single byte character sets from [@nijel](https://github.com/nijel) (PR #175)\r\n- Fixing some performance bottlenecks from [@deedy5](https://github.com/deedy5) (PR #183)\r\n\r\n### Fixed\r\n- Workaround potential bug in cpython with Zero Width No-Break Space located in Arabic Presentation Forms-B, Unicode 1.1 not acknowledged as space (PR #175)\r\n- CLI default threshold aligned with the API threshold from [@oleksandr-kuzmenko](https://github.com/oleksandr-kuzmenko) (PR #181)\r\n\r\n### Removed\r\n- Support for Python 3.5 (PR #192)\r\n\r\n### Deprecated\r\n- Use of backport unicodedata from `unicodedata2` as Python is quickly catching up, scheduled for removal in 3.0 (PR #194)\r\n\r\n## [2.0.12](https://github.com/Ousret/charset_normalizer/compare/2.0.11...2.0.12) (2022-02-12)\r\n\r\n### Fixed\r\n- ASCII miss-detection on rare cases (PR #170) \r\n\r\n## [2.0.11](https://github.com/Ousret/charset_normalizer/compare/2.0.10...2.0.11) (2022-01-30)\r\n\r\n### Added\r\n- Explicit support for Python 3.11 (PR #164)\r\n\r\n### Changed\r\n- The logging behavior have been completely reviewed, now using only TRACE and DEBUG levels (PR #163 #165)\r\n\r\n## [2.0.10](https://github.com/Ousret/charset_normalizer/compare/2.0.9...2.0.10) (2022-01-04)\r\n\r\n### Fixed\r\n- Fallback match entries might lead to UnicodeDecodeError for large bytes sequence (PR #154)\r\n\r\n### Changed\r\n- Skipping the language-detection (CD) on ASCII (PR #155)\r\n\r\n## [2.0.9](https://github.com/Ousret/charset_normalizer/compare/2.0.8...2.0.9) (2021-12-03)\r\n\r\n### Changed\r\n- Moderating the logging impact (since 2.0.8) for specific environments (PR #147)\r\n\r\n### Fixed\r\n- Wrong logging level applied when setting kwarg `explain` to True (PR #146)\r\n\r\n## [2.0.8](https://github.com/Ousret/charset_normalizer/compare/2.0.7...2.0.8) (2021-11-24)\r\n### Changed\r\n- Improvement over Vietnamese detection (PR #126)\r\n- MD improvement on trailing data and long foreign (non-pure latin) data (PR #124)\r\n- Efficiency improvements in cd/alphabet_languages from [@adbar](https://github.com/adbar) (PR #122)\r\n- call sum() without an intermediary list following PEP 289 recommendations from [@adbar](https://github.com/adbar) (PR #129)\r\n- Code style as refactored by Sourcery-AI (PR #131) \r\n- Minor adjustment on the MD around european words (PR #133)\r\n- Remove and replace SRTs from assets / tests (PR #139)\r\n- Initialize the library logger with a `NullHandler` by default from [@nmaynes](https://github.com/nmaynes) (PR #135)\r\n- Setting kwarg `explain` to True will add provisionally (bounded to function lifespan) a specific stream handler (PR #135)\r\n\r\n### Fixed\r\n- Fix large (misleading) sequence giving UnicodeDecodeError (PR #137)\r\n- Avoid using too insignificant chunk (PR #137)\r\n\r\n### Added\r\n- Add and expose function `set_logging_handler` to configure a specific StreamHandler from [@nmaynes](https://github.com/nmaynes) (PR #135)\r\n- Add `CHANGELOG.md` entries, format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) (PR #141)\r\n\r\n## [2.0.7](https://github.com/Ousret/charset_normalizer/compare/2.0.6...2.0.7) (2021-10-11)\r\n### Added\r\n- Add support for Kazakh (Cyrillic) language detection (PR #109)\r\n\r\n### Changed\r\n- Further, improve inferring the language from a given single-byte code page (PR #112)\r\n- Vainly trying to leverage PEP263 when PEP3120 is not supported (PR #116)\r\n- Refactoring for potential performance improvements in loops from [@adbar](https://github.com/adbar) (PR #113)\r\n- Various detection improvement (MD+CD) (PR #117)\r\n\r\n### Removed\r\n- Remove redundant logging entry about detected language(s) (PR #115)\r\n\r\n### Fixed\r\n- Fix a minor inconsistency between Python 3.5 and other versions regarding language detection (PR #117 #102)\r\n\r\n## [2.0.6](https://github.com/Ousret/charset_normalizer/compare/2.0.5...2.0.6) (2021-09-18)\r\n### Fixed\r\n- Unforeseen regression with the loss of the backward-compatibility with some older minor of Python 3.5.x (PR #100)\r\n- Fix CLI crash when using --minimal output in certain cases (PR #103)\r\n\r\n### Changed\r\n- Minor improvement to the detection efficiency (less than 1%) (PR #106 #101)\r\n\r\n## [2.0.5](https://github.com/Ousret/charset_normalizer/compare/2.0.4...2.0.5) (2021-09-14)\r\n### Changed\r\n- The project now comply with: flake8, mypy, isort and black to ensure a better overall quality (PR #81)\r\n- The BC-support with v1.x was improved, the old staticmethods are restored (PR #82)\r\n- The Unicode detection is slightly improved (PR #93)\r\n- Add syntax sugar \\_\\_bool\\_\\_ for results CharsetMatches list-container (PR #91)\r\n\r\n### Removed\r\n- The project no longer raise warning on tiny content given for detection, will be simply logged as warning instead (PR #92)\r\n\r\n### Fixed\r\n- In some rare case, the chunks extractor could cut in the middle of a multi-byte character and could mislead the mess detection (PR #95)\r\n- Some rare 'space' characters could trip up the UnprintablePlugin/Mess detection (PR #96)\r\n- The MANIFEST.in was not exhaustive (PR #78)\r\n\r\n## [2.0.4](https://github.com/Ousret/charset_normalizer/compare/2.0.3...2.0.4) (2021-07-30)\r\n### Fixed\r\n- The CLI no longer raise an unexpected exception when no encoding has been found (PR #70)\r\n- Fix accessing the 'alphabets' property when the payload contains surrogate characters (PR #68)\r\n- The logger could mislead (explain=True) on detected languages and the impact of one MBCS match (PR #72)\r\n- Submatch factoring could be wrong in rare edge cases (PR #72)\r\n- Multiple files given to the CLI were ignored when publishing results to STDOUT. (After the first path) (PR #72)\r\n- Fix line endings from CRLF to LF for certain project files (PR #67)\r\n\r\n### Changed\r\n- Adjust the MD to lower the sensitivity, thus improving the global detection reliability (PR #69 #76)\r\n- Allow fallback on specified encoding if any (PR #71)\r\n\r\n## [2.0.3](https://github.com/Ousret/charset_normalizer/compare/2.0.2...2.0.3) (2021-07-16)\r\n### Changed\r\n- Part of the detection mechanism has been improved to be less sensitive, resulting in more accurate detection results. Especially ASCII. (PR #63)\r\n- According to the community wishes, the detection will fall back on ASCII or UTF-8 in a last-resort case. (PR #64)\r\n\r\n## [2.0.2](https://github.com/Ousret/charset_normalizer/compare/2.0.1...2.0.2) (2021-07-15)\r\n### Fixed\r\n- Empty/Too small JSON payload miss-detection fixed. Report from [@tseaver](https://github.com/tseaver) (PR #59) \r\n\r\n### Changed\r\n- Don't inject unicodedata2 into sys.modules from [@akx](https://github.com/akx) (PR #57)\r\n\r\n## [2.0.1](https://github.com/Ousret/charset_normalizer/compare/2.0.0...2.0.1) (2021-07-13)\r\n### Fixed\r\n- Make it work where there isn't a filesystem available, dropping assets frequencies.json. Report from [@sethmlarson](https://github.com/sethmlarson). (PR #55)\r\n- Using explain=False permanently disable the verbose output in the current runtime (PR #47)\r\n- One log entry (language target preemptive) was not show in logs when using explain=True (PR #47)\r\n- Fix undesired exception (ValueError) on getitem of instance CharsetMatches (PR #52)\r\n\r\n### Changed\r\n- Public function normalize default args values were not aligned with from_bytes (PR #53)\r\n\r\n### Added\r\n- You may now use charset aliases in cp_isolation and cp_exclusion arguments (PR #47)\r\n\r\n## [2.0.0](https://github.com/Ousret/charset_normalizer/compare/1.4.1...2.0.0) (2021-07-02)\r\n### Changed\r\n- 4x to 5 times faster than the previous 1.4.0 release. At least 2x faster than Chardet.\r\n- Accent has been made on UTF-8 detection, should perform rather instantaneous.\r\n- The backward compatibility with Chardet has been greatly improved. The legacy detect function returns an identical charset name whenever possible.\r\n- The detection mechanism has been slightly improved, now Turkish content is detected correctly (most of the time)\r\n- The program has been rewritten to ease the readability and maintainability. (+Using static typing)+\r\n- utf_7 detection has been reinstated.\r\n\r\n### Removed\r\n- This package no longer require anything when used with Python 3.5 (Dropped cached_property)\r\n- Removed support for these languages: Catalan, Esperanto, Kazakh, Baque, Volapük, Azeri, Galician, Nynorsk, Macedonian, and Serbocroatian.\r\n- The exception hook on UnicodeDecodeError has been removed.\r\n\r\n### Deprecated\r\n- Methods coherence_non_latin, w_counter, chaos_secondary_pass of the class CharsetMatch are now deprecated and scheduled for removal in v3.0\r\n\r\n### Fixed\r\n- The CLI output used the relative path of the file(s). Should be absolute.\r\n\r\n## [1.4.1](https://github.com/Ousret/charset_normalizer/compare/1.4.0...1.4.1) (2021-05-28)\r\n### Fixed\r\n- Logger configuration/usage no longer conflict with others (PR #44)\r\n\r\n## [1.4.0](https://github.com/Ousret/charset_normalizer/compare/1.3.9...1.4.0) (2021-05-21)\r\n### Removed\r\n- Using standard logging instead of using the package loguru.\r\n- Dropping nose test framework in favor of the maintained pytest.\r\n- Choose to not use dragonmapper package to help with gibberish Chinese/CJK text.\r\n- Require cached_property only for Python 3.5 due to constraint. Dropping for every other interpreter version.\r\n- Stop support for UTF-7 that does not contain a SIG.\r\n- Dropping PrettyTable, replaced with pure JSON output in CLI.\r\n\r\n### Fixed\r\n- BOM marker in a CharsetNormalizerMatch instance could be False in rare cases even if obviously present. Due to the sub-match factoring process.\r\n- Not searching properly for the BOM when trying utf32/16 parent codec.\r\n\r\n### Changed\r\n- Improving the package final size by compressing frequencies.json.\r\n- Huge improvement over the larges payload.\r\n\r\n### Added\r\n- CLI now produces JSON consumable output.\r\n- Return ASCII if given sequences fit. Given reasonable confidence.\r\n\r\n## [1.3.9](https://github.com/Ousret/charset_normalizer/compare/1.3.8...1.3.9) (2021-05-13)\r\n\r\n### Fixed\r\n- In some very rare cases, you may end up getting encode/decode errors due to a bad bytes payload (PR #40)\r\n\r\n## [1.3.8](https://github.com/Ousret/charset_normalizer/compare/1.3.7...1.3.8) (2021-05-12)\r\n\r\n### Fixed\r\n- Empty given payload for detection may cause an exception if trying to access the `alphabets` property. (PR #39)\r\n\r\n## [1.3.7](https://github.com/Ousret/charset_normalizer/compare/1.3.6...1.3.7) (2021-05-12)\r\n\r\n### Fixed\r\n- The legacy detect function should return UTF-8-SIG if sig is present in the payload. (PR #38)\r\n\r\n## [1.3.6](https://github.com/Ousret/charset_normalizer/compare/1.3.5...1.3.6) (2021-02-09)\r\n\r\n### Changed\r\n- Amend the previous release to allow prettytable 2.0 (PR #35)\r\n\r\n## [1.3.5](https://github.com/Ousret/charset_normalizer/compare/1.3.4...1.3.5) (2021-02-08)\r\n\r\n### Fixed\r\n- Fix error while using the package with a python pre-release interpreter (PR #33)\r\n\r\n### Changed\r\n- Dependencies refactoring, constraints revised.\r\n\r\n### Added\r\n- Add python 3.9 and 3.10 to the supported interpreters\r\n\r\nMIT License\r\n\r\nCopyright (c) 2019 TAHRI Ahmed R.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "encoding",
          "charset",
          "charset-detector",
          "detector",
          "normalization",
          "unicode",
          "chardet",
          "detect"
        ],
        "home_page": "https://github.com/Ousret/charset_normalizer",
        "author": "Ahmed TAHRI",
        "author_email": "ahmed.tahri@cloudnursery.dev",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: MIT License",
          "Intended Audience :: Developers",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Text Processing :: Linguistic",
          "Topic :: Utilities",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.7.0",
        "project_url": [
          "Bug Reports, https://github.com/Ousret/charset_normalizer/issues",
          "Documentation, https://charset-normalizer.readthedocs.io/en/latest"
        ],
        "provides_extra": [
          "unicode_backport"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/af/df/c220c1be23d1f0ee55f4d1589203936cfa221f95ac5d1b1b342109c1143e/cryptography-42.0.4-cp39-abi3-win_amd64.whl",
        "archive_info": {
          "hash": "sha256=a0298bdc6e98ca21382afe914c642620370ce0470a01e1bef6dd9b5354c36854",
          "hashes": {
            "sha256": "a0298bdc6e98ca21382afe914c642620370ce0470a01e1bef6dd9b5354c36854"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "cryptography",
        "version": "42.0.4",
        "summary": "cryptography is a package which provides cryptographic recipes and primitives to Python developers.",
        "description": "pyca/cryptography\r\n=================\r\n\r\n.. image:: https://img.shields.io/pypi/v/cryptography.svg\r\n    :target: https://pypi.org/project/cryptography/\r\n    :alt: Latest Version\r\n\r\n.. image:: https://readthedocs.org/projects/cryptography/badge/?version=latest\r\n    :target: https://cryptography.io\r\n    :alt: Latest Docs\r\n\r\n.. image:: https://github.com/pyca/cryptography/workflows/CI/badge.svg?branch=main\r\n    :target: https://github.com/pyca/cryptography/actions?query=workflow%3ACI+branch%3Amain\r\n\r\n\r\n``cryptography`` is a package which provides cryptographic recipes and\r\nprimitives to Python developers. Our goal is for it to be your \"cryptographic\r\nstandard library\". It supports Python 3.7+ and PyPy3 7.3.11+.\r\n\r\n``cryptography`` includes both high level recipes and low level interfaces to\r\ncommon cryptographic algorithms such as symmetric ciphers, message digests, and\r\nkey derivation functions. For example, to encrypt something with\r\n``cryptography``'s high level symmetric encryption recipe:\r\n\r\n.. code-block:: pycon\r\n\r\n    >>> from cryptography.fernet import Fernet\r\n    >>> # Put this somewhere safe!\r\n    >>> key = Fernet.generate_key()\r\n    >>> f = Fernet(key)\r\n    >>> token = f.encrypt(b\"A really secret message. Not for prying eyes.\")\r\n    >>> token\r\n    b'...'\r\n    >>> f.decrypt(token)\r\n    b'A really secret message. Not for prying eyes.'\r\n\r\nYou can find more information in the `documentation`_.\r\n\r\nYou can install ``cryptography`` with:\r\n\r\n.. code-block:: console\r\n\r\n    $ pip install cryptography\r\n\r\nFor full details see `the installation documentation`_.\r\n\r\nDiscussion\r\n~~~~~~~~~~\r\n\r\nIf you run into bugs, you can file them in our `issue tracker`_.\r\n\r\nWe maintain a `cryptography-dev`_ mailing list for development discussion.\r\n\r\nYou can also join ``#pyca`` on ``irc.libera.chat`` to ask questions or get\r\ninvolved.\r\n\r\nSecurity\r\n~~~~~~~~\r\n\r\nNeed to report a security issue? Please consult our `security reporting`_\r\ndocumentation.\r\n\r\n\r\n.. _`documentation`: https://cryptography.io/\r\n.. _`the installation documentation`: https://cryptography.io/en/latest/installation/\r\n.. _`issue tracker`: https://github.com/pyca/cryptography/issues\r\n.. _`cryptography-dev`: https://mail.python.org/mailman/listinfo/cryptography-dev\r\n.. _`security reporting`: https://cryptography.io/en/latest/security/\r\n",
        "description_content_type": "text/x-rst",
        "author_email": "The Python Cryptographic Authority and individual contributors <cryptography-dev@python.org>",
        "license": "Apache-2.0 OR BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "License :: OSI Approved :: BSD License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX",
          "Operating System :: POSIX :: BSD",
          "Operating System :: POSIX :: Linux",
          "Operating System :: Microsoft :: Windows",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Security :: Cryptography"
        ],
        "requires_dist": [
          "cffi >=1.12 ; platform_python_implementation != \"PyPy\"",
          "sphinx >=5.3.0 ; extra == 'docs'",
          "sphinx-rtd-theme >=1.1.1 ; extra == 'docs'",
          "pyenchant >=1.6.11 ; extra == 'docstest'",
          "readme-renderer ; extra == 'docstest'",
          "sphinxcontrib-spelling >=4.0.1 ; extra == 'docstest'",
          "nox ; extra == 'nox'",
          "ruff ; extra == 'pep8test'",
          "mypy ; extra == 'pep8test'",
          "check-sdist ; extra == 'pep8test'",
          "click ; extra == 'pep8test'",
          "build ; extra == 'sdist'",
          "bcrypt >=3.1.5 ; extra == 'ssh'",
          "pytest >=6.2.0 ; extra == 'test'",
          "pytest-benchmark ; extra == 'test'",
          "pytest-cov ; extra == 'test'",
          "pytest-xdist ; extra == 'test'",
          "pretend ; extra == 'test'",
          "certifi ; extra == 'test'",
          "pytest-randomly ; extra == 'test-randomorder'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "homepage, https://github.com/pyca/cryptography",
          "documentation, https://cryptography.io/",
          "source, https://github.com/pyca/cryptography/",
          "issues, https://github.com/pyca/cryptography/issues",
          "changelog, https://cryptography.io/en/latest/changelog/"
        ],
        "provides_extra": [
          "docs",
          "docstest",
          "nox",
          "pep8test",
          "sdist",
          "ssh",
          "test",
          "test-randomorder"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/fd/5b/8f0c4a5bb9fd491c277c21eff7ccae71b47d43c4446c9d0c6cff2fe8c2c4/gitdb-4.0.11-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=81a3407ddd2ee8df444cbacea00e2d038e40150acfa3001696fe0dcf1d3adfa4",
          "hashes": {
            "sha256": "81a3407ddd2ee8df444cbacea00e2d038e40150acfa3001696fe0dcf1d3adfa4"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "gitdb",
        "version": "4.0.11",
        "summary": "Git Object Database",
        "description": "GitDB is a pure-Python git object database\n",
        "home_page": "https://github.com/gitpython-developers/gitdb",
        "author": "Sebastian Thiel",
        "author_email": "byronimo@gmail.com",
        "license": "BSD License",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Operating System :: POSIX",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: MacOS :: MacOS X",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3 :: Only"
        ],
        "requires_dist": [
          "smmap <6,>=3.0.1"
        ],
        "requires_python": ">=3.7"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/67/c7/995360c87dd74e27539ccbfecddfb58e08f140d849fcd7f35d2ed1a5f80f/GitPython-3.1.42-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=1bf9cd7c9e7255f77778ea54359e54ac22a72a5b51288c457c881057b7bb9ecd",
          "hashes": {
            "sha256": "1bf9cd7c9e7255f77778ea54359e54ac22a72a5b51288c457c881057b7bb9ecd"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "GitPython",
        "version": "3.1.42",
        "summary": "GitPython is a Python library used to interact with Git repositories",
        "description": "![Python package](https://github.com/gitpython-developers/GitPython/workflows/Python%20package/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/gitpython/badge/?version=stable)](https://readthedocs.org/projects/gitpython/?badge=stable)\n[![Packaging status](https://repology.org/badge/tiny-repos/python:gitpython.svg)](https://repology.org/metapackage/python:gitpython/versions)\n\n## [Gitoxide](https://github.com/Byron/gitoxide): A peek into the future…\n\nI started working on GitPython in 2009, back in the days when Python was 'my thing' and I had great plans with it.\nOf course, back in the days, I didn't really know what I was doing and this shows in many places. Somewhat similar to\nPython this happens to be 'good enough', but at the same time is deeply flawed and broken beyond repair.\n\nBy now, GitPython is widely used and I am sure there is a good reason for that, it's something to be proud of and happy about.\nThe community is maintaining the software and is keeping it relevant for which I am absolutely grateful. For the time to come I am happy to continue maintaining GitPython, remaining hopeful that one day it won't be needed anymore.\n\nMore than 15 years after my first meeting with 'git' I am still in excited about it, and am happy to finally have the tools and\nprobably the skills to scratch that itch of mine: implement `git` in a way that makes tool creation a piece of cake for most.\n\nIf you like the idea and want to learn more, please head over to [gitoxide](https://github.com/Byron/gitoxide), an\nimplementation of 'git' in [Rust](https://www.rust-lang.org).\n\n*(Please note that `gitoxide` is not currently available for use in Python, and that Rust is required)*\n\n## GitPython\n\nGitPython is a python library used to interact with git repositories, high-level like git-porcelain,\nor low-level like git-plumbing.\n\nIt provides abstractions of git objects for easy access of repository data often backed by calling the `git`\ncommand-line program.\n\n### DEVELOPMENT STATUS\n\nThis project is in **maintenance mode**, which means that\n\n- …there will be no feature development, unless these are contributed\n- …there will be no bug fixes, unless they are relevant to the safety of users, or contributed\n- …issues will be responded to with waiting times of up to a month\n\nThe project is open to contributions of all kinds, as well as new maintainers.\n\n### REQUIREMENTS\n\nGitPython needs the `git` executable to be installed on the system and available in your `PATH` for most operations.\nIf it is not in your `PATH`, you can help GitPython find it by setting\nthe `GIT_PYTHON_GIT_EXECUTABLE=<path/to/git>` environment variable.\n\n- Git (1.7.x or newer)\n- Python >= 3.7\n\nThe list of dependencies are listed in `./requirements.txt` and `./test-requirements.txt`.\nThe installer takes care of installing them for you.\n\n### INSTALL\n\nGitPython and its required package dependencies can be installed in any of the following ways, all of which should typically be done in a [virtual environment](https://docs.python.org/3/tutorial/venv.html).\n\n#### From PyPI\n\nTo obtain and install a copy [from PyPI](https://pypi.org/project/GitPython/), run:\n\n```bash\npip install GitPython\n```\n\n(A distribution package can also be downloaded for manual installation at [the PyPI page](https://pypi.org/project/GitPython/).)\n\n#### From downloaded source code\n\nIf you have downloaded the source code, run this from inside the unpacked `GitPython` directory:\n\n```bash\npip install .\n```\n\n#### By cloning the source code repository\n\nTo clone the [the GitHub repository](https://github.com/gitpython-developers/GitPython) from source to work on the code, you can do it like so:\n\n```bash\ngit clone https://github.com/gitpython-developers/GitPython\ncd GitPython\n./init-tests-after-clone.sh\n```\n\nOn Windows, `./init-tests-after-clone.sh` can be run in a Git Bash shell.\n\nIf you are cloning [your own fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks), then replace the above `git clone` command with one that gives the URL of your fork. Or use this [`gh`](https://cli.github.com/) command (assuming you have `gh` and your fork is called `GitPython`):\n\n```bash\ngh repo clone GitPython\n```\n\nHaving cloned the repo, create and activate your [virtual environment](https://docs.python.org/3/tutorial/venv.html).\n\nThen make an [editable install](https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs):\n\n```bash\npip install -e \".[test]\"\n```\n\nIn the less common case that you do not want to install test dependencies, `pip install -e .` can be used instead.\n\n#### With editable *dependencies* (not preferred, and rarely needed)\n\nIn rare cases, you may want to work on GitPython and one or both of its [gitdb](https://github.com/gitpython-developers/gitdb) and [smmap](https://github.com/gitpython-developers/smmap) dependencies at the same time, with changes in your local working copy of gitdb or smmap immediatley reflected in the behavior of your local working copy of GitPython. This can be done by making editable installations of those dependencies in the same virtual environment where you install GitPython.\n\nIf you want to do that *and* you want the versions in GitPython's git submodules to be used, then pass `-e git/ext/gitdb` and/or `-e git/ext/gitdb/gitdb/ext/smmap` to `pip install`. This can be done in any order, and in separate `pip install` commands or the same one, so long as `-e` appears before *each* path. For example, you can install GitPython, gitdb, and smmap editably in the currently active virtual environment this way:\n\n```bash\npip install -e \".[test]\" -e git/ext/gitdb -e git/ext/gitdb/gitdb/ext/smmap\n```\n\nThe submodules must have been cloned for that to work, but that will already be the case if you have run `./init-tests-after-clone.sh`. You can use `pip list` to check which packages are installed editably and which are installed normally.\n\nTo reiterate, this approach should only rarely be used. For most development it is preferable to allow the gitdb and smmap dependencices to be retrieved automatically from PyPI in their latest stable packaged versions.\n\n### Limitations\n\n#### Leakage of System Resources\n\nGitPython is not suited for long-running processes (like daemons) as it tends to\nleak system resources. It was written in a time where destructors (as implemented\nin the `__del__` method) still ran deterministically.\n\nIn case you still want to use it in such a context, you will want to search the\ncodebase for `__del__` implementations and call these yourself when you see fit.\n\nAnother way assure proper cleanup of resources is to factor out GitPython into a\nseparate process which can be dropped periodically.\n\n#### Windows support\n\nSee [Issue #525](https://github.com/gitpython-developers/GitPython/issues/525).\n\n### RUNNING TESTS\n\n_Important_: Right after cloning this repository, please be sure to have executed\nthe `./init-tests-after-clone.sh` script in the repository root. Otherwise\nyou will encounter test failures.\n\n#### Install test dependencies\n\nEnsure testing libraries are installed. This is taken care of already if you installed with:\n\n```bash\npip install -e \".[test]\"\n```\n\nOtherwise, you can run:\n\n```bash\npip install -r test-requirements.txt\n```\n\n#### Test commands\n\nTo test, run:\n\n```bash\npytest\n```\n\nTo lint, and apply automatic code formatting, run:\n\n```bash\npre-commit run --all-files\n```\n\n- Linting without modifying code can be done with: `make lint`\n- Auto-formatting without other lint checks can be done with: `black .`\n\nTo typecheck, run:\n\n```bash\nmypy -p git\n```\n\n#### CI (and tox)\n\nThe same linting, and running tests on all the different supported Python versions, will be performed:\n\n- Upon submitting a pull request.\n- On each push, *if* you have a fork with GitHub Actions enabled.\n- Locally, if you run [`tox`](https://tox.wiki/) (this skips any Python versions you don't have installed).\n\n#### Configuration files\n\nSpecific tools:\n\n- Configurations for `mypy`, `pytest`, `coverage.py`, and `black` are in `./pyproject.toml`.\n- Configuration for `flake8` is in the `./.flake8` file.\n\nOrchestration tools:\n\n- Configuration for `pre-commit` is in the `./.pre-commit-config.yaml` file.\n- Configuration for `tox` is in `./tox.ini`.\n- Configuration for GitHub Actions (CI) is in files inside `./.github/workflows/`.\n\n### Contributions\n\nPlease have a look at the [contributions file][contributing].\n\n### INFRASTRUCTURE\n\n- [User Documentation](http://gitpython.readthedocs.org)\n- [Questions and Answers](http://stackexchange.com/filters/167317/gitpython)\n- Please post on Stack Overflow and use the `gitpython` tag\n- [Issue Tracker](https://github.com/gitpython-developers/GitPython/issues)\n  - Post reproducible bugs and feature requests as a new issue.\n    Please be sure to provide the following information if posting bugs:\n    - GitPython version (e.g. `import git; git.__version__`)\n    - Python version (e.g. `python --version`)\n    - The encountered stack-trace, if applicable\n    - Enough information to allow reproducing the issue\n\n### How to make a new release\n\n1. Update/verify the **version** in the `VERSION` file.\n2. Update/verify that the `doc/source/changes.rst` changelog file was updated. It should include a link to the forthcoming release page: `https://github.com/gitpython-developers/GitPython/releases/tag/<version>`\n3. Commit everything.\n4. Run `git tag -s <version>` to tag the version in Git.\n5. _Optionally_ create and activate a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment). (Then the next step can install `build` and `twine`.)\n6. Run `make release`.\n7. Go to [GitHub Releases](https://github.com/gitpython-developers/GitPython/releases) and publish a new one with the recently pushed tag. Generate the changelog.\n\n### Projects using GitPython\n\n- [PyDriller](https://github.com/ishepard/pydriller)\n- [Kivy Designer](https://github.com/kivy/kivy-designer)\n- [Prowl](https://github.com/nettitude/Prowl)\n- [Python Taint](https://github.com/python-security/pyt)\n- [Buster](https://github.com/axitkhurana/buster)\n- [git-ftp](https://github.com/ezyang/git-ftp)\n- [Git-Pandas](https://github.com/wdm0006/git-pandas)\n- [PyGitUp](https://github.com/msiemens/PyGitUp)\n- [PyJFuzz](https://github.com/mseclab/PyJFuzz)\n- [Loki](https://github.com/Neo23x0/Loki)\n- [Omniwallet](https://github.com/OmniLayer/omniwallet)\n- [GitViper](https://github.com/BeayemX/GitViper)\n- [Git Gud](https://github.com/bthayer2365/git-gud)\n\n### LICENSE\n\n[3-Clause BSD License](https://opensource.org/license/bsd-3-clause/), also known as the New BSD License. See the [LICENSE file][license].\n\n[contributing]: https://github.com/gitpython-developers/GitPython/blob/main/CONTRIBUTING.md\n[license]: https://github.com/gitpython-developers/GitPython/blob/main/LICENSE\n",
        "description_content_type": "text/markdown",
        "home_page": "https://github.com/gitpython-developers/GitPython",
        "author": "Sebastian Thiel, Michael Trier",
        "author_email": "byronimo@gmail.com, mtrier@gmail.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Operating System :: POSIX",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: MacOS :: MacOS X",
          "Typing :: Typed",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12"
        ],
        "requires_dist": [
          "gitdb <5,>=4.0.1",
          "typing-extensions >=3.7.4.3 ; python_version < \"3.8\"",
          "black ; extra == 'test'",
          "coverage[toml] ; extra == 'test'",
          "ddt !=1.4.3,>=1.1.1 ; extra == 'test'",
          "mypy ; extra == 'test'",
          "pre-commit ; extra == 'test'",
          "pytest >=7.3.1 ; extra == 'test'",
          "pytest-cov ; extra == 'test'",
          "pytest-instafail ; extra == 'test'",
          "pytest-mock ; extra == 'test'",
          "pytest-sugar ; extra == 'test'",
          "mock ; (python_version < \"3.8\") and extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c2/e7/a82b05cf63a603df6e68d59ae6a68bf5064484a0718ea5033660af4b54a9/idna-3.6-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f",
          "hashes": {
            "sha256": "c05567e9c24a6b9faaa835c4821bad0590fbb9d5779e7caa6e1cc4978e7eb24f"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "idna",
        "version": "3.6",
        "summary": "Internationalized Domain Names in Applications (IDNA)",
        "description": "Internationalized Domain Names in Applications (IDNA)\n=====================================================\n\nSupport for the Internationalized Domain Names in\nApplications (IDNA) protocol as specified in `RFC 5891\n<https://tools.ietf.org/html/rfc5891>`_. This is the latest version of\nthe protocol and is sometimes referred to as “IDNA 2008”.\n\nThis library also provides support for Unicode Technical\nStandard 46, `Unicode IDNA Compatibility Processing\n<https://unicode.org/reports/tr46/>`_.\n\nThis acts as a suitable replacement for the “encodings.idna”\nmodule that comes with the Python standard library, but which\nonly supports the older superseded IDNA specification (`RFC 3490\n<https://tools.ietf.org/html/rfc3490>`_).\n\nBasic functions are simply executed:\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\n\nInstallation\n------------\n\nThis package is available for installation from PyPI:\n\n.. code-block:: bash\n\n    $ python3 -m pip install idna\n\n\nUsage\n-----\n\nFor typical usage, the ``encode`` and ``decode`` functions will take a\ndomain name argument and perform a conversion to A-labels or U-labels\nrespectively.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\nYou may use the codec encoding and decoding methods using the\n``idna.codec`` module:\n\n.. code-block:: pycon\n\n    >>> import idna.codec\n    >>> print('домен.испытание'.encode('idna2008'))\n    b'xn--d1acufc.xn--80akhbyknj4f'\n    >>> print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna2008'))\n    домен.испытание\n\nConversions can be applied at a per-label basis using the ``ulabel`` or\n``alabel`` functions if necessary:\n\n.. code-block:: pycon\n\n    >>> idna.alabel('测试')\n    b'xn--0zwm56d'\n\nCompatibility Mapping (UTS #46)\n+++++++++++++++++++++++++++++++\n\nAs described in `RFC 5895 <https://tools.ietf.org/html/rfc5895>`_, the\nIDNA specification does not normalize input from different potential\nways a user may input a domain name. This functionality, known as\na “mapping”, is considered by the specification to be a local\nuser-interface issue distinct from IDNA conversion functionality.\n\nThis library provides one such mapping that was developed by the\nUnicode Consortium. Known as `Unicode IDNA Compatibility Processing\n<https://unicode.org/reports/tr46/>`_, it provides for both a regular\nmapping for typical applications, as well as a transitional mapping to\nhelp migrate from older IDNA 2003 applications.\n\nFor example, “Königsgäßchen” is not a permissible label as *LATIN\nCAPITAL LETTER K* is not allowed (nor are capital letters in general).\nUTS 46 will convert this into lower case prior to applying the IDNA\nconversion.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('Königsgäßchen')\n    ...\n    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of 'Königsgäßchen' not allowed\n    >>> idna.encode('Königsgäßchen', uts46=True)\n    b'xn--knigsgchen-b4a3dun'\n    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))\n    königsgäßchen\n\nTransitional processing provides conversions to help transition from\nthe older 2003 standard to the current standard. For example, in the\noriginal IDNA specification, the *LATIN SMALL LETTER SHARP S* (ß) was\nconverted into two *LATIN SMALL LETTER S* (ss), whereas in the current\nIDNA specification this conversion is not performed.\n\n.. code-block:: pycon\n\n    >>> idna.encode('Königsgäßchen', uts46=True, transitional=True)\n    'xn--knigsgsschen-lcb0w'\n\nImplementers should use transitional processing with caution, only in\nrare cases where conversion from legacy labels to current labels must be\nperformed (i.e. IDNA implementations that pre-date 2008). For typical\napplications that just need to convert labels, transitional processing\nis unlikely to be beneficial and could produce unexpected incompatible\nresults.\n\n``encodings.idna`` Compatibility\n++++++++++++++++++++++++++++++++\n\nFunction calls from the Python built-in ``encodings.idna`` module are\nmapped to their IDNA 2008 equivalents using the ``idna.compat`` module.\nSimply substitute the ``import`` clause in your code to refer to the new\nmodule name.\n\nExceptions\n----------\n\nAll errors raised during the conversion following the specification\nshould raise an exception derived from the ``idna.IDNAError`` base\nclass.\n\nMore specific exceptions that may be generated as ``idna.IDNABidiError``\nwhen the error reflects an illegal combination of left-to-right and\nright-to-left characters in a label; ``idna.InvalidCodepoint`` when\na specific codepoint is an illegal character in an IDN label (i.e.\nINVALID); and ``idna.InvalidCodepointContext`` when the codepoint is\nillegal based on its positional context (i.e. it is CONTEXTO or CONTEXTJ\nbut the contextual requirements are not satisfied.)\n\nBuilding and Diagnostics\n------------------------\n\nThe IDNA and UTS 46 functionality relies upon pre-calculated lookup\ntables for performance. These tables are derived from computing against\neligibility criteria in the respective standards. These tables are\ncomputed using the command-line script ``tools/idna-data``.\n\nThis tool will fetch relevant codepoint data from the Unicode repository\nand perform the required calculations to identify eligibility. There are\nthree main modes:\n\n* ``idna-data make-libdata``. Generates ``idnadata.py`` and\n  ``uts46data.py``, the pre-calculated lookup tables used for IDNA and\n  UTS 46 conversions. Implementers who wish to track this library against\n  a different Unicode version may use this tool to manually generate a\n  different version of the ``idnadata.py`` and ``uts46data.py`` files.\n\n* ``idna-data make-table``. Generate a table of the IDNA disposition\n  (e.g. PVALID, CONTEXTJ, CONTEXTO) in the format found in Appendix\n  B.1 of RFC 5892 and the pre-computed tables published by `IANA\n  <https://www.iana.org/>`_.\n\n* ``idna-data U+0061``. Prints debugging output on the various\n  properties associated with an individual Unicode codepoint (in this\n  case, U+0061), that are used to assess the IDNA and UTS 46 status of a\n  codepoint. This is helpful in debugging or analysis.\n\nThe tool accepts a number of arguments, described using ``idna-data\n-h``. Most notably, the ``--version`` argument allows the specification\nof the version of Unicode to be used in computing the table data. For\nexample, ``idna-data --version 9.0.0 make-libdata`` will generate\nlibrary data against Unicode 9.0.0.\n\n\nAdditional Notes\n----------------\n\n* **Packages**. The latest tagged release version is published in the\n  `Python Package Index <https://pypi.org/project/idna/>`_.\n\n* **Version support**. This library supports Python 3.5 and higher.\n  As this library serves as a low-level toolkit for a variety of\n  applications, many of which strive for broad compatibility with older\n  Python versions, there is no rush to remove older interpreter support.\n  Removing support for older versions should be well justified in that the\n  maintenance burden has become too high.\n\n* **Python 2**. Python 2 is supported by version 2.x of this library.\n  While active development of the version 2.x series has ended, notable\n  issues being corrected may be backported to 2.x. Use \"idna<3\" in your\n  requirements file if you need this library for a Python 2 application.\n\n* **Testing**. The library has a test suite based on each rule of the\n  IDNA specification, as well as tests that are provided as part of the\n  Unicode Technical Standard 46, `Unicode IDNA Compatibility Processing\n  <https://unicode.org/reports/tr46/>`_.\n\n* **Emoji**. It is an occasional request to support emoji domains in\n  this library. Encoding of symbols like emoji is expressly prohibited by\n  the technical standard IDNA 2008 and emoji domains are broadly phased\n  out across the domain industry due to associated security risks. For\n  now, applications that need to support these non-compliant labels\n  may wish to consider trying the encode/decode operation in this library\n  first, and then falling back to using `encodings.idna`. See `the Github\n  project <https://github.com/kjd/idna/issues/18>`_ for more discussion.\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Kim Davies <kim+pypi@gumleaf.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: Name Service (DNS)",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Utilities"
        ],
        "requires_python": ">=3.5",
        "project_url": [
          "Changelog, https://github.com/kjd/idna/blob/master/HISTORY.rst",
          "Issue tracker, https://github.com/kjd/idna/issues",
          "Source, https://github.com/kjd/idna"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b6/85/7882d311924cbcfc70b1890780763e36ff0b140c7e51c110fc59a532f087/isodate-0.6.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=0751eece944162659049d35f4f549ed815792b38793f07cf73381c1c87cbed96",
          "hashes": {
            "sha256": "0751eece944162659049d35f4f549ed815792b38793f07cf73381c1c87cbed96"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "isodate",
        "version": "0.6.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "An ISO 8601 date/time/duration parser and formatter",
        "description": "\nISO 8601 date/time parser\n=========================\n\n.. image:: https://travis-ci.org/gweis/isodate.svg?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.svg?branch=master\n    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt: Coveralls\n.. image:: https://img.shields.io/pypi/v/isodate.svg\n    :target: https://pypi.python.org/pypi/isodate/          \n    :alt: Latest Version\n.. image:: https://img.shields.io/pypi/l/isodate.svg\n    :target: https://pypi.python.org/pypi/isodate/          \n    :alt: License\n\n\nThis module implements ISO 8601 date, time and duration parsing.\nThe implementation follows ISO8601:2004 standard, and implements only\ndate/time representations mentioned in the standard. If something is not\nmentioned there, then it is treated as non existent, and not as an allowed\noption.\n\nFor instance, ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this module to support 2 digit years. (while it may still\nbe valid as ISO date, because it is not explicitly forbidden.)\nAnother example is, when no time zone information is given for a time,\nthen it should be interpreted as local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*, it is not possible to convert\nall possible ISO 8601 dates/times. For instance, dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime* classes. Additionally\nfractional seconds are limited to microseconds. That means if the parser finds\nfor instance nanoseconds it will round it to microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four parsing methods available.\n   * parse_time:\n        parses an ISO 8601 time string into a *time* object\n   * parse_date:\n        parses an ISO 8601 date string into a *date* object\n   * parse_datetime:\n        parses an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n        object.\n   * parse_tzinfo:\n        parses the time zone info part of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows to define durations in years and months, and *timedelta*\ndoes not handle years and months, this module provides a *Duration* class,\nwhich can be used almost like a *timedelta* object (with some limitations).\nHowever, a *Duration* object can be converted into a *timedelta* object.\n\nThere are also ISO formatting methods for all supported data types. Each\n*xxx_isoformat* method accepts a format parameter. The default format is\nalways the ISO 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\n    * time_isoformat:\n        Intended to create ISO time strings with default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended to create ISO date strings with default format\n        *yyyy-mm-dd*.\n    * datetime_isoformat:\n        Intended to create ISO date-time strings with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n        Intended to create ISO duration strings with default format\n        *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n        A re-implementation mostly compatible with Python's *strftime*, but\n        supports only those format strings, which can also be used for dates\n        prior 1900. This method also understands how to format *datetime* and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis module can easily be installed with Python standard installation methods.\n\nEither use *python setup.py install* or in case you have *setuptools* or\n*distribute* available, you can also use *easy_install*.\n\nLimitations:\n------------\n\n   * The parser accepts several date/time representation which should be invalid\n     according to ISO 8601 standard.\n\n     1. for date and time together, this parser accepts a mixture of basic and extended format.\n        e.g. the date could be in basic format, while the time is accepted in extended format.\n        It also allows short dates and times in date-time strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th century results in a date of\n        1901-01-01.\n     3. negative *Duration* and *timedelta* value are not fully supported yet.\n\nFurther information:\n--------------------\n\nThe doc strings and unit tests should provide rather detailed information about\nthe methods and their limitations.\n\nThe source release provides a *setup.py* script,\nwhich can be used to run the unit tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\nCHANGES\n=======\n\n0.6.1 (2021-12-13)\n------------------\n\n- support python 3.10 ()\n- last version to support py 2.7\n\n\n0.6.0 (2017-10-13)\n------------------\n\n- support incomplete month date (Fabien Loffredo)\n- rely on duck typing when doing duration maths\n- support ':' as separator in fractional time zones (usrenmae)\n\n\n0.5.4 (2015-08-06)\n------------------\n\n- Fix parsing of Periods (Fabien Bochu)\n- Make Duration objects hashable (Geoffrey Fairchild)\n- Add multiplication to duration (Reinoud Elhorst)\n\n\n0.5.1 (2014-11-07)\n------------------\n\n- fixed pickling of Duration objects\n- raise ISO8601Error when there is no 'T' separator in datetime strings (Adrian Coveney)\n\n\n0.5.0 (2014-02-23)\n------------------\n\n- ISO8601Error are subclasses of ValueError now (Michael Hrivnak)\n- improve compatibility across various python variants and versions\n- raise exceptions when using fractional years and months in date\n  maths with durations\n- renamed method todatetime on Duraction objects to totimedelta\n\n\n0.4.9 (2012-10-30)\n------------------\n\n- support pickling FixedOffset instances\n- make sure parsed fractional seconds are in microseconds\n- add leading zeros when formattig microseconds (Jarom Loveridge)\n\n\n0.4.8 (2012-05-04)\n------------------\n\n- fixed incompatibility of unittests with python 2.5 and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\n- fixed tzinfo formatting (never pass None into tzinfo.utcoffset())\n\n\n0.4.6 (2012-01-06)\n------------------\n\n- added Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n------------------\n\n- Fixed problem with %P formating and fractions (supplied by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented unary - for Duration (supplied by David Brooks)\n- Output fractional seconds with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n------------------\n\n- fixed bug in comparison between timedelta and Duration.\n- fixed precision problem with microseconds (reported by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601 time zone strings\n- added methods to create ISO 8601 conforming strings\n\n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\nThis to do list contains some thoughts and ideas about missing features, and\nparts to think about, whether to implement them or not. This list is probably\nnot complete.\n\nMissing features:\n-----------------\n\n    * time formating does not allow to create fractional representations.\n    * parser for ISO intervals.\n    * currently microseconds are always padded to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n--------------\n\n    * parse_datetime:\n       - complete documentation to show what this function allows, but ISO forbids.\n         and vice verse.\n       - support other separators between date and time than 'T'\n\n    * parse_date:\n       - yeardigits should be always greater than 4\n       - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n       - alternative formats are not fully supported due to parse_date restrictions\n       - standard duration format is fully supported but not very restrictive.\n\n    * Duration:\n       - support fractional years and month in calculations\n       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n       - refactor to have duration mathematics only at one place.\n       - localize __str__ method (does timedelta do this?)\n       - when is a Duration negative?\n       - normalize Durations. months [00-12] and years ]-inf,+inf[\n\n\n",
        "home_page": "https://github.com/gweis/isodate/",
        "author": "Gerhard Weis",
        "author_email": "gerhard.weis@proclos.com",
        "license": "BSD",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "six"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c0/a3/46ebb1d55aa65c1983f0b96739c84957fbb5be3c55ce34ecbab69afd4242/msal-1.27.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=572d07149b83e7343a85a3bcef8e581167b4ac76befcbbb6eef0c0e19643cdc0",
          "hashes": {
            "sha256": "572d07149b83e7343a85a3bcef8e581167b4ac76befcbbb6eef0c0e19643cdc0"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "msal",
        "version": "1.27.0",
        "summary": "The Microsoft Authentication Library (MSAL) for Python library enables your app to access the Microsoft Cloud by supporting authentication of users with Microsoft Azure Active Directory accounts (AAD) and Microsoft Accounts (MSA) using industry standard OAuth2 and OpenID Connect.",
        "description": "# Microsoft Authentication Library (MSAL) for Python\n\n| `dev` branch | Reference Docs | # of Downloads per different platforms | # of Downloads per recent MSAL versions | Benchmark Diagram |\n|:------------:|:--------------:|:--------------------------------------:|:---------------------------------------:|:-----------------:|\n [![Build status](https://github.com/AzureAD/microsoft-authentication-library-for-python/actions/workflows/python-package.yml/badge.svg?branch=dev)](https://github.com/AzureAD/microsoft-authentication-library-for-python/actions) | [![Documentation Status](https://readthedocs.org/projects/msal-python/badge/?version=latest)](https://msal-python.readthedocs.io/en/latest/?badge=latest) | [![Downloads](https://static.pepy.tech/badge/msal)](https://pypistats.org/packages/msal) | [![Download monthly](https://static.pepy.tech/badge/msal/month)](https://pepy.tech/project/msal) | [📉](https://azuread.github.io/microsoft-authentication-library-for-python/dev/bench/)\n\nThe Microsoft Authentication Library for Python enables applications to integrate with the [Microsoft identity platform](https://aka.ms/aaddevv2). It allows you to sign in users or apps with Microsoft identities ([Azure AD](https://azure.microsoft.com/services/active-directory/), [Microsoft Accounts](https://account.microsoft.com) and [Azure AD B2C](https://azure.microsoft.com/services/active-directory-b2c/) accounts) and obtain tokens to call Microsoft APIs such as [Microsoft Graph](https://graph.microsoft.io/) or your own APIs registered with the Microsoft identity platform. It is built using industry standard OAuth2 and OpenID Connect protocols\n\nNot sure whether this is the SDK you are looking for your app? There are other Microsoft Identity SDKs\n[here](https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Microsoft-Authentication-Client-Libraries).\n\nQuick links:\n\n| [Getting Started](https://learn.microsoft.com/azure/active-directory/develop/web-app-quickstart?pivots=devlang-python)| [Docs](https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki) | [Samples](https://aka.ms/aaddevsamplesv2) | [Support](README.md#community-help-and-support) | [Feedback](https://forms.office.com/r/TMjZkDbzjY) |\n| --- | --- | --- | --- | --- |\n\n## Scenarios supported\n\nClick on the following thumbnail to visit a large map with clickable links to proper samples.\n\n[![Map effect won't work inside github's markdown file, so we have to use a thumbnail here to lure audience to a real static website](https://raw.githubusercontent.com/AzureAD/microsoft-authentication-library-for-python/dev/docs/thumbnail.png)](https://msal-python.readthedocs.io/en/latest/)\n\n## Installation\n\nYou can find MSAL Python on [Pypi](https://pypi.org/project/msal/).\n1. If you haven't already, [install and/or upgrade the pip](https://pip.pypa.io/en/stable/installing/)\n   of your Python environment to a recent version. We tested with pip 18.1.\n2. As usual, just run `pip install msal`.\n\n## Versions\n\nThis library follows [Semantic Versioning](http://semver.org/).\n\nYou can find the changes for each version under\n[Releases](https://github.com/AzureAD/microsoft-authentication-library-for-python/releases).\n\n## Usage\n\nBefore using MSAL Python (or any MSAL SDKs, for that matter), you will have to\n[register your application with the Microsoft identity platform](https://docs.microsoft.com/azure/active-directory/develop/quickstart-v2-register-an-app).\n\nAcquiring tokens with MSAL Python follows this 3-step pattern.\n(Note: That is the high level conceptual pattern.\nThere will be some variations for different flows. They are demonstrated in\n[runnable samples hosted right in this repo](https://github.com/AzureAD/microsoft-authentication-library-for-python/tree/dev/sample).\n)\n\n\n1. MSAL proposes a clean separation between\n   [public client applications, and confidential client applications](https://tools.ietf.org/html/rfc6749#section-2.1).\n   So you will first create either a `PublicClientApplication` or a `ConfidentialClientApplication` instance,\n   and ideally reuse it during the lifecycle of your app. The following example shows a `PublicClientApplication`:\n\n   ```python\n   from msal import PublicClientApplication\n   app = PublicClientApplication(\n       \"your_client_id\",\n       authority=\"https://login.microsoftonline.com/Enter_the_Tenant_Name_Here\")\n   ```\n\n   Later, each time you would want an access token, you start by:\n   ```python\n   result = None  # It is just an initial value. Please follow instructions below.\n   ```\n\n2. The API model in MSAL provides you explicit control on how to utilize token cache.\n   This cache part is technically optional, but we highly recommend you to harness the power of MSAL cache.\n   It will automatically handle the token refresh for you.\n\n   ```python\n   # We now check the cache to see\n   # whether we already have some accounts that the end user already used to sign in before.\n   accounts = app.get_accounts()\n   if accounts:\n       # If so, you could then somehow display these accounts and let end user choose\n       print(\"Pick the account you want to use to proceed:\")\n       for a in accounts:\n           print(a[\"username\"])\n       # Assuming the end user chose this one\n       chosen = accounts[0]\n       # Now let's try to find a token in cache for this account\n       result = app.acquire_token_silent([\"your_scope\"], account=chosen)\n   ```\n\n3. Either there is no suitable token in the cache, or you chose to skip the previous step,\n   now it is time to actually send a request to AAD to obtain a token.\n   There are different methods based on your client type and scenario. Here we demonstrate a placeholder flow.\n\n   ```python\n   if not result:\n       # So no suitable token exists in cache. Let's get a new one from AAD.\n       result = app.acquire_token_by_one_of_the_actual_method(..., scopes=[\"User.Read\"])\n   if \"access_token\" in result:\n       print(result[\"access_token\"])  # Yay!\n   else:\n       print(result.get(\"error\"))\n       print(result.get(\"error_description\"))\n       print(result.get(\"correlation_id\"))  # You may need this when reporting a bug\n   ```\n\nRefer the [Wiki](https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki) pages for more details on the MSAL Python functionality and usage.\n\n## Migrating from ADAL\n\nIf your application is using ADAL Python, we recommend you to update to use MSAL Python. No new feature work will be done in ADAL Python.\n\nSee the [ADAL to MSAL migration](https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Migrate-to-MSAL-Python) guide.\n\n## Roadmap\n\nYou can follow the latest updates and plans for MSAL Python in the [Roadmap](https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Roadmap) published on our Wiki.\n\n## Samples and Documentation\n\nMSAL Python supports multiple [application types and authentication scenarios](https://docs.microsoft.com/azure/active-directory/develop/authentication-flows-app-scenarios).\nThe generic documents on\n[Auth Scenarios](https://docs.microsoft.com/azure/active-directory/develop/authentication-scenarios)\nand\n[Auth protocols](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols)\nare recommended reading.\n\nWe provide a [full suite of sample applications](https://aka.ms/aaddevsamplesv2) and [documentation](https://aka.ms/aaddevv2) to help you get started with learning the Microsoft identity platform.\n\n## Community Help and Support\n\nWe leverage Stack Overflow to work with the community on supporting Azure Active Directory and its SDKs, including this one!\nWe highly recommend you ask your questions on Stack Overflow (we're all on there!)\nAlso browser existing issues to see if someone has had your question before.\n\nWe recommend you use the \"msal\" tag so we can see it!\nHere is the latest Q&A on Stack Overflow for MSAL:\n[http://stackoverflow.com/questions/tagged/msal](http://stackoverflow.com/questions/tagged/msal)\n\n## Submit Feedback\nWe'd like your thoughts on this library. Please complete [this short survey.](https://forms.office.com/r/TMjZkDbzjY)\n\n## Security Reporting\n\nIf you find a security issue with our libraries or services please report it to [secure@microsoft.com](mailto:secure@microsoft.com) with as much detail as possible. Your submission may be eligible for a bounty through the [Microsoft Bounty](http://aka.ms/bugbounty) program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting [this page](https://technet.microsoft.com/security/dd252948) and subscribing to Security Advisory Alerts.\n\n## Contributing\n\nAll code is licensed under the MIT license and we triage actively on GitHub. We enthusiastically welcome contributions and feedback. Please read the [contributing guide](./contributing.md) before starting.\n\n## We Value and Adhere to the Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "description_content_type": "text/markdown",
        "home_page": "https://github.com/AzureAD/microsoft-authentication-library-for-python",
        "author": "Microsoft Corporation",
        "author_email": "nugetaad@microsoft.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent"
        ],
        "requires_dist": [
          "requests <3,>=2.0.0",
          "PyJWT[crypto] <3,>=1.0.0",
          "cryptography <45,>=0.6",
          "mock ; python_version < \"3.3\"",
          "pymsalruntime <0.15,>=0.13.2 ; (python_version >= \"3.6\" and platform_system == \"Windows\") and extra == 'broker'"
        ],
        "requires_python": ">=2.7",
        "project_url": [
          "Changelog, https://github.com/AzureAD/microsoft-authentication-library-for-python/releases",
          "Documentation, https://msal-python.readthedocs.io/",
          "Questions, https://stackoverflow.com/questions/tagged/azure-ad-msal+python",
          "Feature/Bug Tracker, https://github.com/AzureAD/microsoft-authentication-library-for-python/issues"
        ],
        "provides_extra": [
          "broker"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/78/8d/ecd0eb93196f25c722ba1b923fd54d190366feccfa5b159d48dacf2b1fee/msal_extensions-1.1.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=01be9711b4c0b1a151450068eeb2c4f0997df3bba085ac299de3a66f585e382f",
          "hashes": {
            "sha256": "01be9711b4c0b1a151450068eeb2c4f0997df3bba085ac299de3a66f585e382f"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "msal-extensions",
        "version": "1.1.0",
        "summary": "Microsoft Authentication Library extensions (MSAL EX) provides a persistence API that can save your data on disk, encrypted on Windows, macOS and Linux. Concurrent data access will be coordinated by a file lock mechanism.",
        "description": "\n# Microsoft Authentication Extensions for Python\n\nThe Microsoft Authentication Extensions for Python offers secure mechanisms for client applications to perform cross-platform token cache serialization and persistence. It gives additional support to the [Microsoft Authentication Library for Python (MSAL)](https://github.com/AzureAD/microsoft-authentication-library-for-python).\n\nMSAL Python supports an in-memory cache by default and provides the [SerializableTokenCache](https://msal-python.readthedocs.io/en/latest/#msal.SerializableTokenCache) to perform cache serialization. You can read more about this in the MSAL Python [documentation](https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-python-token-cache-serialization). Developers are required to implement their own cache persistance across multiple platforms and Microsoft Authentication Extensions makes this simpler.\n\nThe supported platforms are Windows, Mac and Linux.\n- Windows - [DPAPI](https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-use-data-protection) is used for encryption.\n- MAC - The MAC KeyChain is used.\n- Linux - [LibSecret](https://wiki.gnome.org/Projects/Libsecret) is used for encryption.\n\n> Note: It is recommended to use this library for cache persistance support for Public client applications such as Desktop apps only. In web applications, this may lead to scale and performance issues. Web applications are recommended to persist the cache in session. Take a look at this [webapp sample](https://github.com/Azure-Samples/ms-identity-python-webapp).\n\n## Installation\n\nYou can find Microsoft Authentication Extensions for Python on [Pypi](https://pypi.org/project/msal-extensions/).\n1. If you haven't already, [install and/or upgrade the pip](https://pip.pypa.io/en/stable/installing/)\n   of your Python environment to a recent version. We tested with pip 18.1.\n2. Run `pip install msal-extensions`.\n\n## Versions\n\nThis library follows [Semantic Versioning](http://semver.org/).\n\nYou can find the changes for each version under\n[Releases](https://github.com/AzureAD/microsoft-authentication-extensions-for-python/releases).\n\n## Usage\n\n### Creating an encrypted token cache file to be used by MSAL\n\nThe Microsoft Authentication Extensions library provides the `PersistedTokenCache` which accepts a platform-dependent persistence instance. This token cache can then be used to instantiate the `PublicClientApplication` in MSAL Python.\n\nThe token cache includes a file lock, and auto-reload behavior under the hood.\n\n\n\nHere is an example of this pattern for multiple platforms (taken from the complete [sample here](https://github.com/AzureAD/microsoft-authentication-extensions-for-python/blob/dev/sample/token_cache_sample.py)):\n\n```python\ndef build_persistence(location, fallback_to_plaintext=False):\n    \"\"\"Build a suitable persistence instance based your current OS\"\"\"\n    try:\n        return build_encrypted_persistence(location)\n    except:\n        if not fallback_to_plaintext:\n            raise\n        logging.warning(\"Encryption unavailable. Opting in to plain text.\")\n        return FilePersistence(location)\n\npersistence = build_persistence(\"token_cache.bin\")\nprint(\"Type of persistence: {}\".format(persistence.__class__.__name__))\nprint(\"Is this persistence encrypted?\", persistence.is_encrypted)\n\ncache = PersistedTokenCache(persistence)\n```\nNow you can use it in an MSAL application like this:\n```python\napp = msal.PublicClientApplication(\"my_client_id\", token_cache=cache)\n```\n\n### Creating an encrypted persistence file to store your own data\n\nHere is an example of this pattern for multiple platforms (taken from the complete [sample here](https://github.com/AzureAD/microsoft-authentication-extensions-for-python/blob/dev/sample/persistence_sample.py)):\n\n```python\ndef build_persistence(location, fallback_to_plaintext=False):\n    \"\"\"Build a suitable persistence instance based your current OS\"\"\"\n    try:\n        return build_encrypted_persistence(location)\n    except:  # pylint: disable=bare-except\n        if not fallback_to_plaintext:\n            raise\n        logging.warning(\"Encryption unavailable. Opting in to plain text.\")\n        return FilePersistence(location)\n\npersistence = build_persistence(\"storage.bin\", fallback_to_plaintext=False)\nprint(\"Type of persistence: {}\".format(persistence.__class__.__name__))\nprint(\"Is this persistence encrypted?\", persistence.is_encrypted)\n\ndata = {  # It can be anything, here we demonstrate an arbitrary json object\n    \"foo\": \"hello world\",\n    \"bar\": \"\",\n    \"service_principle_1\": \"blah blah...\",\n    }\n\npersistence.save(json.dumps(data))\nassert json.loads(persistence.load()) == data\n```\n\n## Python version support policy\n\nPython versions which are 6 months older than their\n[end-of-life cycle defined by Python Software Foundation (PSF)](https://devguide.python.org/versions/#versions)\nwill not receive new feature updates from this library.\n\n\n## Community Help and Support\n\nWe leverage Stack Overflow to work with the community on supporting Azure Active Directory and its SDKs, including this one!\nWe highly recommend you ask your questions on Stack Overflow (we're all on there!).\nAlso browse existing issues to see if someone has had your question before.\n\nWe recommend you use the \"msal\" tag so we can see it!\nHere is the latest Q&A on Stack Overflow for MSAL:\n[http://stackoverflow.com/questions/tagged/msal](http://stackoverflow.com/questions/tagged/msal)\n\n\n## Contributing\n\nAll code is licensed under the MIT license and we triage actively on GitHub.\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\n\n## We value and adhere to the Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n",
        "description_content_type": "text/markdown",
        "license": "MIT License",
        "classifier": [
          "License :: OSI Approved :: MIT License",
          "Development Status :: 5 - Production/Stable",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12"
        ],
        "requires_dist": [
          "msal <2.0.0,>=0.4.1",
          "packaging",
          "portalocker <3,>=1.0 ; platform_system != \"Windows\"",
          "portalocker <3,>=1.6 ; platform_system == \"Windows\""
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Changelog, https://github.com/AzureAD/microsoft-authentication-extensions-for-python/releases"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/15/cf/f2966a2638144491f8696c27320d5219f48a072715075d168b31d3237720/msrest-0.7.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=21120a810e1233e5e6cc7fe40b474eeb4ec6f757a15d7cf86702c369f9567c32",
          "hashes": {
            "sha256": "21120a810e1233e5e6cc7fe40b474eeb4ec6f757a15d7cf86702c369f9567c32"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "msrest",
        "version": "0.7.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "AutoRest swagger generator Python client runtime.",
        "description": "AutoRest: Python Client Runtime\n===============================\n\n.. image:: https://travis-ci.org/Azure/msrest-for-python.svg?branch=master\n :target: https://travis-ci.org/Azure/msrest-for-python\n\n.. image:: https://codecov.io/gh/azure/msrest-for-python/branch/master/graph/badge.svg\n :target: https://codecov.io/gh/azure/msrest-for-python\n\nInstallation\n------------\n\nTo install:\n\n.. code-block:: bash\n\n    $ pip install msrest\n\n\nRelease History\n---------------\n\n2022-06-10 Version 0.7.1\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Declare correctly msrest as Python 3.6 and more only for clarity  #251\n\n\n2022-06-07 Version 0.7.0\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add `azure-core` as installation requirement #247\n- Replace `SerializationError` and `DeserializationError` in `msrest.exceptions` with those in `azure.core` #247\n\n**Bugfixes**\n\n- Typing annotation in LROPoller (thanks to akx)  #242\n\nThanks to kianmeng for typo fixes in the documentation.\n\n2021-01-26 Version 0.6.21\n+++++++++++++++++++++++++\n\n**Bug Fixes**\n\n- Fixes `failsafe_deserialize` introduced in `0.6.20` #232\n\n2021-01-25 Version 0.6.20\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add `failsafe_deserialize` method to the `Deserializer` object. #232\n- Serialize `datetime`, `date`, `time`, `timedelta` and `Decimal` correctly when serializing `object` . #224\n\n2020-09-08 Version 0.6.19\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix serialization of random Model object  #220\n- Fix serialization of unicode string in Py2 and object mode #221\n\n\n2020-07-27 Version 0.6.18\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add support for attributes/text in the same XML node  #218\n\n\n2020-06-25 Version 0.6.17\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix XML and discriminator  #214\n\n\n2020-06-09 Version 0.6.16\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix XML parsing with namespaces and attributes  #209\n\n**Features**\n\n- Add py.typed for mypy support\n\n\n2020-06-04 Version 0.6.15\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix RFC regression introduced in 0.6.14 (RFC parse date are no longer pickable)  #208\n- Fix XML parsing with namespaces  #206\n\nThanks to ivanst0 for the contribution\n\n\n2020-05-18 Version 0.6.14\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix \"from_dict\" in some complex flattening scenario  #204\n- Fix RFC date parsing if machine locale is not English  #201\n\n\n2020-04-07 Version 0.6.13\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix deserializer and flattening if intermediate node is None  #198\n- Fix validation exception message for minimum/maximum checks  #199\n\n\n2020-04-06 Version 0.6.12\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add \"time\" serializer/deserializer  #196\n\n2020-01-30 Version 0.6.11\n+++++++++++++++++++++++++\n\n**Features**\n\n- XML mode can now be enabled even if the given Model has no XML metadata  #184\n- Add Kerberos Authentication  #186\n- Improve error message if expected type is dictionary and something else is provided  #188\n\n**Bugfixes**\n\n- Fix comma separated serialization of array in query  #186\n- Fix validation of basic types in some complex scenario  #189\n\nThanks to catatonicprime for the contribution\n\n2019-09-04 Version 0.6.10\n+++++++++++++++++++++++++\n\n**Features**\n\n- XML mode now supports OpenAPI additional properties  # 174\n\n**Bugfixes**\n\n- Accept \"is_xml\" kwargs to force XML serialization  #178\n- Disable XML deserialization if received element is not an ElementTree  #178\n- A \"null\" enum deserialize as None, and not \"None\" anymore  #173\n- Fix some UTF8 encoding issue in Python 2.7 and XML mode  #172\n\n\n2019-07-24 Version 0.6.9\n++++++++++++++++++++++++\n\n**Features**\n\n- Accept extensions of JSON mimetype as valid JSON  #167\n\n2019-06-24 Version 0.6.8\n++++++++++++++++++++++++\n\n**BugFixes**\n\n- Impossible to serialize XML if model contains UTF8 characters on Python 2.7  #165\n- Impossible to deserialize a HTTP response as XML if body contains UTF8 characters on Python 2.7  #165\n- Loading a serialized configuration fails with NameError on NoOptionError  #162\n\nThanks to cclauss for the contribution\n\n2019-06-12 Version 0.6.7\n++++++++++++++++++++++++\n\n**Features**\n\n- Add DomainCredentials credentials for EventGrid\n\nThanks to kalyanaj for the contribution\n\n2019-03-21 Version 0.6.6\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Make 0.6.x series compatible with pyinstaller again\n- sdist now includes tests\n\nThanks to dotlambda for the contribution\n\n2019-03-11 Version 0.6.5\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix list of integers serialization if div is provided #151\n- Fix parsing of UTF8 with BOM #145\n\nThanks to eduardomourar for the contribution\n\n2019-01-09 Version 0.6.4\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix regression on credentials configuration if used outside of Autorest scope #135\n\n2019-01-08 Version 0.6.3\n++++++++++++++++++++++++\n\n**Features**\n\n- Updated **experimental** async support. Requires Autorest.Python 4.0.64.\n\n2018-11-19 Version 0.6.2\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix circular dependency in TYPE_CHECKING mode #128\n\n2018-10-15 Version 0.6.1\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Remove unnecessary verbose \"warnings\" log #126\n\n2018-10-02 Version 0.6.0\n++++++++++++++++++++++++\n\n**Features**\n\n- The environment variable AZURE_HTTP_USER_AGENT, if present, is now injected part of the UserAgent\n- New **preview** msrest.universal_http module. Provide tools to generic HTTP management (sync/async, requests/aiohttp, etc.)\n- New **preview** msrest.pipeline implementation:\n\n  - A Pipeline is an ordered list of Policies than can process an HTTP request and response in a generic way.\n  - More details in the wiki page about Pipeline: https://github.com/Azure/msrest-for-python/wiki/msrest-0.6.0---Pipeline\n\n- Adding new attributes to Configuration instance:\n\n  - http_logger_policy - Policy to handle HTTP logging\n  - user_agent_policy - Policy to handle UserAgent\n  - pipeline - The current pipeline used by the SDK client\n  - async_pipeline - The current async pipeline used by the async SDK client\n\n- Installing \"msrest[async]\" now installs the **experimental** async support. Works ONLY for Autorest.Python 4.0.63.\n\n**Breaking changes**\n\n- The HTTPDriver API introduced in 0.5.0 has been replaced by the Pipeline implementation.\n\n- The following classes have been moved from \"msrest.pipeline\" to \"msrest.universal_http\":\n\n  - ClientRedirectPolicy\n  - ClientProxies\n  - ClientConnection\n\n- The following classes have been moved from \"msrest.pipeline\" to \"msrest.universal_http.requests\":\n\n  - ClientRetryPolicy\n\n**Bugfixes**\n\n- Fix \"long\" on Python 2 if used with the \"object\" type  #121\n\nThanks to robgolding for the contribution\n\n2018-09-04 Version 0.5.5\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix a serialization issue if additional_properties is declared, and \"automatic model\" syntax is used\n  (\"automatic model\" being the ability to pass a dict to command and have the model auto-created)  # 120\n\n2018-07-12 Version 0.5.4\n++++++++++++++++++++++++\n\n**Features**\n\n- Support additionalProperties and XML\n\n**BugFixes**\n\n- Better parse empty node and not string types\n- Improve \"object\" XML parsing\n\n2018-07-10 Version 0.5.3\n++++++++++++++++++++++++\n\n**BugFixes**\n\n- Fix some XML serialization subtle scenarios\n\n2018-07-09 Version 0.5.2\n++++++++++++++++++++++++\n\n**Features**\n\n- deserialize/from_dict now accepts a content-type parameter to parse XML strings\n\n**Bugfixes**\n\n- Fix some complex XML Swagger definitions.\n\nThis release likely breaks already generated XML SDKs, that needs to be regenerated with autorest.python 3.0.58\n\n2018-06-21 Version 0.5.1\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Lower Accept header overwrite logging message #110\n- Fix 'object' type and XML format\n\nThanks to dharmab for the contribution\n\n2018-06-12 Version 0.5.0\n++++++++++++++++++++++++\n\n**Disclaimer**\n\nThis released is designed to be backward compatible with 0.4.x, but there is too many internal refactoring\nand new features to continue with 0.4.x versioning\n\n**Features**\n\n- Add XML support\n- Add many type hints, and MyPY testing on CI.\n- HTTP calls are made through a HTTPDriver API. Only implementation is `requests` for now. This driver API is *not* considered stable\n  and you should pin your msrest version if you want to provide a personal implementation.\n\n**Bugfixes**\n\n- Incorrect milliseconds serialization for some datetime object #94\n\n**Deprecation**\n\nThat will trigger a DeprecationWarning if an old Autorest generated code is used.\n\n- _client.add_header is deprecated, and config.headers should be used instead\n- _client.send_formdata is deprecated, and _client.put/get/delete/post + _client.send should be used instead\n\n2018-04-30 Version 0.4.29\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Improve `SDKClient.__exit__` to take exc_details as optional parameters and not required #93\n- refresh_session should also use the permanent HTTP session if available #91\n\n2018-04-18 Version 0.4.28\n+++++++++++++++++++++++++\n\n**Features**\n\n- msrest is now able to keep the \"requests.Session\" alive for performance. To activate this behavior:\n\n  - Use the final Client as a context manager (requires generation with Autorest.Python 3.0.50 at least)\n  - Use `client.config.keep_alive = True` and `client.close()` (requires generation with Autorest.Python 3.0.50 at least)\n  - Use `client.config.keep_alive = True` and client._client.close() (not recommended, but available in old releases of SDK)\n\n- All Authentication classes now define `signed_session` and `refresh_session` with an optional `session` parameter.\n  To take benefits of the session improvement, a subclass of Authentication *MUST* add this optional parameter\n  and use it if it's not `None`:\n\n     def signed_session(self, session=None):\n         session = session or requests.Session()\n\n         # As usual from here.\n\n2018-03-07 Version 0.4.27\n+++++++++++++++++++++++++\n\n**Features**\n\n- Disable HTTP log by default (security), add `enable_http_log` to restore it #86\n\n**BugFixes**\n\n- Fix incorrect date parsing if ms precision is over 6 digits #82\n\n2018-01-30 Version 0.4.26\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add TopicCredentials for EventGrid client\n\n**Bugfixes**\n\n- Fix minimal dependency of isodate\n- Fix serialisation from dict if datetime provided\n\n2018-01-08 Version 0.4.25\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add LROPoller class. This is a customizable LRO engine.\n  This is the poller engine of Autorest.Python 3.0, and is not used by code generated by previous Autorest version.\n\n2018-01-03 Version 0.4.24\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Date parsing is now compliant with Autorest / Swagger 2.0 specification (less lenient)\n\n**Internal optimisation**\n\n- Call that does not return a streamable object are now executed in requests stream mode False (was True whatever the type of the call).\n  This should reduce the number of leaked opened session and allow urllib3 to manage connection pooling more efficiently.\n  Only clients generated with Autorest.Python >= 2.1.31 (not impacted otherwise, fully backward compatible)\n\n2017-12-21 Version 0.4.23\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Accept to deserialize enum of different type if content string match #75\n- Stop failing on deserialization if enum string is unkwon. Return the string instead.\n\n**Features**\n\n- Model now accept kwargs in constructor for future kwargs models\n\n2017-12-15 Version 0.4.22\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Do not validate additional_properties #73\n- Improve validation error if expected type is dict, but actual type is not #73\n\n2017-12-14 Version 0.4.21\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix additional_properties if Swagger was flatten #72\n\n2017-12-13 Version 0.4.20\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add support for additional_properties\n\n  - By default, all additional_properties are kept.\n  - Additional properties are sent to the server only if it was specified in the Swagger,\n    or if \"enable_additional_properties_sending\" is called on the model we want it.\n    This is a class method that enables it for all instance of this model.\n\n2017-11-20 Version 0.4.19\n+++++++++++++++++++++++++\n\n**Features**\n\n- The interpretation of Swagger 2.0 \"discriminator\" is now lenient. This means for these two scenarios:\n\n  - Discriminator value is missing from the received payload\n  - Discriminator value is not defined in the Swagger\n\n  Instead of failing with an exception, this now returns the base type for this \"discriminator\".\n\n  Note that this is not a contradiction of the Swagger 2.0 spec, that specifies\n  \"validation SHOULD fail [...] there may exist valid reasons in particular circumstances to ignore a particular item,\n  but the full implications must be understood and carefully weighed before choosing a different course.\"\n\n  This cannot be configured for now and is the new default behvaior, but can be in the future if needed.\n\n**Bugfixes**\n\n- Optional formdata parameters were raising an exception (#65)\n- \"application/x-www-form-urlencoded\" form was sent using \"multipart/form-data\".\n  This causes problems if the server does not support \"multipart/form-data\" (#66)\n\n2017-10-26 Version 0.4.18\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add ApiKeyCredentials class. This can be used to support OpenAPI ApiKey feature.\n- Add CognitiveServicesAuthentication class. Pre-declared ApiKeyCredentials class for Cognitive Services.\n\n2017-10-12 Version 0.4.17\n+++++++++++++++++++++++++\n\n**Features**\n\nThis make Authentication classes more consistent:\n\n- OAuthTokenAuthentication is now a subclass of BasicTokenAuthentication (was Authentication)\n- BasicTokenAuthentication has now a \"set_token\" methods that does nothing.\n\nThis allows test like \"isintance(o, BasicTokenAuthentication)\" to be guaranteed that the following attributes exists:\n\n- token\n- set_token()\n- signed_session()\n\nThis means for users of \"msrestazure\", that they are guaranteed that all AD classes somehow inherits from \"BasicTokenAuthentication\"\n\n2017-10-05 Version 0.4.16\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix regression: accept \"set<str>\" as a valid \"[str]\" (#60)\n\n2017-09-28 Version 0.4.15\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Always log response body (#16)\n- Improved exception message if error JSON is Odata v4 (#55)\n- Refuse \"str\" as a valid \"[str]\" type (#41)\n- Better exception handling if input from server is not JSON valid\n\n**Features**\n\n- Add Configuration.session_configuration_callback to customize the requests.Session if necessary (#52)\n- Add a flag to Serializer to disable client-side-validation (#51)\n- Remove \"import requests\" from \"exceptions.py\" for apps that require fast loading time (#23)\n\nThank you to jayden-at-arista for the contribution\n\n2017-08-23 Version 0.4.14\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix regression introduced in msrest 0.4.12 - dict syntax with enum modeled as string and enum used\n\n2017-08-22 Version 0.4.13\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix regression introduced in msrest 0.4.12 - dict syntax using isodate.Duration (#42)\n\n2017-08-21 Version 0.4.12\n+++++++++++++++++++++++++\n\n**Features**\n\n- Input is now more lenient\n- Model have a \"validate\" method to check content constraints\n- Model have now 4 new methods:\n\n  - \"serialize\" that gives the RestAPI that will be sent\n  - \"as_dict\" that returns a dict version of the Model. Callbacks are available.\n  - \"deserialize\" the parses the RestAPI JSON into a Model\n  - \"from_dict\" that parses several dict syntax into a Model. Callbacks are available.\n\nMore details and examples in the Wiki article on Github:\nhttps://github.com/Azure/msrest-for-python/wiki/msrest-0.4.12---Serialization-change\n\n**Bugfixes**\n\n- Better Enum checking (#38)\n\n2017-06-21 Version 0.4.11\n+++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix incorrect dependency to \"requests\" 2.14.x, instead of 2.x meant in 0.4.8\n\n2017-06-15 Version 0.4.10\n+++++++++++++++++++++++++\n\n**Features**\n\n- Add requests hooks to configuration\n\n2017-06-08 Version 0.4.9\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Accept \"null\" value for paging array as an empty list and do not raise (#30)\n\n2017-05-22 Version 0.4.8\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix random \"pool is closed\" error (#29)\n- Fix requests dependency to version 2.x, since version 3.x is annunced to be breaking.\n\n2017-04-04 Version 0.4.7\n++++++++++++++++++++++++\n\n**BugFixes**\n\n- Refactor paging #22:\n\n   - \"next\" is renamed \"advance_page\" and \"next\" returns only 1 element (Python 2 expected behavior)\n   - paging objects are now real generator and support the \"next()\" built-in function without need for \"iter()\"\n\n- Raise accurate DeserialisationError on incorrect RestAPI discriminator usage #27\n- Fix discriminator usage of the base class name #27\n- Remove default mutable arguments in Clients #20\n- Fix object comparison in some scenarios #24\n\n2017-03-06 Version 0.4.6\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Allow Model sub-classes to be serialized if type is \"object\"\n\n2017-02-13 Version 0.4.5\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix polymorphic deserialization #11\n- Fix regexp validation if '\\\\w' is used in Python 2.7 #13\n- Fix dict deserialization if keys are unicode in Python 2.7\n\n**Improvements**\n\n- Add polymorphic serialisation from dict objects\n- Remove chardet and use HTTP charset declaration (fallback to utf8)\n\n2016-09-14 Version 0.4.4\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Remove paging URL validation, part of fix https://github.com/Azure/autorest/pull/1420\n\n**Disclaimer**\n\nIn order to get paging fixes for impacted clients, you need this package and Autorest > 0.17.0 Nightly 20160913\n\n2016-09-01 Version 0.4.3\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Better exception message (https://github.com/Azure/autorest/pull/1300)\n\n2016-08-15 Version 0.4.2\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix serialization if \"object\" type contains None (https://github.com/Azure/autorest/issues/1353)\n\n2016-08-08 Version 0.4.1\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fix compatibility issues with requests 2.11.0 (https://github.com/Azure/autorest/issues/1337)\n- Allow url of ClientRequest to have parameters (https://github.com/Azure/autorest/issues/1217)\n\n2016-05-25 Version 0.4.0\n++++++++++++++++++++++++\n\nThis version has no bug fixes, but implements new features of Autorest:\n- Base64 url type\n- unixtime type\n- x-ms-enum modelAsString flag\n\n**Behaviour changes**\n\n- Add Platform information in UserAgent\n- Needs Autorest > 0.17.0 Nightly 20160525\n\n2016-04-26 Version 0.3.0\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Read only values are no longer in __init__ or sent to the server (https://github.com/Azure/autorest/pull/959)\n- Useless kwarg removed\n\n**Behaviour changes**\n\n- Needs Autorest > 0.16.0 Nightly 20160426\n\n\n2016-03-25 Version 0.2.0\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Manage integer enum values (https://github.com/Azure/autorest/pull/879)\n- Add missing application/json Accept HTTP header (https://github.com/Azure/azure-sdk-for-python/issues/553)\n\n**Behaviour changes**\n\n- Needs Autorest > 0.16.0 Nightly 20160324\n\n\n2016-03-21 Version 0.1.3\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Deserialisation of generic resource if null in JSON (https://github.com/Azure/azure-sdk-for-python/issues/544)\n\n\n2016-03-14 Version 0.1.2\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- urllib3 side effect (https://github.com/Azure/autorest/issues/824)\n\n\n2016-03-04 Version 0.1.1\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Source package corrupted in Pypi (https://github.com/Azure/autorest/issues/799)\n\n2016-03-04 Version 0.1.0\n+++++++++++++++++++++++++\n\n**Behavioural Changes**\n\n- Removed custom logging set up and configuration. All loggers are now children of the root logger 'msrest' with no pre-defined configurations.\n- Replaced _required attribute in Model class with more extensive _validation dict.\n\n**Improvement**\n\n- Removed hierarchy scanning for attribute maps from base Model class - relies on generator to populate attribute\n  maps according to hierarchy.\n- Base class Paged now inherits from collections.Iterable.\n- Data validation during serialization using custom parameters (e.g. max, min etc).\n- Added ValidationError to be raised if invalid data encountered during serialization.\n\n2016-02-29 Version 0.0.3\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Source package corrupted in Pypi (https://github.com/Azure/autorest/issues/718)\n\n2016-02-19 Version 0.0.2\n++++++++++++++++++++++++\n\n**Bugfixes**\n\n- Fixed bug in exception logging before logger configured.\n\n2016-02-19 Version 0.0.1\n++++++++++++++++++++++++\n\n- Initial release.\n\n\n",
        "home_page": "https://github.com/Azure/msrest-for-python",
        "author": "Microsoft Corporation",
        "license": "MIT License",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "License :: OSI Approved :: MIT License",
          "Topic :: Software Development"
        ],
        "requires_dist": [
          "azure-core (>=1.24.0)",
          "certifi (>=2017.4.17)",
          "isodate (>=0.6.0)",
          "requests-oauthlib (>=0.5.0)",
          "requests (~=2.16)",
          "aiodns ; (python_version>='3.5') and extra == 'async'",
          "aiohttp (>=3.0) ; (python_version>='3.5') and extra == 'async'"
        ],
        "requires_python": ">=3.6",
        "provides_extra": [
          "async"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/7e/80/cab10959dc1faead58dc8384a781dfbf93cb4d33d50988f7a69f1b7c9bbe/oauthlib-3.2.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8139f29aac13e25d502680e9e19963e83f16838d48a0d71c287fe40e7067fbca",
          "hashes": {
            "sha256": "8139f29aac13e25d502680e9e19963e83f16838d48a0d71c287fe40e7067fbca"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "oauthlib",
        "version": "3.2.2",
        "platform": [
          "any"
        ],
        "summary": "A generic, spec-compliant, thorough implementation of the OAuth request-signing logic",
        "description": "OAuthLib - Python Framework for OAuth1 & OAuth2\n===============================================\n\n*A generic, spec-compliant, thorough implementation of the OAuth request-signing\nlogic for Python 3.6+.*\n\n.. image:: https://app.travis-ci.com/oauthlib/oauthlib.svg?branch=master\n  :target: https://app.travis-ci.com/oauthlib/oauthlib\n  :alt: Travis\n.. image:: https://coveralls.io/repos/oauthlib/oauthlib/badge.svg?branch=master\n  :target: https://coveralls.io/r/oauthlib/oauthlib\n  :alt: Coveralls\n.. image:: https://img.shields.io/pypi/pyversions/oauthlib.svg\n  :target: https://pypi.org/project/oauthlib/\n  :alt: Download from PyPI\n.. image:: https://img.shields.io/pypi/l/oauthlib.svg\n  :target: https://pypi.org/project/oauthlib/\n  :alt: License\n.. image:: https://app.fossa.io/api/projects/git%2Bgithub.com%2Foauthlib%2Foauthlib.svg?type=shield\n   :target: https://app.fossa.io/projects/git%2Bgithub.com%2Foauthlib%2Foauthlib?ref=badge_shield\n   :alt: FOSSA Status\n.. image:: https://img.shields.io/readthedocs/oauthlib.svg\n  :target: https://oauthlib.readthedocs.io/en/latest/index.html\n  :alt: Read the Docs\n.. image:: https://badges.gitter.im/oauthlib/oauthlib.svg\n  :target: https://gitter.im/oauthlib/Lobby\n  :alt: Chat on Gitter\n\n\n.. image:: https://raw.githubusercontent.com/oauthlib/oauthlib/8d71b161fd145d11c40d55c9ab66ac134a303253/docs/logo/oauthlib-banner-700x192.png\n  :target: https://github.com/oauthlib/oauthlib/\n  :alt: OAuth + Python = OAuthlib Python Framework\n\n\nOAuth often seems complicated and difficult-to-implement. There are several\nprominent libraries for handling OAuth requests, but they all suffer from one or\nboth of the following:\n\n1. They predate the `OAuth 1.0 spec`_, AKA RFC 5849.\n2. They predate the `OAuth 2.0 spec`_, AKA RFC 6749.\n3. They assume the usage of a specific HTTP request library.\n\n.. _`OAuth 1.0 spec`: https://tools.ietf.org/html/rfc5849\n.. _`OAuth 2.0 spec`: https://tools.ietf.org/html/rfc6749\n\nOAuthLib is a framework which implements the logic of OAuth1 or OAuth2 without\nassuming a specific HTTP request object or web framework. Use it to graft OAuth\nclient support onto your favorite HTTP library, or provide support onto your\nfavourite web framework. If you're a maintainer of such a library, write a thin\nveneer on top of OAuthLib and get OAuth support for very little effort.\n\n\nDocumentation\n--------------\n\nFull documentation is available on `Read the Docs`_. All contributions are very\nwelcome! The documentation is still quite sparse, please open an issue for what\nyou'd like to know, or discuss it in our `Gitter community`_, or even better, send a\npull request!\n\n.. _`Gitter community`: https://gitter.im/oauthlib/Lobby\n.. _`Read the Docs`: https://oauthlib.readthedocs.io/en/latest/index.html\n\nInterested in making OAuth requests?\n------------------------------------\n\nThen you might be more interested in using `requests`_ which has OAuthLib\npowered OAuth support provided by the `requests-oauthlib`_ library.\n\n.. _`requests`: https://github.com/requests/requests\n.. _`requests-oauthlib`: https://github.com/requests/requests-oauthlib\n\nWhich web frameworks are supported?\n-----------------------------------\n\nThe following packages provide OAuth support using OAuthLib.\n\n- For Django there is `django-oauth-toolkit`_, which includes `Django REST framework`_ support.\n- For Flask there is `flask-oauthlib`_ and `Flask-Dance`_.\n- For Pyramid there is `pyramid-oauthlib`_.\n- For Bottle there is `bottle-oauthlib`_.\n\nIf you have written an OAuthLib package that supports your favorite framework,\nplease open a Pull Request, updating the documentation.\n\n.. _`django-oauth-toolkit`: https://github.com/evonove/django-oauth-toolkit\n.. _`flask-oauthlib`: https://github.com/lepture/flask-oauthlib\n.. _`Django REST framework`: http://django-rest-framework.org\n.. _`Flask-Dance`: https://github.com/singingwolfboy/flask-dance\n.. _`pyramid-oauthlib`: https://github.com/tilgovi/pyramid-oauthlib\n.. _`bottle-oauthlib`: https://github.com/thomsonreuters/bottle-oauthlib\n\nUsing OAuthLib? Please get in touch!\n------------------------------------\nPatching OAuth support onto an http request framework? Creating an OAuth\nprovider extension for a web framework? Simply using OAuthLib to Get Things Done\nor to learn?\n\nNo matter which we'd love to hear from you in our `Gitter community`_ or if you have\nanything in particular you would like to have, change or comment on don't\nhesitate for a second to send a pull request or open an issue. We might be quite\nbusy and therefore slow to reply but we love feedback!\n\nChances are you have run into something annoying that you wish there was\ndocumentation for, if you wish to gain eternal fame and glory, and a drink if we\nhave the pleasure to run into each other, please send a docs pull request =)\n\n.. _`Gitter community`: https://gitter.im/oauthlib/Lobby\n\nLicense\n-------\n\nOAuthLib is yours to use and abuse according to the terms of the BSD license.\nCheck the LICENSE file for full details.\n\nCredits\n-------\n\nOAuthLib has been started and maintained several years by Idan Gazit and other\namazing `AUTHORS`_. Thanks to their wonderful work, the open-source `community`_\ncreation has been possible and the project can stay active and reactive to users\nrequests.\n\n\n.. _`AUTHORS`: https://github.com/oauthlib/oauthlib/blob/master/AUTHORS\n.. _`community`: https://github.com/oauthlib/\n\nChangelog\n---------\n\n*OAuthLib is in active development, with the core of both OAuth1 and OAuth2\ncompleted, for providers as well as clients.* See `supported features`_ for\ndetails.\n\n.. _`supported features`: https://oauthlib.readthedocs.io/en/latest/feature_matrix.html\n\nFor a full changelog see ``CHANGELOG.rst``.\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/oauthlib/oauthlib",
        "author": "The OAuthlib Community",
        "author_email": "idan@gazit.me",
        "maintainer": "Ib Lundgren",
        "maintainer_email": "ib.lundgren@gmail.com",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved",
          "License :: OSI Approved :: BSD License",
          "Operating System :: MacOS",
          "Operating System :: POSIX",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "cryptography (>=3.0.0) ; extra == 'rsa'",
          "blinker (>=1.4.0) ; extra == 'signals'",
          "cryptography (>=3.0.0) ; extra == 'signedtoken'",
          "pyjwt (<3,>=2.0.0) ; extra == 'signedtoken'"
        ],
        "requires_python": ">=3.6",
        "provides_extra": [
          "rsa",
          "signals",
          "signedtoken"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ec/1a/610693ac4ee14fcdf2d9bf3c493370e4f2ef7ae2e19217d7a237ff42367d/packaging-23.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7",
          "hashes": {
            "sha256": "8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "packaging",
        "version": "23.2",
        "summary": "Core utilities for Python packages",
        "description": "packaging\n=========\n\n.. start-intro\n\nReusable core utilities for various Python Packaging\n`interoperability specifications <https://packaging.python.org/specifications/>`_.\n\nThis library provides utilities that implement the interoperability\nspecifications which have clearly one correct behaviour (eg: :pep:`440`)\nor benefit greatly from having a single shared implementation (eg: :pep:`425`).\n\n.. end-intro\n\nThe ``packaging`` project includes the following: version handling, specifiers,\nmarkers, requirements, tags, utilities.\n\nDocumentation\n-------------\n\nThe `documentation`_ provides information and the API for the following:\n\n- Version Handling\n- Specifiers\n- Markers\n- Requirements\n- Tags\n- Utilities\n\nInstallation\n------------\n\nUse ``pip`` to install these utilities::\n\n    pip install packaging\n\nThe ``packaging`` library uses calendar-based versioning (``YY.N``).\n\nDiscussion\n----------\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nYou can also join ``#pypa`` on Freenode to ask questions or get involved.\n\n\n.. _`documentation`: https://packaging.pypa.io/\n.. _`issue tracker`: https://github.com/pypa/packaging/issues\n\n\nCode of Conduct\n---------------\n\nEveryone interacting in the packaging project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\nContributing\n------------\n\nThe ``CONTRIBUTING.rst`` file outlines how to contribute to this project as\nwell as how to report a potential security issue. The documentation for this\nproject also covers information about `project development`_ and `security`_.\n\n.. _`project development`: https://packaging.pypa.io/en/latest/development/\n.. _`security`: https://packaging.pypa.io/en/latest/security/\n\nProject History\n---------------\n\nPlease review the ``CHANGELOG.rst`` file or the `Changelog documentation`_ for\nrecent changes and project history.\n\n.. _`Changelog documentation`: https://packaging.pypa.io/en/latest/changelog/\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Donald Stufft <donald@stufft.io>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://packaging.pypa.io/",
          "Source, https://github.com/pypa/packaging"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/17/9e/87671efcca80ba6203811540ed1f9c0462c1609d2281d7b7f53cef05da3d/portalocker-2.8.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=cfb86acc09b9aa7c3b43594e19be1345b9d16af3feb08bf92f23d4dce513a28e",
          "hashes": {
            "sha256": "cfb86acc09b9aa7c3b43594e19be1345b9d16af3feb08bf92f23d4dce513a28e"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "portalocker",
        "version": "2.8.2",
        "platform": [
          "any"
        ],
        "summary": "Wraps the portalocker recipe for easy usage",
        "description": "############################################\nportalocker - Cross-platform locking library\n############################################\n\n.. image:: https://github.com/WoLpH/portalocker/actions/workflows/python-package.yml/badge.svg?branch=master\n    :alt: Linux Test Status\n    :target: https://github.com/WoLpH/portalocker/actions/\n\n.. image:: https://ci.appveyor.com/api/projects/status/mgqry98hgpy4prhh?svg=true\n    :alt: Windows Tests Status\n    :target: https://ci.appveyor.com/project/WoLpH/portalocker\n\n.. image:: https://coveralls.io/repos/WoLpH/portalocker/badge.svg?branch=master\n    :alt: Coverage Status\n    :target: https://coveralls.io/r/WoLpH/portalocker?branch=master\n\nOverview\n--------\n\nPortalocker is a library to provide an easy API to file locking.\n\nAn important detail to note is that on Linux and Unix systems the locks are\nadvisory by default. By specifying the `-o mand` option to the mount command it\nis possible to enable mandatory file locking on Linux. This is generally not\nrecommended however. For more information about the subject:\n\n - https://en.wikipedia.org/wiki/File_locking\n - http://stackoverflow.com/questions/39292051/portalocker-does-not-seem-to-lock\n - https://stackoverflow.com/questions/12062466/mandatory-file-lock-on-linux\n\nThe module is currently maintained by Rick van Hattem <Wolph@wol.ph>.\nThe project resides at https://github.com/WoLpH/portalocker . Bugs and feature\nrequests can be submitted there. Patches are also very welcome.\n\nSecurity contact information\n------------------------------------------------------------------------------\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\nRedis Locks\n-----------\n\nThis library now features a lock based on Redis which allows for locks across\nmultiple threads, processes and even distributed locks across multiple\ncomputers.\n\nIt is an extremely reliable Redis lock that is based on pubsub.\n\nAs opposed to most Redis locking systems based on key/value pairs,\nthis locking method is based on the pubsub system. The big advantage is\nthat if the connection gets killed due to network issues, crashing\nprocesses or otherwise, it will still immediately unlock instead of\nwaiting for a lock timeout.\n\nFirst make sure you have everything installed correctly:\n\n::\n\n    pip install \"portalocker[redis]\"\n\nUsage is really easy:\n\n::\n\n    import portalocker\n\n    lock = portalocker.RedisLock('some_lock_channel_name')\n\n    with lock:\n        print('do something here')\n\nThe API is essentially identical to the other ``Lock`` classes so in addition\nto the ``with`` statement you can also use ``lock.acquire(...)``.\n\nPython 2\n--------\n\nPython 2 was supported in versions before Portalocker 2.0. If you are still\nusing\nPython 2,\nyou can run this to install:\n\n::\n\n    pip install \"portalocker<2\"\n\nTips\n----\n\nOn some networked filesystems it might be needed to force a `os.fsync()` before\nclosing the file so it's actually written before another client reads the file.\nEffectively this comes down to:\n\n::\n\n   with portalocker.Lock('some_file', 'rb+', timeout=60) as fh:\n       # do what you need to do\n       ...\n\n       # flush and sync to filesystem\n       fh.flush()\n       os.fsync(fh.fileno())\n\nLinks\n-----\n\n* Documentation\n    - http://portalocker.readthedocs.org/en/latest/\n* Source\n    - https://github.com/WoLpH/portalocker\n* Bug reports\n    - https://github.com/WoLpH/portalocker/issues\n* Package homepage\n    - https://pypi.python.org/pypi/portalocker\n* My blog\n    - http://w.wol.ph/\n\nExamples\n--------\n\nTo make sure your cache generation scripts don't race, use the `Lock` class:\n\n>>> import portalocker\n>>> with portalocker.Lock('somefile', timeout=1) as fh:\n...     print('writing some stuff to my cache...', file=fh)\n\nTo customize the opening and locking a manual approach is also possible:\n\n>>> import portalocker\n>>> file = open('somefile', 'r+')\n>>> portalocker.lock(file, portalocker.LockFlags.EXCLUSIVE)\n>>> file.seek(12)\n>>> file.write('foo')\n>>> file.close()\n\nExplicitly unlocking is not needed in most cases but omitting it has been known\nto cause issues:\nhttps://github.com/AzureAD/microsoft-authentication-extensions-for-python/issues/42#issuecomment-601108266\n\nIf needed, it can be done through:\n\n>>> portalocker.unlock(file)\n\nDo note that your data might still be in a buffer so it is possible that your\ndata is not available until you `flush()` or `close()`.\n\nTo create a cross platform bounded semaphore across multiple processes you can\nuse the `BoundedSemaphore` class which functions somewhat similar to\n`threading.BoundedSemaphore`:\n\n>>> import portalocker\n>>> n = 2\n>>> timeout = 0.1\n\n>>> semaphore_a = portalocker.BoundedSemaphore(n, timeout=timeout)\n>>> semaphore_b = portalocker.BoundedSemaphore(n, timeout=timeout)\n>>> semaphore_c = portalocker.BoundedSemaphore(n, timeout=timeout)\n\n>>> semaphore_a.acquire()\n<portalocker.utils.Lock object at ...>\n>>> semaphore_b.acquire()\n<portalocker.utils.Lock object at ...>\n>>> semaphore_c.acquire()\nTraceback (most recent call last):\n  ...\nportalocker.exceptions.AlreadyLocked\n\n\nMore examples can be found in the\n`tests <http://portalocker.readthedocs.io/en/latest/_modules/tests/tests.html>`_.\n\n\nVersioning\n----------\n\nThis library follows `Semantic Versioning <http://semver.org/>`_.\n\n\nChangelog\n---------\n\nEvery release has a ``git tag`` with a commit message for the tag\nexplaining what was added and/or changed. The list of tags/releases\nincluding the commit messages can be found here:\nhttps://github.com/WoLpH/portalocker/releases\n\nLicense\n-------\n\nSee the `LICENSE <https://github.com/WoLpH/portalocker/blob/develop/LICENSE>`_ file.\n\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "locking",
          "locks",
          "with",
          "statement",
          "windows",
          "linux",
          "unix"
        ],
        "author_email": "Rick van Hattem <wolph@wol.ph>",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: MS-DOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: Microsoft",
          "Operating System :: POSIX :: BSD :: FreeBSD",
          "Operating System :: POSIX :: BSD",
          "Operating System :: POSIX :: Linux",
          "Operating System :: POSIX :: SunOS/Solaris",
          "Operating System :: POSIX",
          "Operating System :: Unix",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: IronPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Programming Language :: Python :: Implementation",
          "Programming Language :: Python",
          "Topic :: Education :: Testing",
          "Topic :: Office/Business",
          "Topic :: Other/Nonlisted Topic",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Software Development :: Libraries",
          "Topic :: System :: Monitoring"
        ],
        "requires_dist": [
          "pywin32 >=226 ; platform_system == \"Windows\"",
          "sphinx >=1.7.1 ; extra == 'docs'",
          "redis ; extra == 'redis'",
          "pytest >=5.4.1 ; extra == 'tests'",
          "pytest-cov >=2.8.1 ; extra == 'tests'",
          "pytest-timeout >=2.1.0 ; extra == 'tests'",
          "sphinx >=6.0.0 ; extra == 'tests'",
          "pytest-mypy >=0.8.0 ; extra == 'tests'",
          "types-redis ; extra == 'tests'",
          "redis ; extra == 'tests'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "bugs, https://github.com/wolph/portalocker/issues",
          "documentation, https://portalocker.readthedocs.io/en/latest/",
          "repository, https://github.com/wolph/portalocker/"
        ],
        "provides_extra": [
          "docs",
          "redis",
          "tests"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/62/d5/5f610ebe421e85889f2e55e33b7f9a6795bd982198517d912eb1c76e1a53/pycparser-2.21-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9",
          "hashes": {
            "sha256": "8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pycparser",
        "version": "2.21",
        "platform": [
          "Cross Platform"
        ],
        "summary": "C parser in Python",
        "description": "\npycparser is a complete parser of the C language, written in\npure Python using the PLY parsing library.\nIt parses C code into an AST and can serve as a front-end for\nC compilers or analysis tools.\n\n\n",
        "home_page": "https://github.com/eliben/pycparser",
        "author": "Eli Bendersky",
        "author_email": "eliben@gmail.com",
        "maintainer": "Eli Bendersky",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/2b/4f/e04a8067c7c96c364cef7ef73906504e2f40d690811c021e1a1901473a19/PyJWT-2.8.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320",
          "hashes": {
            "sha256": "59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "PyJWT",
        "version": "2.8.0",
        "summary": "JSON Web Token implementation in Python",
        "description": "PyJWT\n=====\n\n.. image:: https://github.com/jpadilla/pyjwt/workflows/CI/badge.svg\n   :target: https://github.com/jpadilla/pyjwt/actions?query=workflow%3ACI\n\n.. image:: https://img.shields.io/pypi/v/pyjwt.svg\n   :target: https://pypi.python.org/pypi/pyjwt\n\n.. image:: https://codecov.io/gh/jpadilla/pyjwt/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/jpadilla/pyjwt\n\n.. image:: https://readthedocs.org/projects/pyjwt/badge/?version=stable\n   :target: https://pyjwt.readthedocs.io/en/stable/\n\nA Python implementation of `RFC 7519 <https://tools.ietf.org/html/rfc7519>`_. Original implementation was written by `@progrium <https://github.com/progrium>`_.\n\nSponsor\n-------\n\n+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| |auth0-logo| | If you want to quickly add secure token-based authentication to Python projects, feel free to check Auth0's Python SDK and free plan at `auth0.com/developers <https://auth0.com/developers?utm_source=GHsponsor&utm_medium=GHsponsor&utm_campaign=pyjwt&utm_content=auth>`_. |\n+--------------+-----------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n.. |auth0-logo| image:: https://user-images.githubusercontent.com/83319/31722733-de95bbde-b3ea-11e7-96bf-4f4e8f915588.png\n\nInstalling\n----------\n\nInstall with **pip**:\n\n.. code-block:: console\n\n    $ pip install PyJWT\n\n\nUsage\n-----\n\n.. code-block:: pycon\n\n    >>> import jwt\n    >>> encoded = jwt.encode({\"some\": \"payload\"}, \"secret\", algorithm=\"HS256\")\n    >>> print(encoded)\n    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg\n    >>> jwt.decode(encoded, \"secret\", algorithms=[\"HS256\"])\n    {'some': 'payload'}\n\nDocumentation\n-------------\n\nView the full docs online at https://pyjwt.readthedocs.io/en/stable/\n\n\nTests\n-----\n\nYou can run tests from the project root after cloning with:\n\n.. code-block:: console\n\n    $ tox\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "json",
          "jwt",
          "security",
          "signing",
          "token",
          "web"
        ],
        "home_page": "https://github.com/jpadilla/pyjwt",
        "author": "Jose Padilla",
        "author_email": "hello@jpadilla.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Natural Language :: English",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "typing-extensions ; python_version <= \"3.7\"",
          "cryptography (>=3.4.0) ; extra == 'crypto'",
          "sphinx (<5.0.0,>=4.5.0) ; extra == 'dev'",
          "sphinx-rtd-theme ; extra == 'dev'",
          "zope.interface ; extra == 'dev'",
          "cryptography (>=3.4.0) ; extra == 'dev'",
          "pytest (<7.0.0,>=6.0.0) ; extra == 'dev'",
          "coverage[toml] (==5.0.4) ; extra == 'dev'",
          "pre-commit ; extra == 'dev'",
          "sphinx (<5.0.0,>=4.5.0) ; extra == 'docs'",
          "sphinx-rtd-theme ; extra == 'docs'",
          "zope.interface ; extra == 'docs'",
          "pytest (<7.0.0,>=6.0.0) ; extra == 'tests'",
          "coverage[toml] (==5.0.4) ; extra == 'tests'"
        ],
        "requires_python": ">=3.7",
        "provides_extra": [
          "crypto",
          "dev",
          "docs",
          "tests"
        ]
      },
      "requested_extras": [
        "crypto"
      ]
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/70/8e/0e2d847013cb52cd35b38c009bb167a1a26b2ce6cd6965bf26b47bc0bf44/requests-2.31.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f",
          "hashes": {
            "sha256": "58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "requests",
        "version": "2.31.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Python HTTP for Humans.",
        "description": "# Requests\n\n**Requests** is a simple, yet elegant, HTTP library.\n\n```python\n>>> import requests\n>>> r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'application/json; charset=utf8'\n>>> r.encoding\n'utf-8'\n>>> r.text\n'{\"authenticated\": true, ...'\n>>> r.json()\n{'authenticated': True, ...}\n```\n\nRequests allows you to send HTTP/1.1 requests extremely easily. There’s no need to manually add query strings to your URLs, or to form-encode your `PUT` & `POST` data — but nowadays, just use the `json` method!\n\nRequests is one of the most downloaded Python packages today, pulling in around `30M downloads / week`— according to GitHub, Requests is currently [depended upon](https://github.com/psf/requests/network/dependents?package_id=UGFja2FnZS01NzA4OTExNg%3D%3D) by `1,000,000+` repositories. You may certainly put your trust in this code.\n\n[![Downloads](https://pepy.tech/badge/requests/month)](https://pepy.tech/project/requests)\n[![Supported Versions](https://img.shields.io/pypi/pyversions/requests.svg)](https://pypi.org/project/requests)\n[![Contributors](https://img.shields.io/github/contributors/psf/requests.svg)](https://github.com/psf/requests/graphs/contributors)\n\n## Installing Requests and Supported Versions\n\nRequests is available on PyPI:\n\n```console\n$ python -m pip install requests\n```\n\nRequests officially supports Python 3.7+.\n\n## Supported Features & Best–Practices\n\nRequests is ready for the demands of building robust and reliable HTTP–speaking applications, for the needs of today.\n\n- Keep-Alive & Connection Pooling\n- International Domains and URLs\n- Sessions with Cookie Persistence\n- Browser-style TLS/SSL Verification\n- Basic & Digest Authentication\n- Familiar `dict`–like Cookies\n- Automatic Content Decompression and Decoding\n- Multi-part File Uploads\n- SOCKS Proxy Support\n- Connection Timeouts\n- Streaming Downloads\n- Automatic honoring of `.netrc`\n- Chunked HTTP Requests\n\n## API Reference and User Guide available on [Read the Docs](https://requests.readthedocs.io)\n\n[![Read the Docs](https://raw.githubusercontent.com/psf/requests/main/ext/ss.png)](https://requests.readthedocs.io)\n\n## Cloning the repository\n\nWhen cloning the Requests repository, you may need to add the `-c\nfetch.fsck.badTimezone=ignore` flag to avoid an error about a bad commit (see\n[this issue](https://github.com/psf/requests/issues/2690) for more background):\n\n```shell\ngit clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git\n```\n\nYou can also apply this setting to your global Git config:\n\n```shell\ngit config --global fetch.fsck.badTimezone ignore\n```\n\n---\n\n[![Kenneth Reitz](https://raw.githubusercontent.com/psf/requests/main/ext/kr.png)](https://kennethreitz.org) [![Python Software Foundation](https://raw.githubusercontent.com/psf/requests/main/ext/psf.png)](https://www.python.org/psf)\n\n\n",
        "description_content_type": "text/markdown",
        "home_page": "https://requests.readthedocs.io",
        "author": "Kenneth Reitz",
        "author_email": "me@kennethreitz.org",
        "license": "Apache 2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Natural Language :: English",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: WWW/HTTP",
          "Topic :: Software Development :: Libraries"
        ],
        "requires_dist": [
          "charset-normalizer (<4,>=2)",
          "idna (<4,>=2.5)",
          "urllib3 (<3,>=1.21.1)",
          "certifi (>=2017.4.17)",
          "PySocks (!=1.5.7,>=1.5.6) ; extra == 'socks'",
          "chardet (<6,>=3.0.2) ; extra == 'use_chardet_on_py3'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Documentation, https://requests.readthedocs.io",
          "Source, https://github.com/psf/requests"
        ],
        "provides_extra": [
          "security",
          "socks",
          "use_chardet_on_py3"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/6f/bb/5deac77a9af870143c684ab46a7934038a53eb4aa975bc0687ed6ca2c610/requests_oauthlib-1.3.1-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2577c501a2fb8d05a304c09d090d6e47c306fef15809d102b327cf8364bddab5",
          "hashes": {
            "sha256": "2577c501a2fb8d05a304c09d090d6e47c306fef15809d102b327cf8364bddab5"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "requests-oauthlib",
        "version": "1.3.1",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "OAuthlib authentication support for Requests.",
        "description": "Requests-OAuthlib |build-status| |coverage-status| |docs|\n=========================================================\n\nThis project provides first-class OAuth library support for `Requests <http://python-requests.org>`_.\n\nThe OAuth 1 workflow\n--------------------\n\nOAuth 1 can seem overly complicated and it sure has its quirks. Luckily,\nrequests_oauthlib hides most of these and let you focus at the task at hand.\n\nAccessing protected resources using requests_oauthlib is as simple as:\n\n.. code-block:: pycon\n\n    >>> from requests_oauthlib import OAuth1Session\n    >>> twitter = OAuth1Session('client_key',\n                                client_secret='client_secret',\n                                resource_owner_key='resource_owner_key',\n                                resource_owner_secret='resource_owner_secret')\n    >>> url = 'https://api.twitter.com/1/account/settings.json'\n    >>> r = twitter.get(url)\n\nBefore accessing resources you will need to obtain a few credentials from your\nprovider (e.g. Twitter) and authorization from the user for whom you wish to\nretrieve resources for. You can read all about this in the full\n`OAuth 1 workflow guide on RTD <https://requests-oauthlib.readthedocs.io/en/latest/oauth1_workflow.html>`_.\n\nThe OAuth 2 workflow\n--------------------\n\nOAuth 2 is generally simpler than OAuth 1 but comes in more flavours. The most\ncommon being the Authorization Code Grant, also known as the WebApplication\nflow.\n\nFetching a protected resource after obtaining an access token can be extremely\nsimple. However, before accessing resources you will need to obtain a few\ncredentials from your provider (e.g. Google) and authorization from the user\nfor whom you wish to retrieve resources for. You can read all about this in the\nfull `OAuth 2 workflow guide on RTD <https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html>`_.\n\nInstallation\n-------------\n\nTo install requests and requests_oauthlib you can use pip:\n\n.. code-block:: bash\n\n    $ pip install requests requests_oauthlib\n\n.. |build-status| image:: https://github.com/requests/requests-oauthlib/actions/workflows/run-tests.yml/badge.svg\n   :target: https://github.com/requests/requests-oauthlib/actions\n.. |coverage-status| image:: https://img.shields.io/coveralls/requests/requests-oauthlib.svg\n   :target: https://coveralls.io/r/requests/requests-oauthlib\n.. |docs| image:: https://readthedocs.org/projects/requests-oauthlib/badge/\n   :alt: Documentation Status\n   :scale: 100%\n   :target: https://requests-oauthlib.readthedocs.io/\n\n\nHistory\n-------\n\nv1.3.1 (21 January 2022)\n++++++++++++++++++++++++\n\n- Add initial support for OAuth Mutual TLS (draft-ietf-oauth-mtls)\n- Add eBay compliance fix\n- Add Spotify OAuth 2 Tutorial\n- Add support for python 3.8, 3.9\n- Fixed LinkedIn Compliance Fixes\n- Fixed ReadTheDocs Documentation and sphinx errors\n- Moved pipeline to GitHub Actions\n\nv1.3.0 (6 November 2019)\n++++++++++++++++++++++++\n\n- Instagram compliance fix\n- Added ``force_querystring`` argument to fetch_token() method on OAuth2Session\n\nv1.2.0 (14 January 2019)\n++++++++++++++++++++++++\n\n- This project now depends on OAuthlib 3.0.0 and above. It does **not** support\n  versions of OAuthlib before 3.0.0.\n- Updated oauth2 tests to use 'sess' for an OAuth2Session instance instead of `auth`\n  because OAuth2Session objects and methods acceept an `auth` paramether which is\n  typically an instance of `requests.auth.HTTPBasicAuth`\n- `OAuth2Session.fetch_token` previously tried to guess how and where to provide\n  \"client\" and \"user\" credentials incorrectly. This was incompatible with some\n  OAuth servers and incompatible with breaking changes in oauthlib that seek to\n  correctly provide the `client_id`. The older implementation also did not raise\n  the correct exceptions when username and password are not present on Legacy\n  clients.\n- Avoid automatic netrc authentication for OAuth2Session.\n\nv1.1.0 (9 January 2019)\n+++++++++++++++++++++++\n\n- Adjusted version specifier for ``oauthlib`` dependency: this project is\n  not yet compatible with ``oauthlib`` 3.0.0.\n- Dropped dependency on ``nose``.\n- Minor changes to clean up the code and make it more readable/maintainable.\n\nv1.0.0 (4 June 2018)\n++++++++++++++++++++\n\n- **Removed support for Python 2.6 and Python 3.3.**\n  This project now supports Python 2.7, and Python 3.4 and above.\n- Added several examples to the documentation.\n- Added plentymarkets compliance fix.\n- Added a ``token`` property to OAuth1Session, to match the corresponding\n  ``token`` property on OAuth2Session.\n\nv0.8.0 (14 February 2017)\n+++++++++++++++++++++++++\n\n- Added Fitbit compliance fix.\n- Fixed an issue where newlines in the response body for the access token\n  request would cause errors when trying to extract the token.\n- Fixed an issue introduced in v0.7.0 where users passing ``auth`` to several\n  methods would encounter conflicts with the ``client_id`` and\n  ``client_secret``-derived auth. The user-supplied ``auth`` argument is now\n  used in preference to those options.\n\nv0.7.0 (22 September 2016)\n++++++++++++++++++++++++++\n\n- Allowed ``OAuth2Session.request`` to take the ``client_id`` and\n  ``client_secret`` parameters for the purposes of automatic token refresh,\n  which may need them.\n\nv0.6.2 (12 July 2016)\n+++++++++++++++++++++\n\n- Use ``client_id`` and ``client_secret`` for the Authorization header if\n  provided.\n- Allow explicit bypass of the Authorization header by setting ``auth=False``.\n- Pass through the ``proxies`` kwarg when refreshing tokens.\n- Miscellaneous cleanups.\n\nv0.6.1 (19 February 2016)\n+++++++++++++++++++++++++\n\n- Fixed a bug when sending authorization in headers with no username and\n  password present.\n- Make sure we clear the session token before obtaining a new one.\n- Some improvements to the Slack compliance fix.\n- Avoid timing problems around token refresh.\n- Allow passing arbitrary arguments to requests when calling\n  ``fetch_request_token`` and ``fetch_access_token``.\n\nv0.6.0 (14 December 2015)\n+++++++++++++++++++++++++\n\n- Add compliance fix for Slack.\n- Add compliance fix for Mailchimp.\n- ``TokenRequestDenied`` exceptions now carry the entire response, not just the\n  status code.\n- Pass through keyword arguments when refreshing tokens automatically.\n- Send authorization in headers, not just body, to maximize compatibility.\n- More getters/setters available for OAuth2 session client values.\n- Allow sending custom headers when refreshing tokens, and set some defaults.\n\n\nv0.5.0 (4 May 2015)\n+++++++++++++++++++\n- Fix ``TypeError`` being raised instead of ``TokenMissing`` error.\n- Raise requests exceptions on 4XX and 5XX responses in the OAuth2 flow.\n- Avoid ``AttributeError`` when initializing the ``OAuth2Session`` class\n  without complete client information.\n\nv0.4.2 (16 October 2014)\n++++++++++++++++++++++++\n- New ``authorized`` property on OAuth1Session and OAuth2Session, which allows\n  you to easily determine if the session is already authorized with OAuth tokens\n  or not.\n- New ``TokenMissing`` and ``VerifierMissing`` exception classes for OAuth1Session:\n  this will make it easier to catch and identify these exceptions.\n\nv0.4.1 (6 June 2014)\n++++++++++++++++++++\n- New install target ``[rsa]`` for people using OAuth1 RSA-SHA1 signature\n  method.\n- Fixed bug in OAuth2 where supplied state param was not used in auth url.\n- OAuth2 HTTPS checking can be disabled by setting environment variable\n  ``OAUTHLIB_INSECURE_TRANSPORT``.\n- OAuth1 now re-authorize upon redirects.\n- OAuth1 token fetching now raise a detailed error message when the\n  response body is incorrectly encoded or the request was denied.\n- Added support for custom OAuth1 clients.\n- OAuth2 compliance fix for Sina Weibo.\n- Multiple fixes to facebook compliance fix.\n- Compliance fixes now re-encode body properly as bytes in Python 3.\n- Logging now properly done under ``requests_oauthlib`` namespace instead\n  of piggybacking on oauthlib namespace.\n- Logging introduced for OAuth1 auth and session.\n\nv0.4.0 (29 September 2013)\n++++++++++++++++++++++++++\n- OAuth1Session methods only return unicode strings. #55.\n- Renamed requests_oauthlib.core to requests_oauthlib.oauth1_auth for consistency. #79.\n- Added Facebook compliance fix and access_token_response hook to OAuth2Session. #63.\n- Added LinkedIn compliance fix.\n- Added refresh_token_response compliance hook, invoked before parsing the refresh token.\n- Correctly limit compliance hooks to running only once!\n- Content type guessing should only be done when no content type is given\n- OAuth1 now updates r.headers instead of replacing it with non case insensitive dict\n- Remove last use of Response.content (in OAuth1Session). #44.\n- State param can now be supplied in OAuth2Session.authorize_url\n\n\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/requests/requests-oauthlib",
        "author": "Kenneth Reitz",
        "author_email": "me@kennethreitz.com",
        "license": "ISC",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Natural Language :: English",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.4",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy"
        ],
        "requires_dist": [
          "oauthlib (>=3.0.0)",
          "requests (>=2.0.0)",
          "oauthlib[signedtoken] (>=3.0.0) ; extra == 'rsa'"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "provides_extra": [
          "rsa"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/d9/5a/e7c31adbe875f2abbb91bd84cf2dc52d792b5a01506781dbcf25c91daf11/six-1.16.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254",
          "hashes": {
            "sha256": "8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "six",
        "version": "1.16.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Python 2 and 3 compatibility utilities",
        "description": ".. image:: https://img.shields.io/pypi/v/six.svg\n   :target: https://pypi.org/project/six/\n   :alt: six on PyPI\n\n.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master\n   :target: https://travis-ci.org/benjaminp/six\n   :alt: six on TravisCI\n\n.. image:: https://readthedocs.org/projects/six/badge/?version=latest\n   :target: https://six.readthedocs.io/\n   :alt: six's documentation on Read the Docs\n\n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/benjaminp/six/blob/master/LICENSE\n   :alt: MIT License badge\n\nSix is a Python 2 and 3 compatibility library.  It provides utility functions\nfor smoothing over the differences between the Python versions with the goal of\nwriting Python code that is compatible on both Python versions.  See the\ndocumentation for more information on what is provided.\n\nSix supports Python 2.7 and 3.3+.  It is contained in only one Python\nfile, so it can be easily copied into your project. (The copyright and license\nnotice must be retained.)\n\nOnline documentation is at https://six.readthedocs.io/.\n\nBugs can be reported to https://github.com/benjaminp/six.  The code can also\nbe found there.\n\n\n",
        "home_page": "https://github.com/benjaminp/six",
        "author": "Benjamin Peterson",
        "author_email": "benjamin@python.org",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 3",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Topic :: Software Development :: Libraries",
          "Topic :: Utilities"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/a7/a5/10f97f73544edcdef54409f1d839f6049a0d79df68adbc1ceb24d1aaca42/smmap-5.0.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=e6d8668fa5f93e706934a62d7b4db19c8d9eb8cf2adbb75ef1b675aa332b69da",
          "hashes": {
            "sha256": "e6d8668fa5f93e706934a62d7b4db19c8d9eb8cf2adbb75ef1b675aa332b69da"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "smmap",
        "version": "5.0.1",
        "platform": [
          "any"
        ],
        "summary": "A pure Python implementation of a sliding window memory map manager",
        "description": "## Motivation\n\nWhen reading from many possibly large files in a fashion similar to random access, it is usually the fastest and most efficient to use memory maps.\n\nAlthough memory maps have many advantages, they represent a very limited system resource as every map uses one file descriptor, whose amount is limited per process. On 32 bit systems, the amount of memory you can have mapped at a time is naturally limited to theoretical 4GB of memory, which may not be enough for some applications.\n\n\n## Limitations\n\n* **System resources (file-handles) are likely to be leaked!** This is due to the library authors reliance on a deterministic `__del__()` destructor.\n* The memory access is read-only by design.\n\n\n## Overview\n\n![Python package](https://github.com/gitpython-developers/smmap/workflows/Python%20package/badge.svg)\n\nSmmap wraps an interface around mmap and tracks the mapped files as well as the amount of clients who use it. If the system runs out of resources, or if a memory limit is reached, it will automatically unload unused maps to allow continued operation.\n\nTo allow processing large files even on 32 bit systems, it allows only portions of the file to be mapped. Once the user reads beyond the mapped region, smmap will automatically map the next required region, unloading unused regions using a LRU algorithm.\n\nAlthough the library can be used most efficiently with its native interface, a Buffer implementation is provided to hide these details behind a simple string-like interface.\n\nFor performance critical 64 bit applications, a simplified version of memory mapping is provided which always maps the whole file, but still provides the benefit of unloading unused mappings on demand.\n\n\n\n## Prerequisites\n\n* Python 3.7+\n* OSX, Windows or Linux\n\nThe package was tested on all of the previously mentioned configurations.\n\n## Installing smmap\n\n[![Documentation Status](https://readthedocs.org/projects/smmap/badge/?version=latest)](https://readthedocs.org/projects/smmap/?badge=latest)\n\nIts easiest to install smmap using the [pip](http://www.pip-installer.org/en/latest) program:\n\n```bash\n$ pip install smmap\n```\n\nAs the command will install smmap in your respective python distribution, you will most likely need root permissions to authorize the required changes.\n\nIf you have downloaded the source archive, the package can be installed by running the `setup.py` script:\n\n```bash\n$ python setup.py install\n```\n\nIt is advised to have a look at the **Usage Guide** for a brief introduction on the different database implementations.\n\n\n\n## Homepage and Links\n\nThe project is home on github at https://github.com/gitpython-developers/smmap .\n\nThe latest source can be cloned from github as well:\n\n* git://github.com/gitpython-developers/smmap.git\n\n\nFor support, please use the git-python mailing list:\n\n* http://groups.google.com/group/git-python\n\n\nIssues can be filed on github:\n\n* https://github.com/gitpython-developers/smmap/issues\n\nA link to the pypi page related to this repository:\n\n* https://pypi.org/project/smmap/\n\n\n## License Information\n\n*smmap* is licensed under the New BSD License.\n\n",
        "description_content_type": "text/markdown",
        "home_page": "https://github.com/gitpython-developers/smmap",
        "author": "Sebastian Thiel",
        "author_email": "byronimo@gmail.com",
        "license": "BSD",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Operating System :: POSIX",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: MacOS :: MacOS X",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3 :: Only"
        ],
        "requires_python": ">=3.7"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b7/f4/6a90020cd2d93349b442bfcb657d0dc91eee65491600b2cb1d388bc98e6b/typing_extensions-4.9.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=af72aea155e91adfc61c3ae9e0e342dbc0cba726d6cba4b6c72c1f34e47291cd",
          "hashes": {
            "sha256": "af72aea155e91adfc61c3ae9e0e342dbc0cba726d6cba4b6c72c1f34e47291cd"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "typing_extensions",
        "version": "4.9.0",
        "summary": "Backported and Experimental Type Hints for Python 3.8+",
        "description": "# Typing Extensions\n\n[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing)\n\n[Documentation](https://typing-extensions.readthedocs.io/en/latest/#) –\n[PyPI](https://pypi.org/project/typing-extensions/)\n\n## Overview\n\nThe `typing_extensions` module serves two related purposes:\n\n- Enable use of new type system features on older Python versions. For example,\n  `typing.TypeGuard` is new in Python 3.10, but `typing_extensions` allows\n  users on previous Python versions to use it too.\n- Enable experimentation with new type system PEPs before they are accepted and\n  added to the `typing` module.\n\n`typing_extensions` is treated specially by static type checkers such as\nmypy and pyright. Objects defined in `typing_extensions` are treated the same\nway as equivalent forms in `typing`.\n\n`typing_extensions` uses\n[Semantic Versioning](https://semver.org/). The\nmajor version will be incremented only for backwards-incompatible changes.\nTherefore, it's safe to depend\non `typing_extensions` like this: `typing_extensions >=x.y, <(x+1)`,\nwhere `x.y` is the first version that includes all features you need.\n\n## Included items\n\nSee [the documentation](https://typing-extensions.readthedocs.io/en/latest/#) for a\ncomplete listing of module contents.\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/python/typing_extensions/blob/main/CONTRIBUTING.md)\nfor how to contribute to `typing_extensions`.\n\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "annotations",
          "backport",
          "checker",
          "checking",
          "function",
          "hinting",
          "hints",
          "type",
          "typechecking",
          "typehinting",
          "typehints",
          "typing"
        ],
        "author_email": "\"Guido van Rossum, Jukka Lehtosalo, Łukasz Langa, Michael Lee\" <levkivskyi@gmail.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Python Software Foundation License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Topic :: Software Development"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Bug Tracker, https://github.com/python/typing_extensions/issues",
          "Changes, https://github.com/python/typing_extensions/blob/main/CHANGELOG.md",
          "Documentation, https://typing-extensions.readthedocs.io/",
          "Home, https://github.com/python/typing_extensions",
          "Q & A, https://github.com/python/typing/discussions",
          "Repository, https://github.com/python/typing_extensions"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/a2/73/a68704750a7679d0b6d3ad7aa8d4da8e14e151ae82e6fee774e6e0d05ec8/urllib3-2.2.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=450b20ec296a467077128bff42b73080516e71b56ff59a60a02bef2232c4fa9d",
          "hashes": {
            "sha256": "450b20ec296a467077128bff42b73080516e71b56ff59a60a02bef2232c4fa9d"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "urllib3",
        "version": "2.2.1",
        "summary": "HTTP library with thread-safe connection pooling, file post, and more.",
        "description": "<h1 align=\"center\">\n\n![urllib3](https://github.com/urllib3/urllib3/raw/main/docs/_static/banner_github.svg)\n\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/urllib3.svg?maxAge=86400\" /></a>\n  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/urllib3.svg?maxAge=86400\" /></a>\n  <a href=\"https://discord.gg/urllib3\"><img alt=\"Join our Discord\" src=\"https://img.shields.io/discord/756342717725933608?color=%237289da&label=discord\" /></a>\n  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img alt=\"Coverage Status\" src=\"https://img.shields.io/badge/coverage-100%25-success\" /></a>\n  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img alt=\"Build Status on GitHub\" src=\"https://github.com/urllib3/urllib3/workflows/CI/badge.svg\" /></a>\n  <a href=\"https://urllib3.readthedocs.io\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/urllib3/badge/?version=latest\" /></a><br>\n  <a href=\"https://deps.dev/pypi/urllib3\"><img alt=\"OpenSSF Scorecard\" src=\"https://api.securityscorecards.dev/projects/github.com/urllib3/urllib3/badge\" /></a>\n  <a href=\"https://slsa.dev\"><img alt=\"SLSA 3\" src=\"https://slsa.dev/images/gh-badge-level3.svg\" /></a>\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/6227\"><img alt=\"CII Best Practices\" src=\"https://bestpractices.coreinfrastructure.org/projects/6227/badge\" /></a>\n</p>\n\nurllib3 is a powerful, *user-friendly* HTTP client for Python. Much of the\nPython ecosystem already uses urllib3 and you should too.\nurllib3 brings many critical features that are missing from the Python\nstandard libraries:\n\n- Thread safety.\n- Connection pooling.\n- Client-side SSL/TLS verification.\n- File uploads with multipart encoding.\n- Helpers for retrying requests and dealing with HTTP redirects.\n- Support for gzip, deflate, brotli, and zstd encoding.\n- Proxy support for HTTP and SOCKS.\n- 100% test coverage.\n\nurllib3 is powerful and easy to use:\n\n```python3\n>>> import urllib3\n>>> resp = urllib3.request(\"GET\", \"http://httpbin.org/robots.txt\")\n>>> resp.status\n200\n>>> resp.data\nb\"User-agent: *\\nDisallow: /deny\\n\"\n```\n\n## Installing\n\nurllib3 can be installed with [pip](https://pip.pypa.io):\n\n```bash\n$ python -m pip install urllib3\n```\n\nAlternatively, you can grab the latest source code from [GitHub](https://github.com/urllib3/urllib3):\n\n```bash\n$ git clone https://github.com/urllib3/urllib3.git\n$ cd urllib3\n$ pip install .\n```\n\n\n## Documentation\n\nurllib3 has usage and reference documentation at [urllib3.readthedocs.io](https://urllib3.readthedocs.io).\n\n\n## Community\n\nurllib3 has a [community Discord channel](https://discord.gg/urllib3) for asking questions and\ncollaborating with other contributors. Drop by and say hello 👋\n\n\n## Contributing\n\nurllib3 happily accepts contributions. Please see our\n[contributing documentation](https://urllib3.readthedocs.io/en/latest/contributing.html)\nfor some tips on getting started.\n\n\n## Security Disclosures\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure with maintainers.\n\n\n## Maintainers\n\n- [@sethmlarson](https://github.com/sethmlarson) (Seth M. Larson)\n- [@pquentin](https://github.com/pquentin) (Quentin Pradet)\n- [@illia-v](https://github.com/illia-v) (Illia Volochii)\n- [@theacodes](https://github.com/theacodes) (Thea Flowers)\n- [@haikuginger](https://github.com/haikuginger) (Jess Shapiro)\n- [@lukasa](https://github.com/lukasa) (Cory Benfield)\n- [@sigmavirus24](https://github.com/sigmavirus24) (Ian Stapleton Cordasco)\n- [@shazow](https://github.com/shazow) (Andrey Petrov)\n\n👋\n\n\n## Sponsorship\n\nIf your company benefits from this library, please consider [sponsoring its\ndevelopment](https://urllib3.readthedocs.io/en/latest/sponsors.html).\n\n\n## For Enterprise\n\nProfessional support for urllib3 is available as part of the [Tidelift\nSubscription][1].  Tidelift gives software development teams a single source for\npurchasing and maintaining their software, with professional grade assurances\nfrom the experts who know it best, while seamlessly integrating with existing\ntools.\n\n[1]: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "filepost",
          "http",
          "httplib",
          "https",
          "pooling",
          "ssl",
          "threadsafe",
          "urllib"
        ],
        "author_email": "Andrey Petrov <andrey.petrov@shazow.net>",
        "maintainer_email": "Seth Michael Larson <sethmichaellarson@gmail.com>, Quentin Pradet <quentin@pradet.me>, Illia Volochii <illia.volochii@gmail.com>",
        "classifier": [
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: WWW/HTTP",
          "Topic :: Software Development :: Libraries"
        ],
        "requires_dist": [
          "brotli>=1.0.9; (platform_python_implementation == 'CPython') and extra == 'brotli'",
          "brotlicffi>=0.8.0; (platform_python_implementation != 'CPython') and extra == 'brotli'",
          "h2<5,>=4; extra == 'h2'",
          "pysocks!=1.5.7,<2.0,>=1.5.6; extra == 'socks'",
          "zstandard>=0.18.0; extra == 'zstd'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://github.com/urllib3/urllib3/blob/main/CHANGES.rst",
          "Documentation, https://urllib3.readthedocs.io",
          "Code, https://github.com/urllib3/urllib3",
          "Issue tracker, https://github.com/urllib3/urllib3/issues"
        ],
        "provides_extra": [
          "brotli",
          "h2",
          "socks",
          "zstd"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/83/1c/25b79fc3ec99b19b0a0730cc47356f7e2959863bf9f3cd314332bddb4f68/pywin32-306-cp312-cp312-win_amd64.whl",
        "archive_info": {
          "hash": "sha256=37257794c1ad39ee9be652da0462dc2e394c8159dfd913a8a4e8eb6fd346da0e",
          "hashes": {
            "sha256": "37257794c1ad39ee9be652da0462dc2e394c8159dfd913a8a4e8eb6fd346da0e"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pywin32",
        "version": "306",
        "summary": "Python for Window Extensions",
        "description": "# pywin32\r\n\r\n[![CI](https://github.com/mhammond/pywin32/workflows/CI/badge.svg)](https://github.com/mhammond/pywin32/actions?query=workflow%3ACI)\r\n[![PyPI - Version](https://img.shields.io/pypi/v/pywin32.svg)](https://pypi.org/project/pywin32)\r\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pywin32.svg)](https://pypi.org/project/pywin32)\r\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/pywin32.svg)](https://pypi.org/project/pywin32)\r\n[![License - PSF-2.0](https://img.shields.io/badge/license-PSF--2.0-9400d3.svg)](https://spdx.org/licenses/PSF-2.0.html)\r\n\r\n-----\r\n\r\nThis is the readme for the Python for Win32 (pywin32) extensions, which provides access to many of the Windows APIs from Python.\r\n\r\nSee [CHANGES.txt](https://github.com/mhammond/pywin32/blob/master/CHANGES.txt) for recent notable changes.\r\n\r\nOnly Python 3 is supported. If you want Python 2 support, you want build `228`.\r\n\r\n## Docs\r\n\r\nThe docs are a long and sad story, but [there's now an online version](https://mhammond.github.io/pywin32/)\r\nof the helpfile that ships with the installers (thanks [@ofek](https://github.com/mhammond/pywin32/pull/1774)!).\r\nLots of that is very old, but some is auto-generated and current. Would love help untangling the docs!\r\n\r\n## Support\r\n\r\nFeel free to [open issues](https://github.com/mhammond/pywin32/issues) for\r\nall bugs (or suspected bugs) in pywin32. [pull-requests](https://github.com/mhammond/pywin32/pulls)\r\nfor all bugs or features are also welcome.\r\n\r\nHowever, please **do not open github issues for general support requests**, or\r\nfor problems or questions using the modules in this package - they will be\r\nclosed. For such issues, please email the\r\n[python-win32 mailing list](http://mail.python.org/mailman/listinfo/python-win32) -\r\nnote that you must be subscribed to the list before posting.\r\n\r\n## Binaries\r\n[Binary releases are deprecated.](https://mhammond.github.io/pywin32_installers.html)\r\nWhile they are still provided, [find them here](https://github.com/mhammond/pywin32/releases)\r\n\r\n## Installing via PIP\r\n\r\nYou should install pywin32 via pip - eg,\r\n> python -m pip install --upgrade pywin32\r\n\r\nIf you encounter any problems when upgrading (eg, \"module not found\" errors or similar), you\r\nshould execute:\r\n\r\n> python Scripts/pywin32_postinstall.py -install\r\n\r\nThis will make some small attempts to cleanup older conflicting installs.\r\n\r\nNote that if you want to use pywin32 for \"system wide\" features, such as\r\nregistering COM objects or implementing Windows Services, then you must run\r\nthat command from an elevated (ie, \"Run as Administrator) command prompt.\r\n\r\nFor unreleased changes, you can download builds made by [github actions](https://github.com/mhammond/pywin32/actions/) -\r\nchoose any \"workflow\" from the `main` branch and download its \"artifacts\")\r\n\r\n### `The specified procedure could not be found` / `Entry-point not found` Errors?\r\nA very common report is that people install pywin32, but many imports fail with errors\r\nsimilar to the above.\r\n\r\nIn almost all cases, this tends to mean there are other pywin32 DLLs installed in your system,\r\nbut in a different location than the new ones. This sometimes happens in environments that\r\ncome with pywin32 pre-shipped (eg, anaconda?).\r\n\r\nThe possible solutions are:\r\n\r\n* Run the \"post_install\" script documented above.\r\n\r\n* Otherwise, find and remove all other copies of `pywintypesXX.dll` and `pythoncomXX.dll`\r\n  (where `XX` is the Python version - eg, \"39\")\r\n\r\n### Running as a Windows Service\r\n\r\nModern Python installers do not, by default, install Python in a way that is suitable for\r\nrunning as a service, particularly for other users.\r\n\r\n* Ensure Python is installed in a location where the user running the service has\r\n  access to the installation and is able to load `pywintypesXX.dll` and `pythonXX.dll`.\r\n\r\n* Manually copy `pythonservice.exe` from the `site-packages/win32` directory to\r\n  the same place as these DLLs.\r\n\r\n## Building from source\r\n\r\nInstall Visual Studio 2019 (later probably works, but options might be different),\r\nselect \"Desktop Development with C++\", then the following options:\r\n* Windows 10 SDK (latest offered I guess? At time of writing, 10.0.18362)\r\n* \"C++ for MFC for ...\"\r\n* ARM build tools if necessary.\r\n\r\n(the free compilers probably work too, but haven't been tested - let me know your experiences!)\r\n\r\n`setup.py` is a standard distutils build script, so you probably want:\r\n\r\n> python setup.py install\r\n\r\nor\r\n\r\n> python setup.py --help\r\n\r\nSome modules need obscure SDKs to build - `setup.py` should succeed, gracefully\r\ntelling you why it failed to build them - if the build actually fails with your\r\nconfiguration, please [open an issue](https://github.com/mhammond/pywin32/issues).\r\n\r\n## Release process\r\n\r\nThe following steps are performed when making a new release - this is mainly\r\nto form a checklist so mhammond doesn't forget what to do :)\r\n\r\n* Ensure CHANGES.txt has everything worth noting, commit it.\r\n\r\n* Update setup.py with the new build number.\r\n\r\n* Execute build.bat, wait forever, test the artifacts.\r\n\r\n* Upload .whl artifacts to pypi - we do this before pushing the tag because they might be\r\n  rejected for an invalid `README.md`. Done via `py -3.? -m twine upload dist/*XXX*.whl`.\r\n\r\n* Commit setup.py (so the new build number is in the repo), create a new git tag\r\n\r\n* Upload the .exe installers to github.\r\n\r\n* Update setup.py with the new build number + \".1\" (eg, 123.1), to ensure\r\n  future test builds aren't mistaken for the real release.\r\n\r\n* Make sure everything is pushed to github, including the tag (ie,\r\n  `git push --tags`)\r\n\r\n* Send mail to python-win32\r\n",
        "description_content_type": "text/markdown",
        "home_page": "https://github.com/mhammond/pywin32",
        "author": "Mark Hammond (et al)",
        "author_email": "mhammond@skippinet.com.au",
        "license": "PSF",
        "classifier": [
          "Environment :: Win32 (MS Windows)",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Python Software Foundation License",
          "Operating System :: Microsoft :: Windows",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython"
        ]
      }
    }
  ],
  "environment": {
    "implementation_name": "cpython",
    "implementation_version": "3.12.4",
    "os_name": "nt",
    "platform_machine": "AMD64",
    "platform_release": "11",
    "platform_system": "Windows",
    "platform_version": "10.0.22631",
    "python_full_version": "3.12.4",
    "platform_python_implementation": "CPython",
    "python_version": "3.12",
    "sys_platform": "win32"
  }
}